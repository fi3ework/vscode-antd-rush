{
  "zh": {
    "Affix": {
      "offsetBottom": {
        "property": "offsetBottom",
        "description": "距离窗口底部达到指定偏移量后触发",
        "type": "number",
        "default": "",
        "version": ""
      },
      "offsetTop": {
        "property": "offsetTop",
        "description": "距离窗口顶部达到指定偏移量后触发",
        "type": "number",
        "default": "",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "设置 `Affix` 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "固定状态改变时触发的回调函数",
        "type": "Function(affixed)",
        "default": "无",
        "version": ""
      }
    },
    "Alert": {
      "afterClose": {
        "property": "afterClose",
        "description": "关闭动画结束后触发的回调函数",
        "type": "() => void",
        "default": "-",
        "version": "3.3.1"
      },
      "banner": {
        "property": "banner",
        "description": "是否用作顶部公告",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "默认不显示关闭按钮",
        "type": "boolean",
        "default": "无",
        "version": ""
      },
      "closeText": {
        "property": "closeText",
        "description": "自定义关闭按钮",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "警告提示的辅助性文字介绍",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "自定义图标，`showIcon` 为 `true` 时有效",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "message": {
        "property": "message",
        "description": "警告提示内容",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      },
      "showIcon": {
        "property": "showIcon",
        "description": "是否显示辅助图标",
        "type": "boolean",
        "default": "false，`banner` 模式下默认值为 true",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error`",
        "type": "string",
        "default": "`info`，`banner` 模式下默认值为 `warning`",
        "version": ""
      },
      "onClose": {
        "property": "onClose",
        "description": "关闭时触发的回调函数",
        "type": "(e: MouseEvent) => void",
        "default": "无",
        "version": ""
      }
    },
    "Anchor": {
      "affix": {
        "property": "affix",
        "description": "固定模式",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "bounds": {
        "property": "bounds",
        "description": "锚点区域边界",
        "type": "number",
        "default": "5(px)",
        "version": ""
      },
      "getContainer": {
        "property": "getContainer",
        "description": "指定滚动的容器",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": "3.4.0"
      },
      "offsetBottom": {
        "property": "offsetBottom",
        "description": "距离窗口底部达到指定偏移量后触发",
        "type": "number",
        "default": "",
        "version": ""
      },
      "offsetTop": {
        "property": "offsetTop",
        "description": "距离窗口顶部达到指定偏移量后触发",
        "type": "number",
        "default": "",
        "version": ""
      },
      "showInkInFixed": {
        "property": "showInkInFixed",
        "description": "固定模式是否显示小圆点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "`click` 事件的 handler",
        "type": "Function(e: Event, link: Object)",
        "default": "-",
        "version": "3.9.0"
      },
      "getCurrentAnchor": {
        "property": "getCurrentAnchor",
        "description": "自定义高亮的锚点",
        "type": "() => string",
        "default": "-",
        "version": "3.22.0"
      },
      "targetOffset": {
        "property": "targetOffset",
        "description": "锚点滚动偏移量，默认与 offsetTop 相同，[例子](#components-anchor-demo-targetOffset)",
        "type": "number",
        "default": "`offsetTop`",
        "version": "3.22.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "监听锚点链接改变",
        "type": "(currentActiveLink: string) => void",
        "default": "",
        "version": "3.24.0"
      }
    },
    "Anchor.Link": {
      "href": {
        "property": "href",
        "description": "锚点链接",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "文字内容",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "该属性指定在何处显示链接的资源。",
        "type": "string",
        "default": "",
        "version": ""
      }
    },
    "AutoComplete": {
      "allowClear": {
        "property": "allowClear",
        "description": "支持清除, 单选模式有效",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "backfill": {
        "property": "backfill",
        "description": "使用键盘选择选项的时候把选中项回填到输入框中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "children (自定义输入框)": {
        "property": "children (自定义输入框)",
        "description": "自定义输入框",
        "type": "HTMLInputElement <br /><br /> HTMLTextAreaElement <br /><br /> `React.ReactElement<InputProps>`",
        "default": "`<Input />`",
        "version": ""
      },
      "children (自动完成的数据源)": {
        "property": "children (自动完成的数据源)",
        "description": "自动完成的数据源",
        "type": "`React.ReactElement<OptionProps>` <br /><br /> `Array<React.ReactElement<OptionProps>>`",
        "default": "-",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "自动完成的数据源",
        "type": "[DataSourceItemType](https://git.io/vMMKF)\\[]",
        "default": "",
        "version": ""
      },
      "dropdownMenuStyle": {
        "property": "dropdownMenuStyle",
        "description": "dropdown 菜单自定义样式",
        "type": "object",
        "default": "",
        "version": ""
      },
      "defaultActiveFirstOption": {
        "property": "defaultActiveFirstOption",
        "description": "是否默认高亮第一个选项。",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "指定默认选中的条目",
        "type": "string\\|string\\[]\\| 无",
        "default": "",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 `true`，反之则返回 `false`。",
        "type": "boolean or function(inputValue, option)",
        "default": "true",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0)",
        "type": "Function(triggerNode)",
        "default": "() => document.body",
        "version": "3.19.4"
      },
      "optionLabelProp": {
        "property": "optionLabelProp",
        "description": "回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。",
        "type": "string",
        "default": "`children`",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "输入框提示",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "指定当前选中的条目",
        "type": "string\\|string\\[]\\|{ key: string, label: string\\|ReactNode }\\|Array&lt;{ key: string, label: string\\|ReactNode }>",
        "default": "无",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时的回调",
        "type": "function()",
        "default": "-",
        "version": "3.6.5"
      },
      "onChange": {
        "property": "onChange",
        "description": "选中 option，或 input 的 value 变化时，调用此函数",
        "type": "function(value)",
        "default": "无",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获得焦点时的回调",
        "type": "function()",
        "default": "-",
        "version": "3.6.5"
      },
      "onSearch": {
        "property": "onSearch",
        "description": "搜索补全项的时候调用",
        "type": "function(value)",
        "default": "无",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "被选中时调用，参数为选中项的 value 值",
        "type": "function(value, option)",
        "default": "无",
        "version": ""
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "是否默认展开下拉菜单",
        "type": "boolean",
        "default": "-",
        "version": "3.9.3"
      },
      "open": {
        "property": "open",
        "description": "是否展开下拉菜单",
        "type": "boolean",
        "default": "-",
        "version": "3.9.3"
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "展开下拉菜单的回调",
        "type": "function(open)",
        "default": "-",
        "version": "3.9.3"
      }
    },
    "Avatar": {
      "icon": {
        "property": "icon",
        "description": "设置头像的图标类型，可设为 Icon 的 `type` 或 ReactNode",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": ""
      },
      "shape": {
        "property": "shape",
        "description": "指定头像的形状",
        "type": "Enum{ 'circle', 'square' }",
        "default": "`circle`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "设置头像的大小",
        "type": "number \\| Enum{ 'large', 'small', 'default' }",
        "default": "`default`",
        "version": ""
      },
      "src": {
        "property": "src",
        "description": "图片类头像的资源地址",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "srcSet": {
        "property": "srcSet",
        "description": "设置图片类头像响应式资源地址",
        "type": "string",
        "default": "-",
        "version": "3.11.0"
      },
      "alt": {
        "property": "alt",
        "description": "图像无法显示时的替代文本",
        "type": "string",
        "default": "-",
        "version": "3.7.0"
      },
      "onError": {
        "property": "onError",
        "description": "图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为",
        "type": "() => boolean",
        "default": "-",
        "version": "3.8.0"
      }
    },
    "BackTop": {
      "target": {
        "property": "target",
        "description": "设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数",
        "type": "Function",
        "default": "() => window",
        "version": ""
      },
      "visibilityHeight": {
        "property": "visibilityHeight",
        "description": "滚动高度达到此参数值才出现 `BackTop`",
        "type": "number",
        "default": "400",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击按钮的回调函数",
        "type": "Function",
        "default": "-",
        "version": ""
      }
    },
    "Badge": {
      "color": {
        "property": "color",
        "description": "自定义小圆点的颜色",
        "type": "string",
        "default": "-",
        "version": "3.16.0"
      },
      "count": {
        "property": "count",
        "description": "展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏",
        "type": "ReactNode",
        "default": "",
        "version": ""
      },
      "dot": {
        "property": "dot",
        "description": "不展示数字，只有一个小红点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "offset": {
        "property": "offset",
        "description": "设置状态点的位置偏移，格式为 `[x, y]`",
        "type": "`[number, number]`",
        "default": "-",
        "version": ""
      },
      "overflowCount": {
        "property": "overflowCount",
        "description": "展示封顶的数字值",
        "type": "number",
        "default": "99",
        "version": ""
      },
      "showZero": {
        "property": "showZero",
        "description": "当数值为 0 时，是否展示 Badge",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "设置 Badge 为状态点",
        "type": "Enum{ 'success', 'processing, 'default', 'error', 'warning' }",
        "default": "''",
        "version": ""
      },
      "text": {
        "property": "text",
        "description": "在设置了 `status` 的前提下有效，设置状态点的文本",
        "type": "string",
        "default": "''",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "设置鼠标放在状态点上时显示的文字",
        "type": "string",
        "default": "`count`",
        "version": "3.5.0"
      }
    },
    "Breadcrumb.Item": {
      "href": {
        "property": "href",
        "description": "链接的目的地",
        "type": "string",
        "default": "-",
        "version": "3.17.0"
      },
      "overlay": {
        "property": "overlay",
        "description": "下拉菜单的内容",
        "type": "[Menu](/components/menu) \\| () => Menu",
        "default": "-",
        "version": "3.17.0"
      },
      "onClick": {
        "property": "onClick",
        "description": "单击事件",
        "type": "(e:MouseEvent)=>void",
        "default": "-",
        "version": "3.17.0"
      }
    },
    "Breadcrumb": {
      "itemRender": {
        "property": "itemRender",
        "description": "自定义链接函数，和 react-router 配置使用",
        "type": "(route, params, routes, paths) => ReactNode",
        "default": "-",
        "version": "3.17.0"
      },
      "params": {
        "property": "params",
        "description": "路由的参数",
        "type": "object",
        "default": "-",
        "version": "3.17.0"
      },
      "routes": {
        "property": "routes",
        "description": "router 的路由栈信息",
        "type": "[routes\\[\\]](#routes)",
        "default": "-",
        "version": "3.17.0"
      },
      "separator": {
        "property": "separator",
        "description": "分隔符自定义",
        "type": "string\\|ReactNode",
        "default": "'/'",
        "version": "3.17.0"
      }
    },
    "Breadcrumb.Separator": {
      "children": {
        "property": "children",
        "description": "要显示的分隔符",
        "type": "string\\|ReactNode",
        "default": "'/'",
        "version": "3.21.0"
      }
    },
    "Button": {
      "disabled": {
        "property": "disabled",
        "description": "按钮失效状态",
        "type": "boolean",
        "default": "`false`",
        "version": "3.5.1"
      },
      "ghost": {
        "property": "ghost",
        "description": "幽灵属性，使按钮背景透明，版本 2.7 中增加",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "href": {
        "property": "href",
        "description": "点击跳转的地址，指定此属性 button 的行为和 a 链接一致",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "htmlType": {
        "property": "htmlType",
        "description": "设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)",
        "type": "string",
        "default": "`button`",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "设置按钮的图标类型",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "设置按钮载入状态",
        "type": "boolean \\| { delay: number }",
        "default": "`false`",
        "version": ""
      },
      "shape": {
        "property": "shape",
        "description": "设置按钮形状，可选值为 `circle`、 `round` 或者不设",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "设置按钮大小，可选值为 `small` `large` 或者不设",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "相当于 a 链接的 target 属性，href 存在时生效",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "设置按钮类型，可选值为 `primary` `dashed` `danger` `link`(3.17 中增加) 或者不设",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击按钮时的回调",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      "block": {
        "property": "block",
        "description": "将按钮宽度调整为其父宽度的选项",
        "type": "boolean",
        "default": "`false`",
        "version": "3.8.0"
      }
    },
    "Calendar": {
      "dateCellRender": {
        "property": "dateCellRender",
        "description": "自定义渲染日期单元格，返回内容会被追加到单元格",
        "type": "function(date: moment): ReactNode",
        "default": "无",
        "version": ""
      },
      "dateFullCellRender": {
        "property": "dateFullCellRender",
        "description": "自定义渲染日期单元格，返回内容覆盖单元格",
        "type": "function(date: moment): ReactNode",
        "default": "无",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认展示的日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "默认日期",
        "version": ""
      },
      "disabledDate": {
        "property": "disabledDate",
        "description": "不可选择的日期",
        "type": "(currentDate: moment) => boolean",
        "default": "无",
        "version": ""
      },
      "fullscreen": {
        "property": "fullscreen",
        "description": "是否全屏显示",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "国际化配置",
        "type": "object",
        "default": "[默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "初始模式，`month/year`",
        "type": "string",
        "default": "month",
        "version": ""
      },
      "monthCellRender": {
        "property": "monthCellRender",
        "description": "自定义渲染月单元格，返回内容会被追加到单元格",
        "type": "function(date: moment): ReactNode",
        "default": "无",
        "version": ""
      },
      "monthFullCellRender": {
        "property": "monthFullCellRender",
        "description": "自定义渲染月单元格，返回内容覆盖单元格",
        "type": "function(date: moment): ReactNode",
        "default": "无",
        "version": ""
      },
      "validRange": {
        "property": "validRange",
        "description": "设置可以显示的日期",
        "type": "\\[[moment](http://momentjs.com/), [moment](http://momentjs.com/)]",
        "default": "无",
        "version": "3.3.0"
      },
      "value": {
        "property": "value",
        "description": "展示日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "当前日期",
        "version": ""
      },
      "onPanelChange": {
        "property": "onPanelChange",
        "description": "日期面板变化回调",
        "type": "function(date: moment, mode: string)",
        "default": "无",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "点击选择日期回调",
        "type": "function(date: moment）",
        "default": "无",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "日期变化回调",
        "type": "function(date: moment）",
        "default": "无",
        "version": "3.8.0"
      },
      "headerRender": {
        "property": "headerRender",
        "description": "自定义头部内容",
        "type": "function(object:{value: moment, type: string, onChange: f(), onTypeChange: f()})",
        "default": "无",
        "version": "3.19.0"
      }
    },
    "Card": {
      "actions": {
        "property": "actions",
        "description": "卡片操作组，位置在卡片底部",
        "type": "Array&lt;ReactNode>",
        "default": "-",
        "version": ""
      },
      "activeTabKey": {
        "property": "activeTabKey",
        "description": "当前激活页签的 key",
        "type": "string",
        "default": "-",
        "version": "3.3.0"
      },
      "headStyle": {
        "property": "headStyle",
        "description": "自定义标题区域样式",
        "type": "object",
        "default": "-",
        "version": "3.8.0"
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "内容区域自定义样式",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "cover": {
        "property": "cover",
        "description": "卡片封面",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "defaultActiveTabKey": {
        "property": "defaultActiveTabKey",
        "description": "初始化选中页签的 key，如果没有设置 activeTabKey",
        "type": "string",
        "default": "第一个页签",
        "version": "3.3.0"
      },
      "extra": {
        "property": "extra",
        "description": "卡片右上角的操作区域",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "hoverable": {
        "property": "hoverable",
        "description": "鼠标移过时可浮起",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "当卡片内容还在加载中时，可以用 loading 展示一个占位",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "tabList": {
        "property": "tabList",
        "description": "页签标题列表",
        "type": "Array&lt;{key: string, tab: ReactNode}>",
        "default": "-",
        "version": ""
      },
      "tabBarExtraContent": {
        "property": "tabBarExtraContent",
        "description": "tab bar 上额外的元素",
        "type": "React.ReactNode",
        "default": "无",
        "version": "3.23.0"
      },
      "size": {
        "property": "size",
        "description": "card 的尺寸",
        "type": "`default` \\| `small`",
        "default": "`default`",
        "version": "3.12.0"
      },
      "title": {
        "property": "title",
        "description": "卡片标题",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "卡片类型，可设置为 `inner` 或 不设置",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onTabChange": {
        "property": "onTabChange",
        "description": "页签切换的回调",
        "type": "(key) => void",
        "default": "-",
        "version": ""
      }
    },
    "Card.Grid": {
      "className": {
        "property": "className",
        "description": "网格容器类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hoverable": {
        "property": "hoverable",
        "description": "鼠标移过时可浮起",
        "type": "boolean",
        "default": "true",
        "version": "3.23.0"
      },
      "style": {
        "property": "style",
        "description": "定义网格容器类名的样式",
        "type": "object",
        "default": "-",
        "version": ""
      }
    },
    "Carousel": {
      "afterChange": {
        "property": "afterChange",
        "description": "切换面板的回调",
        "type": "function(current)",
        "default": "无",
        "version": ""
      },
      "autoplay": {
        "property": "autoplay",
        "description": "是否自动切换",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "beforeChange": {
        "property": "beforeChange",
        "description": "切换面板的回调",
        "type": "function(from, to)",
        "default": "无",
        "version": ""
      },
      "dotPosition": {
        "property": "dotPosition",
        "description": "面板指示点位置，可选 `top` `bottom` `left` `right`",
        "type": "string",
        "default": "bottom",
        "version": "3.17.0"
      },
      "dots": {
        "property": "dots",
        "description": "是否显示面板指示点",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "easing": {
        "property": "easing",
        "description": "动画效果",
        "type": "string",
        "default": "linear",
        "version": ""
      },
      "effect": {
        "property": "effect",
        "description": "动画效果函数，可取 scrollx, fade",
        "type": "string",
        "default": "scrollx",
        "version": ""
      }
    },
    "Card.Meta": {
      "avatar": {
        "property": "avatar",
        "description": "头像/图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "容器类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "描述内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "定义容器类名的样式",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "标题内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Cascader": {
      "allowClear": {
        "property": "allowClear",
        "description": "是否支持清除",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "changeOnSelect": {
        "property": "changeOnSelect",
        "description": "当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "自定义类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认的选中项",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "displayRender": {
        "property": "displayRender",
        "description": "选择后展示的渲染函数",
        "type": "`(label, selectedOptions) => ReactNode`",
        "default": "`label => label.join(' / ')`",
        "version": ""
      },
      "expandTrigger": {
        "property": "expandTrigger",
        "description": "次级菜单的展开方式，可选 'click' 和 'hover'",
        "type": "string",
        "default": "'click'",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "自定义 options 中 label name children 的字段（注意，3.7.0 之前的版本为 `filedNames`）",
        "type": "object",
        "default": "`{ label: 'label', value: 'value', children: 'children' }`",
        "version": "3.7.0"
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "Function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "用于动态加载选项，无法与 `showSearch` 一起使用",
        "type": "`(selectedOptions) => void`",
        "default": "-",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "当下拉列表为空时显示的内容",
        "type": "string",
        "default": "'Not Found'",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "可选项数据源",
        "type": "[Option](#Option)\\[]",
        "default": "-",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "输入框占位文本",
        "type": "string",
        "default": "'请选择'",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "自定义浮层类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "popupPlacement": {
        "property": "popupPlacement",
        "description": "浮层预设位置：`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "type": "Enum",
        "default": "`bottomLeft`",
        "version": ""
      },
      "popupVisible": {
        "property": "popupVisible",
        "description": "控制浮层显隐",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "在选择框中显示搜索框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "输入框大小，可选 `large` `default` `small`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "自定义样式",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "自定义的选择框后缀图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "value": {
        "property": "value",
        "description": "指定选中项",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选择完成后的回调",
        "type": "`(value, selectedOptions) => void`",
        "default": "-",
        "version": ""
      },
      "onPopupVisibleChange": {
        "property": "onPopupVisibleChange",
        "description": "显示/隐藏浮层的回调",
        "type": "`(value) => void`",
        "default": "-",
        "version": ""
      }
    },
    "Checkbox": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "checked": {
        "property": "checked",
        "description": "指定当前是否选中",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "初始是否选中",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "disabled": {
        "property": "disabled",
        "description": "失效状态",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "indeterminate": {
        "property": "indeterminate",
        "description": "设置 indeterminate 状态，只负责样式控制",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "onChange": {
        "property": "onChange",
        "description": "变化时回调函数",
        "type": "Function(e:Event)",
        "default": "-",
        "version": "3.6.2"
      }
    },
    "Checkbox.Group": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认选中的选项",
        "type": "string\\[]",
        "default": "\\[]",
        "version": "3.6.2"
      },
      "disabled": {
        "property": "disabled",
        "description": "整组失效",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "name": {
        "property": "name",
        "description": "CheckboxGroup 下所有 `input[type=\"checkbox\"]` 的 `name` 属性",
        "type": "string",
        "default": "-",
        "version": "3.16.0"
      },
      "options": {
        "property": "options",
        "description": "指定可选项",
        "type": "string\\[] \\| Option\\[]",
        "default": "\\[]",
        "version": "3.6.2"
      },
      "value": {
        "property": "value",
        "description": "指定选中的选项",
        "type": "string\\[]",
        "default": "\\[]",
        "version": "3.6.2"
      },
      "onChange": {
        "property": "onChange",
        "description": "变化时回调函数",
        "type": "Function(checkedValue)",
        "default": "-",
        "version": "3.6.2"
      }
    },
    "Collapse": {
      "activeKey": {
        "property": "activeKey",
        "description": "当前激活 tab 面板的 key",
        "type": "string\\[]\\|string\\| number\\[]\\|number",
        "default": "默认无，accordion 模式下默认第一个元素",
        "version": ""
      },
      "defaultActiveKey": {
        "property": "defaultActiveKey",
        "description": "初始化选中面板的 key",
        "type": "string\\[]\\|string\\| number\\[]\\|number",
        "default": "无",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "带边框风格的折叠面板",
        "type": "boolean",
        "default": "`true`",
        "version": "3.13.0"
      },
      "accordion": {
        "property": "accordion",
        "description": "手风琴模式",
        "type": "boolean",
        "default": "`false`",
        "version": "3.13.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "切换面板的回调",
        "type": "Function",
        "default": "无",
        "version": ""
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "自定义切换图标",
        "type": "(panelProps) => ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "expandIconPosition": {
        "property": "expandIconPosition",
        "description": "设置图标位置： `left`, `right`",
        "type": "`left`",
        "default": "-",
        "version": "3.17.0"
      },
      "destroyInactivePanel": {
        "property": "destroyInactivePanel",
        "description": "销毁折叠隐藏的面板",
        "type": "boolean",
        "default": "`false`",
        "version": "3.13.0"
      }
    },
    "Collapse.Panel": {
      "disabled": {
        "property": "disabled",
        "description": "禁用后的面板展开与否将无法通过用户交互改变",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "被隐藏时是否渲染 DOM 结构",
        "type": "boolean",
        "default": "false",
        "version": "3.2.0"
      },
      "header": {
        "property": "header",
        "description": "面板头内容",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "对应 activeKey",
        "type": "string\\|number",
        "default": "无",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "是否展示当前面板上的箭头",
        "type": "boolean",
        "default": "`true`",
        "version": "3.13.0"
      },
      "extra": {
        "property": "extra",
        "description": "自定义渲染每个面板右上角的内容",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      }
    },
    "Comment": {
      "actions": {
        "property": "actions",
        "description": "在评论内容下面呈现的操作项列表",
        "type": "Array<ReactNode>",
        "default": "-",
        "version": "3.11.0"
      },
      "author": {
        "property": "author",
        "description": "要显示为注释作者的元素",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "avatar": {
        "property": "avatar",
        "description": "要显示为评论头像的元素 - 通常是 antd `Avatar` 或者 src",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "children": {
        "property": "children",
        "description": "嵌套注释应作为注释的子项提供",
        "type": "ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "content": {
        "property": "content",
        "description": "评论的主要内容",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "datetime": {
        "property": "datetime",
        "description": "展示时间描述",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.11.0"
      }
    },
    "DatePicker.MonthPicker": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": ""
      },
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "默认面板日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": "3.10.8"
      },
      "format": {
        "property": "format",
        "description": "展示的日期格式，配置参考 [moment.js](http://momentjs.com/)",
        "type": "string",
        "default": "\"YYYY-MM\"",
        "version": ""
      },
      "monthCellContentRender": {
        "property": "monthCellContentRender",
        "description": "自定义的月份内容渲染方法",
        "type": "function(date, locale): ReactNode",
        "default": "-",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "在面板中添加额外的页脚",
        "type": "() => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "时间发生变化的回调，发生在用户选择时间时",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      }
    },
    "DatePicker": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认日期，如果开始时间或结束时间为 `null` 或者 `undefined`，日期范围将是一个开区间",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": ""
      },
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "默认面板日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": "3.10.8"
      },
      "disabledTime": {
        "property": "disabledTime",
        "description": "不可选择的时间",
        "type": "function(date)",
        "default": "无",
        "version": ""
      },
      "format": {
        "property": "format",
        "description": "设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 [moment.js](http://momentjs.com/)",
        "type": "string \\| string\\[]",
        "default": "\"YYYY-MM-DD\"",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "在面板中添加额外的页脚",
        "type": "(mode) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "showTime": {
        "property": "showTime",
        "description": "增加时间选择功能",
        "type": "Object\\|boolean",
        "default": "[TimePicker Options](/components/time-picker/#API)",
        "version": ""
      },
      "showTime.defaultValue": {
        "property": "showTime.defaultValue",
        "description": "设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date)",
        "type": "[moment](http://momentjs.com/)",
        "default": "moment()",
        "version": ""
      },
      "showToday": {
        "property": "showToday",
        "description": "是否展示“今天”按钮",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "时间发生变化的回调",
        "type": "function(date: moment, dateString: string)",
        "default": "无",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "点击确定按钮的回调",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onPanelChange": {
        "property": "onPanelChange",
        "description": "日期面板变化时的回调",
        "type": "function(value, mode)",
        "default": "-",
        "version": "3.5.0"
      }
    },
    "DatePicker.WeekPicker": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "默认面板日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": "3.10.8"
      },
      "format": {
        "property": "format",
        "description": "展示的日期格式，配置参考 [moment.js](http://momentjs.com/)",
        "type": "string",
        "default": "\"YYYY-wo\"",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "日期",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "时间发生变化的回调，发生在用户选择时间时",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "在面板中添加额外的页脚",
        "type": "(mode) => React.ReactNode",
        "default": "-",
        "version": "3.12.0"
      }
    },
    "DatePicker.RangePicker": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认日期",
        "type": "[moment](http://momentjs.com/)\\[]",
        "default": "无",
        "version": ""
      },
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "默认面板日期",
        "type": "[moment](http://momentjs.com/)\\[]",
        "default": "无",
        "version": "3.10.8"
      },
      "disabledTime": {
        "property": "disabledTime",
        "description": "不可选择的时间",
        "type": "function(dates: \\[moment, moment], partial: \\`'start'",
        "default": "'end'\\`)",
        "version": "无"
      },
      "format": {
        "property": "format",
        "description": "展示的日期格式",
        "type": "string",
        "default": "\"YYYY-MM-DD HH:mm:ss\"",
        "version": ""
      },
      "ranges": {
        "property": "ranges",
        "description": "预设时间范围快捷选择",
        "type": "{ \\[range: string]: [moment](http://momentjs.com/)\\[] } \\| { \\[range: string]: () => [moment](http://momentjs.com/)\\[] }",
        "default": "无",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "在面板中添加额外的页脚",
        "type": "() => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "separator": {
        "property": "separator",
        "description": "设置分隔符",
        "type": "string",
        "default": "'~'",
        "version": "3.14.0"
      },
      "showTime": {
        "property": "showTime",
        "description": "增加时间选择功能",
        "type": "Object\\|boolean",
        "default": "[TimePicker Options](/components/time-picker/#API)",
        "version": ""
      },
      "showTime.defaultValue": {
        "property": "showTime.defaultValue",
        "description": "设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date)",
        "type": "[moment](http://momentjs.com/)\\[]",
        "default": "\\[moment(), moment()]",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "日期",
        "type": "[moment](http://momentjs.com/)\\[]",
        "default": "无",
        "version": ""
      },
      "onCalendarChange": {
        "property": "onCalendarChange",
        "description": "待选日期发生变化的回调",
        "type": "function(dates: \\[moment, moment])",
        "default": "无",
        "version": "3.0.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "日期范围发生变化的回调",
        "type": "function(dates: \\[moment, moment], dateStrings: \\[string, string])",
        "default": "无",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "点击确定按钮的回调",
        "type": "function(dates: [moment](http://momentjs.com/)\\[])",
        "default": "-",
        "version": ""
      }
    },
    "Descriptions": {
      "title": {
        "property": "title",
        "description": "描述列表的标题，显示在最顶部",
        "type": "ReactNode",
        "default": "-",
        "version": "3.19.0"
      },
      "bordered": {
        "property": "bordered",
        "description": "是否展示边框",
        "type": "boolean",
        "default": "false",
        "version": "3.19.0"
      },
      "column": {
        "property": "column",
        "description": "一行的 `DescriptionItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}`",
        "type": "number",
        "default": "3",
        "version": "3.19.0"
      },
      "size": {
        "property": "size",
        "description": "设置列表的大小。可以设置为 `middle` 、`small`, 或不填（只有设置 `bordered={true}` 生效）",
        "type": "\\`default",
        "default": "middle",
        "version": "small\\`"
      },
      "layout": {
        "property": "layout",
        "description": "描述布局",
        "type": "\\`horizontal",
        "default": "vertical\\`",
        "version": "`horizontal`"
      },
      "colon": {
        "property": "colon",
        "description": "配置 `Descriptions.Item` 的 `colon` 的默认值",
        "type": "boolean",
        "default": "true",
        "version": "3.21.0"
      }
    },
    "Divider": {
      "className": {
        "property": "className",
        "description": "分割线样式类",
        "type": "string",
        "default": "-",
        "version": "3.5.4"
      },
      "dashed": {
        "property": "dashed",
        "description": "是否虚线",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "orientation": {
        "property": "orientation",
        "description": "分割线标题的位置",
        "type": "enum: `left` `right`",
        "default": "`center`",
        "version": "3.4.1"
      },
      "style": {
        "property": "style",
        "description": "分割线样式对象",
        "type": "object",
        "default": "-",
        "version": "3.5.4"
      },
      "type": {
        "property": "type",
        "description": "水平还是垂直类型",
        "type": "enum: `horizontal` `vertical`",
        "default": "`horizontal`",
        "version": ""
      }
    },
    "Descriptions.Item": {
      "label": {
        "property": "label",
        "description": "内容的描述",
        "type": "ReactNode",
        "default": "-",
        "version": "3.19.0"
      },
      "span": {
        "property": "span",
        "description": "包含列的数量",
        "type": "number",
        "default": "1",
        "version": "3.19.0"
      }
    },
    "Drawer": {
      "closable": {
        "property": "closable",
        "description": "是否显示右上角的关闭按钮",
        "type": "boolean",
        "default": "true",
        "version": "3.7.0"
      },
      "destroyOnClose": {
        "property": "destroyOnClose",
        "description": "关闭时销毁 Drawer 里的子元素",
        "type": "boolean",
        "default": "false",
        "version": "3.7.0"
      },
      "getContainer": {
        "property": "getContainer",
        "description": "指定 Drawer 挂载的 HTML 节点, false 为挂载在当前 dom",
        "type": "HTMLElement \\| `() => HTMLElement` \\| Selectors \\| false",
        "default": "'body'",
        "version": "3.7.0"
      },
      "maskClosable": {
        "property": "maskClosable",
        "description": "点击蒙层是否允许关闭",
        "type": "boolean",
        "default": "true",
        "version": "3.7.0"
      },
      "mask": {
        "property": "mask",
        "description": "是否展示遮罩",
        "type": "boolean",
        "default": "true",
        "version": "3.7.0"
      },
      "maskStyle": {
        "property": "maskStyle",
        "description": "遮罩样式",
        "type": "object",
        "default": "{}",
        "version": "3.7.0"
      },
      "style": {
        "property": "style",
        "description": "可用于设置 Drawer 最外层容器的样式，和 `drawerStyle` 的区别是作用节点包括 `mask`",
        "type": "object",
        "default": "-",
        "version": "3.7.0"
      },
      "drawerStyle": {
        "property": "drawerStyle",
        "description": "用于设置 Drawer 弹出层的样式",
        "type": "object",
        "default": "-",
        "version": "3.24.0"
      },
      "headerStyle": {
        "property": "headerStyle",
        "description": "用于设置 Drawer 头部的样式",
        "type": "object",
        "default": "-",
        "version": "3.24.0"
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "可用于设置 Drawer 内容部分的样式",
        "type": "object",
        "default": "-",
        "version": "3.12.0"
      },
      "title": {
        "property": "title",
        "description": "标题",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.7.0"
      },
      "visible": {
        "property": "visible",
        "description": "Drawer 是否可见",
        "type": "boolean",
        "default": "-",
        "version": "3.7.0"
      },
      "width": {
        "property": "width",
        "description": "宽度",
        "type": "string \\| number",
        "default": "256",
        "version": "3.7.0"
      },
      "height": {
        "property": "height",
        "description": "高度, 在 `placement` 为 `top` 或 `bottom` 时使用",
        "type": "string \\| number",
        "default": "256",
        "version": "3.9.0"
      },
      "className": {
        "property": "className",
        "description": "对话框外层容器的类名",
        "type": "string",
        "default": "-",
        "version": "3.8.0"
      },
      "zIndex": {
        "property": "zIndex",
        "description": "设置 Drawer 的 `z-index`",
        "type": "number",
        "default": "1000",
        "version": "3.7.0"
      },
      "placement": {
        "property": "placement",
        "description": "抽屉的方向",
        "type": "'top' \\| 'right' \\| 'bottom' \\| 'left'",
        "default": "'right'",
        "version": "3.7.0"
      },
      "onClose": {
        "property": "onClose",
        "description": "点击遮罩层或右上角叉或取消按钮的回调",
        "type": "function(e)",
        "default": "无",
        "version": "3.7.0"
      },
      "afterVisibleChange": {
        "property": "afterVisibleChange",
        "description": "切换抽屉时动画结束后的回调",
        "type": "function(visible)",
        "default": "无",
        "version": "3.17.0"
      },
      "keyboard": {
        "property": "keyboard",
        "description": "是否支持键盘 esc 关闭",
        "type": "boolean",
        "default": "true",
        "version": "3.19.8"
      }
    },
    "Dropdown": {
      "disabled": {
        "property": "disabled",
        "description": "菜单是否禁用",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "Function(triggerNode)",
        "default": "`() => document.body`",
        "version": ""
      },
      "overlay": {
        "property": "overlay",
        "description": "菜单",
        "type": "[Menu](/components/menu) \\| () => Menu",
        "default": "-",
        "version": ""
      },
      "overlayClassName": {
        "property": "overlayClassName",
        "description": "下拉根元素的类名称",
        "type": "string",
        "default": "-",
        "version": "3.11.0"
      },
      "overlayStyle": {
        "property": "overlayStyle",
        "description": "下拉根元素的样式",
        "type": "object",
        "default": "-",
        "version": "3.11.0"
      },
      "placement": {
        "property": "placement",
        "description": "菜单弹出位置：`bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight`",
        "type": "String",
        "default": "`bottomLeft`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "触发下拉的行为, 移动端不支持 hover",
        "type": "Array&lt;`click`\\|`hover`\\|`contextMenu`>",
        "default": "`['hover']`",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "菜单是否显示",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "onVisibleChange": {
        "property": "onVisibleChange",
        "description": "菜单显示状态改变时调用，参数为 visible",
        "type": "Function(visible)",
        "default": "-",
        "version": ""
      }
    },
    "Dropdown.Button": {
      "disabled": {
        "property": "disabled",
        "description": "菜单是否禁用",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "右侧的 icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.17.0"
      },
      "overlay": {
        "property": "overlay",
        "description": "菜单",
        "type": "[Menu](/components/menu/)",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "菜单弹出位置：`bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight`",
        "type": "String",
        "default": "`bottomLeft`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "按钮大小，和 [Button](/components/button/) 一致",
        "type": "string",
        "default": "'default'",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "触发下拉的行为",
        "type": "Array&lt;`click`\\|`hover`\\|`contextMenu`>",
        "default": "`['hover']`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "按钮类型，和 [Button](/components/button/) 一致",
        "type": "string",
        "default": "'default'",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "菜单是否显示",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击左侧按钮的回调，和 [Button](/components/button/) 一致",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "onVisibleChange": {
        "property": "onVisibleChange",
        "description": "菜单显示状态改变时调用，参数为 visible",
        "type": "Function",
        "default": "-",
        "version": ""
      }
    },
    "Form": {
      "form": {
        "property": "form",
        "description": "经 `Form.create()` 包装过的组件会自带 `this.props.form` 属性",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "hideRequiredMark": {
        "property": "hideRequiredMark",
        "description": "隐藏所有表单项的必选标记",
        "type": "Boolean",
        "default": "false",
        "version": ""
      },
      "labelAlign": {
        "property": "labelAlign",
        "description": "label 标签的文本对齐方式",
        "type": "'left' \\| 'right'",
        "default": "'right'",
        "version": "3.15.0"
      },
      "labelCol": {
        "property": "labelCol",
        "description": "（3.14.0 新增，之前的版本只能设置到 FormItem 上。）label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`",
        "type": "[object](https://ant.design/components/grid/#Col)",
        "default": "",
        "version": "3.14.0"
      },
      "layout": {
        "property": "layout",
        "description": "表单布局",
        "type": "'horizontal'\\|'vertical'\\|'inline'",
        "default": "'horizontal'",
        "version": ""
      },
      "onSubmit": {
        "property": "onSubmit",
        "description": "数据验证成功后回调事件",
        "type": "Function(e:Event)",
        "default": "",
        "version": ""
      },
      "wrapperCol": {
        "property": "wrapperCol",
        "description": "（3.14.0 新增，之前的版本只能设置到 FormItem 上。）需要为输入控件设置布局样式时，使用该属性，用法同 labelCol",
        "type": "[object](https://ant.design/components/grid-cn/#Col)",
        "default": "",
        "version": "3.14.0"
      },
      "colon": {
        "property": "colon",
        "description": "配置 Form.Item 的 colon 的默认值 (只有在属性 layout 为 horizontal 时有效)",
        "type": "boolean",
        "default": "true",
        "version": "3.15.0"
      }
    },
    "Empty": {
      "description": {
        "property": "description",
        "description": "自定义描述内容",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.12.0"
      },
      "imageStyle": {
        "property": "imageStyle",
        "description": "图片样式",
        "type": "CSSProperties",
        "default": "-",
        "version": "3.16.0"
      },
      "image": {
        "property": "image",
        "description": "设置显示图片，为 string 时表示自定义图片地址。",
        "type": "string \\| ReactNode",
        "default": "`Empty.PRESENTED_IMAGE_DEFAULT`",
        "version": "3.12.0"
      }
    },
    "Row": {
      "align": {
        "property": "align",
        "description": "flex 布局下的垂直对齐方式：`top` `middle` `bottom`",
        "type": "string",
        "default": "`top`",
        "version": ""
      },
      "gutter": {
        "property": "gutter",
        "description": "栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 `{ xs: 8, sm: 16, md: 24}`。或者使用数组形式同时设置 `[水平间距, 垂直间距]`（`3.24.0 后支持`）。",
        "type": "number/object/array",
        "default": "0",
        "version": ""
      },
      "justify": {
        "property": "justify",
        "description": "flex 布局下的水平排列方式：`start` `end` `center` `space-around` `space-between`",
        "type": "string",
        "default": "`start`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "布局模式，可选 `flex`，[现代浏览器](http://caniuse.com/#search=flex) 下有效",
        "type": "string",
        "default": "",
        "version": ""
      }
    },
    "Form.Item": {
      "colon": {
        "property": "colon",
        "description": "配合 label 属性使用，表示是否显示 label 后面的冒号",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "hasFeedback": {
        "property": "hasFeedback",
        "description": "配合 validateStatus 属性使用，展示校验状态图标，建议只配合 Input 组件使用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "help": {
        "property": "help",
        "description": "提示信息，如不设置，则会根据校验规则自动生成",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "htmlFor": {
        "property": "htmlFor",
        "description": "设置子元素 label `htmlFor` 属性",
        "type": "string",
        "default": "",
        "version": "3.17.0"
      },
      "label": {
        "property": "label",
        "description": "label 标签的文本",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "labelCol": {
        "property": "labelCol",
        "description": "label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`。在 3.14.0 之后，你可以通过 Form 的 labelCol 进行统一设置。当和 Form 同时设置时，以 FormItem 为准。",
        "type": "[object](https://ant.design/components/grid/#Col)",
        "default": "",
        "version": ""
      },
      "labelAlign": {
        "property": "labelAlign",
        "description": "标签文本对齐方式",
        "type": "'left' \\| 'right'",
        "default": "'right'",
        "version": "3.15.0"
      },
      "required": {
        "property": "required",
        "description": "是否必填，如不设置，则会根据校验规则自动生成",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "validateStatus": {
        "property": "validateStatus",
        "description": "校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating'",
        "type": "string",
        "default": "",
        "version": ""
      },
      "wrapperCol": {
        "property": "wrapperCol",
        "description": "需要为输入控件设置布局样式时，使用该属性，用法同 labelCol。在 3.14.0 之后，你可以通过 Form 的 wrapperCol 进行统一设置。当和 Form 同时设置时，以 FormItem 为准。",
        "type": "[object](https://ant.design/components/grid/#Col)",
        "default": "",
        "version": ""
      }
    },
    "Col": {
      "offset": {
        "property": "offset",
        "description": "栅格左侧的间隔格数，间隔内不可以有栅格",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "order": {
        "property": "order",
        "description": "栅格顺序，`flex` 布局模式下有效",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "pull": {
        "property": "pull",
        "description": "栅格向左移动格数",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "push": {
        "property": "push",
        "description": "栅格向右移动格数",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "span": {
        "property": "span",
        "description": "栅格占位格数，为 0 时相当于 `display: none`",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "xs": {
        "property": "xs",
        "description": "`<576px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "sm": {
        "property": "sm",
        "description": "`≥576px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "md": {
        "property": "md",
        "description": "`≥768px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "lg": {
        "property": "lg",
        "description": "`≥992px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "xl": {
        "property": "xl",
        "description": "`≥1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "xxl": {
        "property": "xxl",
        "description": "`≥1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      }
    },
    "Icon": {
      "type": {
        "property": "type",
        "description": "图标类型。遵循图标的命名规范",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "设置图标的样式，例如 `fontSize` 和 `color`",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "图标主题风格。可选实心、描线、双色等主题风格，适用于官方图标",
        "type": "'filled' \\| 'outlined' \\| 'twoTone'",
        "default": "'outlined'",
        "version": "3.9.0"
      },
      "spin": {
        "property": "spin",
        "description": "是否有旋转动画",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "rotate": {
        "property": "rotate",
        "description": "图标旋转角度（3.13.0 后新增，IE9 无效）",
        "type": "number",
        "default": "-",
        "version": "3.13.0"
      },
      "component": {
        "property": "component",
        "description": "控制如何渲染图标，通常是一个渲染根标签为 `<svg>` 的 `React` 组件，**会使 `type` 属性失效**",
        "type": "ComponentType&lt;CustomIconComponentProps>",
        "default": "-",
        "version": "3.9.0"
      },
      "twoToneColor": {
        "property": "twoToneColor",
        "description": "仅适用双色图标。设置双色图标的主要颜色",
        "type": "string (十六进制颜色)",
        "default": "-",
        "version": "3.9.0"
      }
    },
    "Input": {
      "addonAfter": {
        "property": "addonAfter",
        "description": "带标签的 input，设置后置标签",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "addonBefore": {
        "property": "addonBefore",
        "description": "带标签的 input，设置前置标签",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "输入框默认内容",
        "type": "string",
        "default": "",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用状态，默认为 false",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "id": {
        "property": "id",
        "description": "输入框的 id",
        "type": "string",
        "default": "",
        "version": ""
      },
      "maxLength": {
        "property": "maxLength",
        "description": "最大长度",
        "type": "number",
        "default": "",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "带有前缀图标的 input",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "控件大小。注：标准表单内的输入框大小限制为 `large`。可选 `large` `default` `small`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "suffix": {
        "property": "suffix",
        "description": "带有后缀图标的 input",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "声明 input 类型，同原生 input 标签的 type 属性，见：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#属性)(请直接使用 `Input.TextArea` 代替 `type=\"textarea\"`)。",
        "type": "string",
        "default": "`text`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "输入框内容",
        "type": "string",
        "default": "",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "输入框内容变化时的回调",
        "type": "function(e)",
        "default": "",
        "version": "3.9.3"
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "按下回车的回调",
        "type": "function(e)",
        "default": "",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "可以点击清除图标删除内容",
        "type": "boolean",
        "default": "",
        "version": "3.12.0"
      }
    },
    "Input.TextArea": {
      "autoSize": {
        "property": "autoSize",
        "description": "自适应内容高度，可设置为 \\`true",
        "type": "false` 或对象：`{ minRows: 2, maxRows: 6 }`。`3.24.0`后`autosize`被废弃，请使用`autoSize\\`。",
        "default": "boolean\\|object",
        "version": "false"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "输入框默认内容",
        "type": "string",
        "default": "",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "输入框内容",
        "type": "string",
        "default": "",
        "version": ""
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "按下回车的回调",
        "type": "function(e)",
        "default": "",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "可以点击清除图标删除内容",
        "type": "boolean",
        "default": "",
        "version": "3.25.0"
      }
    },
    "Input.Search": {
      "enterButton": {
        "property": "enterButton",
        "description": "是否有确认按钮，可设为按钮文字。该属性会与 addon 冲突。",
        "type": "boolean\\|ReactNode",
        "default": "false",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "点击搜索或按下回车键时的回调",
        "type": "function(value, event)",
        "default": "",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "搜索 loading",
        "type": "boolean",
        "default": "",
        "version": ""
      }
    },
    "Input.Group": {
      "compact": {
        "property": "compact",
        "description": "是否用紧凑模式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "`Input.Group` 中所有的 `Input` 的大小，可选 `large` `default` `small`",
        "type": "string",
        "default": "`default`",
        "version": ""
      }
    },
    "Input.Password": {
      "visibilityToggle": {
        "property": "visibilityToggle",
        "description": "是否显示切换按钮",
        "type": "boolean",
        "default": "true",
        "version": "3.12.2"
      }
    },
    "InputNumber": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "初始值",
        "type": "number",
        "default": "",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "formatter": {
        "property": "formatter",
        "description": "指定输入框展示值的格式",
        "type": "function(value: number \\| string): string",
        "default": "-",
        "version": ""
      },
      "max": {
        "property": "max",
        "description": "最大值",
        "type": "number",
        "default": "Infinity",
        "version": ""
      },
      "min": {
        "property": "min",
        "description": "最小值",
        "type": "number",
        "default": "-Infinity",
        "version": ""
      },
      "parser": {
        "property": "parser",
        "description": "指定从 formatter 里转换回数字的方式，和 formatter 搭配使用",
        "type": "function( string): number",
        "default": "-",
        "version": ""
      },
      "precision": {
        "property": "precision",
        "description": "数值精度",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "decimalSeparator": {
        "property": "decimalSeparator",
        "description": "小数点",
        "type": "string",
        "default": "-",
        "version": "3.10.0"
      },
      "size": {
        "property": "size",
        "description": "输入框大小",
        "type": "string",
        "default": "无",
        "version": ""
      },
      "step": {
        "property": "step",
        "description": "每次改变步数，可以为小数",
        "type": "number\\|string",
        "default": "1",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "当前值",
        "type": "number",
        "default": "",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "变化回调",
        "type": "Function(value: number \\| string)",
        "default": "",
        "version": ""
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "按下回车的回调",
        "type": "function(e)",
        "default": "",
        "version": ""
      }
    },
    "Layout": {
      "className": {
        "property": "className",
        "description": "容器 className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hasSider": {
        "property": "hasSider",
        "description": "表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动",
        "type": "boolean",
        "default": "-",
        "version": "3.2.0"
      },
      "style": {
        "property": "style",
        "description": "指定样式",
        "type": "object",
        "default": "-",
        "version": ""
      }
    },
    "List": {
      "bordered": {
        "property": "bordered",
        "description": "是否展示边框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "列表底部",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "grid": {
        "property": "grid",
        "description": "列表栅格配置",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "header": {
        "property": "header",
        "description": "列表头部",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "itemLayout": {
        "property": "itemLayout",
        "description": "设置 `List.Item` 布局, 设置成 `vertical` 则竖直样式显示, 默认横排",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "当卡片内容还在加载中时，可以用 `loading` 展示一个占位",
        "type": "boolean\\|[object](https://ant.design/components/spin-cn/#API) ([更多](https://github.com/ant-design/ant-design/issues/8659))",
        "default": "false",
        "version": ""
      },
      "loadMore": {
        "property": "loadMore",
        "description": "加载更多",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "默认文案设置，目前包括空数据文案",
        "type": "object",
        "default": "emptyText: '暂无数据'",
        "version": "3.4.2"
      },
      "pagination": {
        "property": "pagination",
        "description": "对应的 `pagination` 配置, 设置 `false` 不显示",
        "type": "boolean\\|object",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "list 的尺寸",
        "type": "`default` \\| `middle` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "split": {
        "property": "split",
        "description": "是否展示分割线",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "列表数据源",
        "type": "any\\[]",
        "default": "-",
        "version": "3.20.1"
      },
      "renderItem": {
        "property": "renderItem",
        "description": "当使用 dataSource 时，可以用 `renderItem` 自定义渲染列表项",
        "type": "`item => ReactNode`",
        "default": "-",
        "version": "3.20.1"
      }
    },
    "Layout.Sider": {
      "breakpoint": {
        "property": "breakpoint",
        "description": "触发响应式布局的[断点](/components/grid-cn/#Col)",
        "type": "Enum { 'xs', 'sm', 'md', 'lg', 'xl', 'xxl' }",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "容器 className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "collapsed": {
        "property": "collapsed",
        "description": "当前收起状态",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "collapsedWidth": {
        "property": "collapsedWidth",
        "description": "收缩宽度，设置为 0 会出现特殊 trigger",
        "type": "number",
        "default": "80",
        "version": ""
      },
      "collapsible": {
        "property": "collapsible",
        "description": "是否可收起",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultCollapsed": {
        "property": "defaultCollapsed",
        "description": "是否默认收起",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "reverseArrow": {
        "property": "reverseArrow",
        "description": "翻转折叠提示箭头的方向，当 Sider 在右边时可以使用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "指定样式",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "主题颜色",
        "type": "string: `light` `dark`",
        "default": "`dark`",
        "version": "3.6.0"
      },
      "trigger": {
        "property": "trigger",
        "description": "自定义 trigger，设置为 null 时隐藏 trigger",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "宽度",
        "type": "number\\|string",
        "default": "200",
        "version": ""
      },
      "onCollapse": {
        "property": "onCollapse",
        "description": "展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发",
        "type": "(collapsed, type) => {}",
        "default": "-",
        "version": ""
      },
      "onBreakpoint": {
        "property": "onBreakpoint",
        "description": "触发响应式布局[断点](/components/grid#API)时的回调",
        "type": "(broken) => {}",
        "default": "-",
        "version": "3.7.0"
      },
      "zeroWidthTriggerStyle": {
        "property": "zeroWidthTriggerStyle",
        "description": "指定当 `collapsedWidth` 为 0 时出现的特殊 trigger 的样式",
        "type": "object",
        "default": "-",
        "version": "3.24.0"
      }
    },
    "List.Item": {
      "actions": {
        "property": "actions",
        "description": "列表操作组，根据 `itemLayout` 的不同, 位置在卡片底部或者最右侧",
        "type": "Array&lt;ReactNode>",
        "default": "-",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "额外内容, 通常用在 `itemLayout` 为 `vertical` 的情况下, 展示右侧内容; `horizontal` 展示在列表元素最右侧",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Mention": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认值",
        "type": "ContentState, 可以用 `Mention.toContentState(text)` 把文字转换成 ContentState",
        "default": "null",
        "version": ""
      },
      "defaultSuggestions": {
        "property": "defaultSuggestions",
        "description": "默认建议内容",
        "type": "Array&lt;string\\|Mention.Nav>",
        "default": "\\[]",
        "version": "3.12.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用状态.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getSuggestionContainer": {
        "property": "getSuggestionContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位",
        "type": "function()",
        "default": "() => document.body",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "加载中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "multiLines": {
        "property": "multiLines",
        "description": "多行模式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "未找到时的内容",
        "type": "string",
        "default": "'无匹配结果，轻敲空格完成输入'",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "输入框默认文字",
        "type": "string",
        "default": "null",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "建议框位置，可选 `top` `bottom`",
        "type": "string",
        "default": "'bottom'",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "触发弹出下拉框的字符",
        "type": "string or Array&lt;string>",
        "default": "'@'",
        "version": ""
      },
      "readOnly": {
        "property": "readOnly",
        "description": "是否只读.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "suggestions": {
        "property": "suggestions",
        "description": "建议内容",
        "type": "Array&lt;string\\|Mention.Nav>",
        "default": "\\[]",
        "version": ""
      },
      "suggestionStyle": {
        "property": "suggestionStyle",
        "description": "弹出下拉框样式",
        "type": "object",
        "default": "{}",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "值",
        "type": "ContentState",
        "default": "null",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时回调",
        "type": "function(e)",
        "default": "null",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "输入框内容变化时回调",
        "type": "function(contentState: ContentState)",
        "default": "null",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获得焦点时回调",
        "type": "function(e)",
        "default": "null",
        "version": ""
      },
      "onSearchChange": {
        "property": "onSearchChange",
        "description": "输入框中 @ 变化时回调",
        "type": "function(value:string, trigger: string)",
        "default": "\\[]",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "下拉框选择建议时回调",
        "type": "function(suggestion: string, data?: any)",
        "default": "null",
        "version": ""
      }
    },
    "List.Item.Meta": {
      "avatar": {
        "property": "avatar",
        "description": "列表元素的图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "列表元素的描述内容",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "列表元素的标题",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Mentions": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获得焦点",
        "type": "boolean",
        "default": "`false`",
        "version": "3.19.0"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认值",
        "type": "string",
        "default": "-",
        "version": "3.19.0"
      },
      "filterOption": {
        "property": "filterOption",
        "description": "自定义过滤逻辑",
        "type": "false \\| (input: string, option: OptionProps) => boolean",
        "default": "-",
        "version": "3.19.0"
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "当下拉列表为空时显示的内容",
        "type": "ReactNode",
        "default": "'Not Found'",
        "version": "3.19.0"
      },
      "placement": {
        "property": "placement",
        "description": "弹出层展示位置",
        "type": "'top' \\| 'bottom'",
        "default": "'bottom'",
        "version": "3.19.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "设置触发关键字",
        "type": "string \\| string\\[]",
        "default": "'@'",
        "version": "3.19.0"
      },
      "split": {
        "property": "split",
        "description": "设置选中项前后分隔符",
        "type": "string",
        "default": "' '",
        "version": "3.19.0"
      },
      "validateSearch": {
        "property": "validateSearch",
        "description": "自定义触发验证逻辑",
        "type": "(text: string, props: MentionsProps) => void",
        "default": "-",
        "version": "3.19.0"
      },
      "value": {
        "property": "value",
        "description": "设置值",
        "type": "string",
        "default": "-",
        "version": "3.19.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "值改变时触发",
        "type": "(text: string) => void",
        "default": "-",
        "version": "3.19.0"
      },
      "onSelect": {
        "property": "onSelect",
        "description": "选择选项时触发",
        "type": "(option: OptionProps, prefix: string) => void",
        "default": "-",
        "version": "3.19.0"
      },
      "onSearch": {
        "property": "onSearch",
        "description": "搜索时触发",
        "type": "(text: string, prefix: string) => void",
        "default": "-",
        "version": "3.19.0"
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获得焦点时触发",
        "type": "() => void",
        "default": "-",
        "version": "3.19.0"
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时触发",
        "type": "() => void",
        "default": "-",
        "version": "3.19.0"
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "指定建议框挂载的 HTML 节点",
        "type": "() => HTMLElement",
        "default": "-",
        "version": "3.22.0"
      }
    },
    "Menu": {
      "defaultOpenKeys": {
        "property": "defaultOpenKeys",
        "description": "初始展开的 SubMenu 菜单项 key 数组",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "defaultSelectedKeys": {
        "property": "defaultSelectedKeys",
        "description": "初始选中的菜单项 key 数组",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "forceSubMenuRender": {
        "property": "forceSubMenuRender",
        "description": "在子菜单展示之前就渲染进 DOM",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "inlineCollapsed": {
        "property": "inlineCollapsed",
        "description": "inline 时菜单是否收起状态",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "inlineIndent": {
        "property": "inlineIndent",
        "description": "inline 模式的菜单缩进宽度",
        "type": "number",
        "default": "24",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "菜单类型，现在支持垂直、水平、和内嵌模式三种",
        "type": "string: `vertical` `horizontal` `inline`",
        "default": "`vertical`",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "是否允许多选",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "openKeys": {
        "property": "openKeys",
        "description": "当前展开的 SubMenu 菜单项 key 数组",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "是否允许选中",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "当前选中的菜单项 key 数组",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "根节点样式",
        "type": "object",
        "default": "",
        "version": ""
      },
      "subMenuCloseDelay": {
        "property": "subMenuCloseDelay",
        "description": "用户鼠标离开子菜单后关闭延时，单位：秒",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "subMenuOpenDelay": {
        "property": "subMenuOpenDelay",
        "description": "用户鼠标进入子菜单后开启延时，单位：秒",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "主题颜色",
        "type": "string: `light` `dark`",
        "default": "`light`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击 MenuItem 调用此函数",
        "type": "function({ item, key, keyPath, domEvent })",
        "default": "-",
        "version": ""
      },
      "onDeselect": {
        "property": "onDeselect",
        "description": "取消选中时调用，仅在 multiple 生效",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "SubMenu 展开/关闭的回调",
        "type": "function(openKeys: string\\[])",
        "default": "noop",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "被选中时调用",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default": "无  ",
        "version": ""
      },
      "overflowedIndicator": {
        "property": "overflowedIndicator",
        "description": "自定义 Menu 折叠时的图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.16.0"
      }
    },
    "Menu.Item": {
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "item 的唯一标志",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "设置收缩时展示的悬浮标题",
        "type": "string",
        "default": "",
        "version": "3.11.0"
      }
    },
    "Menu.SubMenu": {
      "popupClassName": {
        "property": "popupClassName",
        "description": "子菜单样式",
        "type": "string",
        "default": "",
        "version": "3.22.0"
      },
      "children": {
        "property": "children",
        "description": "子菜单的菜单项",
        "type": "Array&lt;MenuItem\\|SubMenu>",
        "default": "",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "唯一标志",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "子菜单项值",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "onTitleClick": {
        "property": "onTitleClick",
        "description": "点击子菜单标题",
        "type": "function({ key, domEvent })",
        "default": "",
        "version": ""
      }
    },
    "Menu.ItemGroup": {
      "children": {
        "property": "children",
        "description": "分组的菜单项",
        "type": "MenuItem\\[]",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "分组标题",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      }
    },
    "Modal": {
      "afterClose": {
        "property": "afterClose",
        "description": "Modal 完全关闭后的回调",
        "type": "function",
        "default": "无",
        "version": ""
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "Modal body 样式",
        "type": "object",
        "default": "{}",
        "version": ""
      },
      "cancelText": {
        "property": "cancelText",
        "description": "取消按钮文字",
        "type": "string\\|ReactNode",
        "default": "取消",
        "version": ""
      },
      "centered": {
        "property": "centered",
        "description": "垂直居中展示 Modal",
        "type": "Boolean",
        "default": "`false`",
        "version": "3.8.0"
      },
      "closable": {
        "property": "closable",
        "description": "是否显示右上角的关闭按钮",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "自定义关闭图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.22.0"
      },
      "confirmLoading": {
        "property": "confirmLoading",
        "description": "确定按钮 loading",
        "type": "boolean",
        "default": "无",
        "version": ""
      },
      "destroyOnClose": {
        "property": "destroyOnClose",
        "description": "关闭时销毁 Modal 里的子元素",
        "type": "boolean",
        "default": "false",
        "version": "3.1.0"
      },
      "footer": {
        "property": "footer",
        "description": "底部内容，当不需要默认底部按钮时，可以设为 `footer={null}`",
        "type": "string\\|ReactNode",
        "default": "确定取消按钮",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "强制渲染 Modal",
        "type": "boolean",
        "default": "false",
        "version": "3.12.0"
      },
      "getContainer": {
        "property": "getContainer",
        "description": "指定 Modal 挂载的 HTML 节点, false 为挂载在当前 dom",
        "type": "HTMLElement \\| `() => HTMLElement` \\| Selectors \\| false",
        "default": "document.body",
        "version": "3.20.2"
      },
      "keyboard": {
        "property": "keyboard",
        "description": "是否支持键盘 esc 关闭",
        "type": "boolean",
        "default": "true",
        "version": "3.4.2"
      },
      "mask": {
        "property": "mask",
        "description": "是否展示遮罩",
        "type": "Boolean",
        "default": "true",
        "version": ""
      },
      "maskClosable": {
        "property": "maskClosable",
        "description": "点击蒙层是否允许关闭",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskStyle": {
        "property": "maskStyle",
        "description": "遮罩样式",
        "type": "object",
        "default": "{}",
        "version": ""
      },
      "okText": {
        "property": "okText",
        "description": "确认按钮文字",
        "type": "string\\|ReactNode",
        "default": "确定",
        "version": ""
      },
      "okType": {
        "property": "okType",
        "description": "确认按钮类型",
        "type": "string",
        "default": "primary",
        "version": ""
      },
      "okButtonProps": {
        "property": "okButtonProps",
        "description": "ok 按钮 props",
        "type": "[ButtonProps](/components/button)",
        "default": "-",
        "version": "3.7.0"
      },
      "cancelButtonProps": {
        "property": "cancelButtonProps",
        "description": "cancel 按钮 props",
        "type": "[ButtonProps](/components/button)",
        "default": "-",
        "version": "3.7.0"
      },
      "style": {
        "property": "style",
        "description": "可用于设置浮层的样式，调整浮层位置等",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "标题",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "对话框是否可见",
        "type": "boolean",
        "default": "无",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "宽度",
        "type": "string\\|number",
        "default": "520",
        "version": ""
      },
      "wrapClassName": {
        "property": "wrapClassName",
        "description": "对话框外层容器的类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "zIndex": {
        "property": "zIndex",
        "description": "设置 Modal 的 `z-index`",
        "type": "Number",
        "default": "1000",
        "version": ""
      },
      "onCancel": {
        "property": "onCancel",
        "description": "点击遮罩层或右上角叉或取消按钮的回调",
        "type": "function(e)",
        "default": "无",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "点击确定回调",
        "type": "function(e)",
        "default": "无",
        "version": ""
      }
    },
    "PageHeader": {
      "title": {
        "property": "title",
        "description": "自定义标题文字",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "subTitle": {
        "property": "subTitle",
        "description": "自定义的二级标题文字",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "ghost": {
        "property": "ghost",
        "description": "pageHeader 的类型，将会改变背景颜色",
        "type": "boolean",
        "default": "true",
        "version": "3.24.0"
      },
      "avatar": {
        "property": "avatar",
        "description": "标题栏旁的头像",
        "type": "[avatar props](/components/avatar/)",
        "default": "-",
        "version": "3.22.0"
      },
      "backIcon": {
        "property": "backIcon",
        "description": "自定义 back icon ，如果为 false 不渲染 back icon",
        "type": "ReactNode",
        "default": "`<Icon type=\"arrow-left\" />`",
        "version": "3.14.0"
      },
      "tags": {
        "property": "tags",
        "description": "title 旁的 tag 列表",
        "type": "[Tag](https://ant.design/components/tag-cn/)\\[] \\| [Tag](https://ant.design/components/tag-cn/)",
        "default": "-",
        "version": "3.14.0"
      },
      "extra": {
        "property": "extra",
        "description": "操作区，位于 title 行的行尾",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "breadcrumb": {
        "property": "breadcrumb",
        "description": "面包屑的配置",
        "type": "[breadcrumb](https://ant.design/components/breadcrumb-cn/)",
        "default": "-",
        "version": "3.14.0"
      },
      "footer": {
        "property": "footer",
        "description": "PageHeader 的页脚，一般用于渲染 TabBar",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "onBack": {
        "property": "onBack",
        "description": "返回按钮的点击事件",
        "type": "`()=>void`",
        "default": "`()=>history.back()`",
        "version": "3.14.0"
      }
    },
    "Popconfirm": {
      "cancelText": {
        "property": "cancelText",
        "description": "取消按钮文字",
        "type": "string",
        "default": "取消",
        "version": ""
      },
      "okText": {
        "property": "okText",
        "description": "确认按钮文字",
        "type": "string",
        "default": "确定",
        "version": ""
      },
      "okType": {
        "property": "okType",
        "description": "确认按钮类型",
        "type": "string",
        "default": "primary",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "确认框的描述",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      },
      "onCancel": {
        "property": "onCancel",
        "description": "点击取消的回调",
        "type": "function(e)",
        "default": "无",
        "version": ""
      },
      "onConfirm": {
        "property": "onConfirm",
        "description": "点击确认的回调",
        "type": "function(e)",
        "default": "无",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "自定义弹出气泡 Icon 图标",
        "type": "ReactNode",
        "default": "&lt;Icon type=\"exclamation-circle\" />",
        "version": "3.8.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "点击 Popconfirm 子元素是否弹出气泡确认框",
        "type": "boolean",
        "default": "false",
        "version": "3.19.8"
      }
    },
    "Pagination": {
      "current": {
        "property": "current",
        "description": "当前页数",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "defaultCurrent": {
        "property": "defaultCurrent",
        "description": "默认的当前页数",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "defaultPageSize": {
        "property": "defaultPageSize",
        "description": "默认的每页条数",
        "type": "number",
        "default": "10",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用分页",
        "type": "boolean",
        "default": "-",
        "version": "3.18.0"
      },
      "hideOnSinglePage": {
        "property": "hideOnSinglePage",
        "description": "只有一页时是否隐藏分页器",
        "type": "boolean",
        "default": "false",
        "version": "3.1.0"
      },
      "itemRender": {
        "property": "itemRender",
        "description": "用于自定义页码的结构，可用于优化 SEO",
        "type": "(page, type: 'page' \\| 'prev' \\| 'next', originalElement) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "pageSize": {
        "property": "pageSize",
        "description": "每页条数",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "pageSizeOptions": {
        "property": "pageSizeOptions",
        "description": "指定每页可以显示多少条",
        "type": "string\\[]",
        "default": "\\['10', '20', '30', '40']",
        "version": ""
      },
      "showLessItems": {
        "property": "showLessItems",
        "description": "show less page items",
        "type": "boolean",
        "default": "false",
        "version": "3.16.3"
      },
      "showQuickJumper": {
        "property": "showQuickJumper",
        "description": "是否可以快速跳转至某页",
        "type": "boolean \\| `{ goButton: ReactNode }`",
        "default": "false",
        "version": ""
      },
      "showSizeChanger": {
        "property": "showSizeChanger",
        "description": "是否可以改变 pageSize",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showTotal": {
        "property": "showTotal",
        "description": "用于显示数据总量和当前数据顺序",
        "type": "Function(total, range)",
        "default": "-",
        "version": ""
      },
      "simple": {
        "property": "simple",
        "description": "当添加该属性时，显示为简单分页",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "当为「small」时，是小尺寸分页",
        "type": "string",
        "default": "\"\"",
        "version": ""
      },
      "total": {
        "property": "total",
        "description": "数据总数",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "页码改变的回调，参数是改变后的页码及每页条数",
        "type": "Function(page, pageSize)",
        "default": "noop",
        "version": ""
      },
      "onShowSizeChange": {
        "property": "onShowSizeChange",
        "description": "pageSize 变化的回调",
        "type": "Function(current, size)",
        "default": "noop",
        "version": ""
      }
    },
    "Progress": {
      "type": {
        "property": "type",
        "description": "类型，可选 `line` `circle` `dashboard`",
        "type": "string",
        "default": "`line`",
        "version": ""
      },
      "format": {
        "property": "format",
        "description": "内容的模板函数",
        "type": "function(percent, successPercent)",
        "default": "`percent => percent + '%'`",
        "version": ""
      },
      "percent": {
        "property": "percent",
        "description": "百分比",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "showInfo": {
        "property": "showInfo",
        "description": "是否显示进度数值或状态图标",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "状态，可选：`success` `exception` `normal` `active`(仅限 line)",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "strokeLinecap": {
        "property": "strokeLinecap",
        "description": "",
        "type": "Enum{ 'round', 'square' }",
        "default": "`round`",
        "version": "3.8.0"
      },
      "strokeColor": {
        "property": "strokeColor",
        "description": "进度条的色彩",
        "type": "string",
        "default": "-",
        "version": "3.7.0"
      },
      "successPercent": {
        "property": "successPercent",
        "description": "已完成的分段百分比",
        "type": "number",
        "default": "0",
        "version": "3.2.0"
      }
    },
    "Popover": {
      "content": {
        "property": "content",
        "description": "卡片内容",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "卡片标题",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      }
    },
    "Radio": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "指定当前是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "初始是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "根据 value 进行比较，判断是否选中",
        "type": "any",
        "default": "-",
        "version": ""
      }
    },
    "Radio.Group": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认选中的值",
        "type": "any",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁选所有子单选器",
        "type": "boolean",
        "default": "false",
        "version": "3.6.5"
      },
      "name": {
        "property": "name",
        "description": "RadioGroup 下所有 `input[type=\"radio\"]` 的 `name` 属性",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "以配置形式设置子元素",
        "type": "string\\[] \\| Array&lt;{ label: string value: string disabled?: boolean }>",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "大小，只对按钮样式生效",
        "type": "`large` \\| `default` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "用于设置当前选中的值",
        "type": "any",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选项变化时的回调函数",
        "type": "Function(e:Event)",
        "default": "-",
        "version": ""
      },
      "buttonStyle": {
        "property": "buttonStyle",
        "description": "RadioButton 的风格样式，目前有描边和填色两种风格",
        "type": "`outline` \\| `solid`",
        "default": "`outline`",
        "version": "3.7.0"
      }
    },
    "Rate": {
      "allowClear": {
        "property": "allowClear",
        "description": "是否允许再次点击后清除",
        "type": "boolean",
        "default": "true",
        "version": "3.1.0"
      },
      "allowHalf": {
        "property": "allowHalf",
        "description": "是否允许半选",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "character": {
        "property": "character",
        "description": "自定义字符",
        "type": "ReactNode",
        "default": "`<Icon type=\"star\" />`",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "自定义样式类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "count": {
        "property": "count",
        "description": "star 总数",
        "type": "number",
        "default": "5",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认值",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "只读，无法进行交互",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "自定义样式对象",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "tooltips": {
        "property": "tooltips",
        "description": "自定义每项的提示信息",
        "type": "string\\[]",
        "default": "-",
        "version": "3.12.0"
      },
      "value": {
        "property": "value",
        "description": "当前数，受控值",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时的回调",
        "type": "Function()",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选择时的回调",
        "type": "Function(value: number)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获取焦点时的回调",
        "type": "Function()",
        "default": "-",
        "version": ""
      },
      "onHoverChange": {
        "property": "onHoverChange",
        "description": "鼠标经过时数值变化的回调",
        "type": "Function(value: number)",
        "default": "-",
        "version": ""
      },
      "onKeyDown": {
        "property": "onKeyDown",
        "description": "按键回调",
        "type": "Function(event)",
        "default": "-",
        "version": ""
      }
    },
    "Result": {
      "title": {
        "property": "title",
        "description": "title 文字",
        "type": "ReactNode",
        "default": "-",
        "version": "3.20.0"
      },
      "subTitle": {
        "property": "subTitle",
        "description": "subTitle 文字",
        "type": "ReactNode",
        "default": "-",
        "version": "3.20.0"
      },
      "status": {
        "property": "status",
        "description": "结果的状态,决定图标和颜色",
        "type": "\\`'success'",
        "default": "'error'",
        "version": "'info'"
      },
      "icon": {
        "property": "icon",
        "description": "自定义 icon",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.20.0"
      },
      "extra": {
        "property": "extra",
        "description": "操作区",
        "type": "ReactNode",
        "default": "-",
        "version": "3.20.0"
      }
    },
    "Select": {
      "allowClear": {
        "property": "allowClear",
        "description": "支持清除",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoClearSearchValue": {
        "property": "autoClearSearchValue",
        "description": "是否在选中项后清空搜索框，只在 `mode` 为 `multiple` 或 `tags` 时有效。",
        "type": "boolean",
        "default": "true",
        "version": "3.10.0"
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "默认获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultActiveFirstOption": {
        "property": "defaultActiveFirstOption",
        "description": "是否默认高亮第一个选项。",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "指定默认选中的条目",
        "type": "string\\|string\\[]\\\\<br />number\\|number\\[]\\\\<br />LabeledValue\\|LabeledValue\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dropdownClassName": {
        "property": "dropdownClassName",
        "description": "下拉菜单的 className 属性",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "dropdownMatchSelectWidth": {
        "property": "dropdownMatchSelectWidth",
        "description": "下拉菜单和选择器同宽",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "自定义下拉框内容",
        "type": "(menuNode: ReactNode, props) => ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "dropdownStyle": {
        "property": "dropdownStyle",
        "description": "下拉菜单的 style 属性",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "dropdownMenuStyle": {
        "property": "dropdownMenuStyle",
        "description": "dropdown 菜单自定义样式",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 `true`，反之则返回 `false`。",
        "type": "boolean or function(inputValue, option)",
        "default": "true",
        "version": ""
      },
      "firstActiveValue": {
        "property": "firstActiveValue",
        "description": "默认高亮的选项",
        "type": "string\\|string\\[]",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0)",
        "type": "Function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "labelInValue": {
        "property": "labelInValue",
        "description": "是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 `string` 变为 `{key: string, label: ReactNode}` 的格式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "最多显示多少个 tag",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "maxTagTextLength": {
        "property": "maxTagTextLength",
        "description": "最大显示的 tag 文本长度",
        "type": "number",
        "default": "-",
        "version": "3.18.0"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "隐藏 tag 时显示的内容",
        "type": "ReactNode/function(omittedValues)",
        "default": "-",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "设置 Select 的模式为多选或标签",
        "type": "'multiple' \\| 'tags'",
        "default": "-",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "当下拉列表为空时显示的内容",
        "type": "string",
        "default": "'Not Found'",
        "version": ""
      },
      "optionFilterProp": {
        "property": "optionFilterProp",
        "description": "搜索时过滤对应的 option 属性，如设置为 children 表示对内嵌内容进行搜索。[示例](https://codesandbox.io/s/antd-reproduction-template-tk678)",
        "type": "string",
        "default": "value",
        "version": ""
      },
      "optionLabelProp": {
        "property": "optionLabelProp",
        "description": "回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。",
        "type": "string",
        "default": "`children` （combobox 模式下为 `value`）",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "选择框默认文字",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "是否显示下拉小箭头",
        "type": "boolean",
        "default": "true",
        "version": "3.2.1"
      },
      "showSearch": {
        "property": "showSearch",
        "description": "使单选模式可搜索",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "选择框大小，可选 `large` `small`",
        "type": "string",
        "default": "default",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "自定义的选择框后缀图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "removeIcon": {
        "property": "removeIcon",
        "description": "自定义的多选框清除图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "自定义的多选框清空图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "menuItemSelectedIcon": {
        "property": "menuItemSelectedIcon",
        "description": "自定义多选时当前选中的条目图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "tokenSeparators": {
        "property": "tokenSeparators",
        "description": "在 tags 和 multiple 模式下自动分词的分隔符",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "指定当前选中的条目",
        "type": "string\\|string\\[]\\\\<br />number\\|number\\[]\\\\<br />LabeledValue\\|LabeledValue\\[]",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选中 option，或 input 的 value 变化（combobox 模式下）时，调用此函数",
        "type": "function(value, option:Option/Array&lt;Option>)",
        "default": "-",
        "version": ""
      },
      "onDeselect": {
        "property": "onDeselect",
        "description": "取消选中时调用，参数为选中项的 value (或 key) 值，仅在 multiple 或 tags 模式下生效",
        "type": "function(string\\|number\\|LabeledValue)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获得焦点时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onInputKeyDown": {
        "property": "onInputKeyDown",
        "description": "按键按下时回调",
        "type": "function",
        "default": "-",
        "version": "3.1.0"
      },
      "onMouseEnter": {
        "property": "onMouseEnter",
        "description": "鼠标移入时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onMouseLeave": {
        "property": "onMouseLeave",
        "description": "鼠标移出时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onPopupScroll": {
        "property": "onPopupScroll",
        "description": "下拉列表滚动时的回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "文本框值变化时回调",
        "type": "function(value: string)",
        "default": "",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "被选中时调用，参数为选中项的 value (或 key) 值",
        "type": "function(string\\|number\\|LabeledValue, option:Option)",
        "default": "-",
        "version": ""
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "是否默认展开下拉菜单",
        "type": "boolean",
        "default": "-",
        "version": "3.9.3"
      },
      "open": {
        "property": "open",
        "description": "是否展开下拉菜单",
        "type": "boolean",
        "default": "-",
        "version": "3.9.0"
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "展开下拉菜单的回调 (3.9.0 后支持)",
        "type": "function(open)",
        "default": "-",
        "version": "3.9.0"
      },
      "loading": {
        "property": "loading",
        "description": "加载中状态",
        "type": "Boolean",
        "default": "false",
        "version": "3.11.0"
      }
    },
    "Select.Option": {
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "和 value 含义一致。如果 React 需要你设置此项，此项值与 value 的值相同，然后可以省略 value 设置",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "选中该 Option 后，Select 的 title",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "默认根据此属性值进行筛选",
        "type": "string\\|number",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "Option 器类名",
        "type": "string",
        "default": "-",
        "version": "3.10.1"
      }
    },
    "Skeleton": {
      "active": {
        "property": "active",
        "description": "是否展示动画效果",
        "type": "boolean",
        "default": "false",
        "version": "3.9.0"
      },
      "avatar": {
        "property": "avatar",
        "description": "是否显示头像占位图",
        "type": "boolean \\| [SkeletonAvatarProps](#SkeletonAvatarProps)",
        "default": "false",
        "version": "3.9.0"
      },
      "loading": {
        "property": "loading",
        "description": "为 `true` 时，显示占位图。反之则直接展示子组件",
        "type": "boolean",
        "default": "-",
        "version": "3.9.0"
      },
      "paragraph": {
        "property": "paragraph",
        "description": "是否显示段落占位图",
        "type": "boolean \\| [SkeletonParagraphProps](#SkeletonParagraphProps)",
        "default": "true",
        "version": "3.9.0"
      },
      "title": {
        "property": "title",
        "description": "是否显示标题占位图",
        "type": "boolean \\| [SkeletonTitleProps](#SkeletonTitleProps)",
        "default": "true",
        "version": "3.9.0"
      }
    },
    "Select.OptGroup": {
      "key": {
        "property": "key",
        "description": "",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "label": {
        "property": "label",
        "description": "组名",
        "type": "string\\|React.Element",
        "default": "无",
        "version": ""
      }
    },
    "Slider": {
      "allowClear": {
        "property": "allowClear",
        "description": "支持清除, 单选模式有效",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "设置初始取值。当 `range` 为 `false` 时，使用 `number`，否则用 `[number, number]`",
        "type": "number\\|number\\[]",
        "default": "0 or \\[0, 0]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "值为 `true` 时，滑块为禁用状态",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dots": {
        "property": "dots",
        "description": "是否只能拖拽到刻度上",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "included": {
        "property": "included",
        "description": "`marks` 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "marks": {
        "property": "marks",
        "description": "刻度标记，key 的类型必须为 `number` 且取值在闭区间 \\[min, max] 内，每个标签可以单独设置样式",
        "type": "object",
        "default": "{ number: string\\|ReactNode } or { number: { style: object, label: string\\|ReactNode } }",
        "version": ""
      },
      "max": {
        "property": "max",
        "description": "最大值",
        "type": "number",
        "default": "100",
        "version": ""
      },
      "min": {
        "property": "min",
        "description": "最小值",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "range": {
        "property": "range",
        "description": "双滑块模式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "reverse": {
        "property": "reverse",
        "description": "反向坐标轴",
        "type": "boolean",
        "default": "false",
        "version": "3.24.0"
      },
      "step": {
        "property": "step",
        "description": "步长，取值必须大于 0，并且可被 (max - min) 整除。当 `marks` 不为空对象时，可以设置 `step` 为 `null`，此时 Slider 的可选值仅有 marks 标出来的部分。",
        "type": "number\\|null",
        "default": "1",
        "version": ""
      },
      "tipFormatter": {
        "property": "tipFormatter",
        "description": "Slider 会把当前值传给 `tipFormatter`，并在 Tooltip 中显示 `tipFormatter` 的返回值，若为 null，则隐藏 Tooltip。",
        "type": "Function\\|null",
        "default": "IDENTITY",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "设置当前取值。当 `range` 为 `false` 时，使用 `number`，否则用 `[number, number]`",
        "type": "number\\|number\\[]",
        "default": "",
        "version": ""
      },
      "vertical": {
        "property": "vertical",
        "description": "值为 `true` 时，Slider 为垂直方向",
        "type": "Boolean",
        "default": "false",
        "version": ""
      },
      "onAfterChange": {
        "property": "onAfterChange",
        "description": "与 `onmouseup` 触发时机一致，把当前值作为参数传入。",
        "type": "Function(value)",
        "default": "NOOP",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入。",
        "type": "Function(value)",
        "default": "NOOP",
        "version": ""
      },
      "tooltipPlacement": {
        "property": "tooltipPlacement",
        "description": "设置 Tooltip 展示位置。参考 [`Tooltip`](/components/tooltip/)。",
        "type": "string",
        "default": "",
        "version": "3.19.0"
      },
      "tooltipVisible": {
        "property": "tooltipVisible",
        "description": "值为`true`时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时。",
        "type": "Boolean",
        "default": "",
        "version": "3.11.0"
      },
      "getTooltipPopupContainer": {
        "property": "getTooltipPopupContainer",
        "description": "Tooltip 渲染父节点，默认渲染到 body 上。",
        "type": "Function",
        "default": "() => document.body",
        "version": "3.19.0"
      }
    },
    "Spin": {
      "delay": {
        "property": "delay",
        "description": "延迟显示加载效果的时间（防止闪烁）",
        "type": "number (毫秒)",
        "default": "-",
        "version": ""
      },
      "indicator": {
        "property": "indicator",
        "description": "加载指示符",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "组件大小，可选值为 `small` `default` `large`",
        "type": "string",
        "default": "'default'",
        "version": ""
      },
      "spinning": {
        "property": "spinning",
        "description": "是否为加载中状态",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "tip": {
        "property": "tip",
        "description": "当作为包裹元素时，可以自定义描述文案",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "wrapperClassName": {
        "property": "wrapperClassName",
        "description": "包装器的类属性",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Statistic": {
      "decimalSeparator": {
        "property": "decimalSeparator",
        "description": "设置小数点",
        "type": "string",
        "default": ".",
        "version": "3.13.0"
      },
      "formatter": {
        "property": "formatter",
        "description": "自定义数值展示",
        "type": "(value) => ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "groupSeparator": {
        "property": "groupSeparator",
        "description": "设置千分位标识符",
        "type": "string",
        "default": ",",
        "version": "3.13.0"
      },
      "precision": {
        "property": "precision",
        "description": "数值精度",
        "type": "number",
        "default": "-",
        "version": "3.13.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "设置数值的前缀",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "suffix": {
        "property": "suffix",
        "description": "设置数值的后缀",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "title": {
        "property": "title",
        "description": "数值的标题",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "value": {
        "property": "value",
        "description": "数值内容",
        "type": "string \\| number",
        "default": "-",
        "version": "3.13.0"
      },
      "valueStyle": {
        "property": "valueStyle",
        "description": "设置数值的样式",
        "type": "style",
        "default": "-",
        "version": "3.13.0"
      }
    },
    "Statistic.Countdown": {
      "format": {
        "property": "format",
        "description": "格式化倒计时展示，参考 [moment](http://momentjs.com/)",
        "type": "string",
        "default": "'HH:mm:ss'",
        "version": "3.13.0"
      },
      "onFinish": {
        "property": "onFinish",
        "description": "倒计时完成时触发",
        "type": "() => void",
        "default": "-",
        "version": "3.14.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "设置数值的前缀",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "suffix": {
        "property": "suffix",
        "description": "设置数值的后缀",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "title": {
        "property": "title",
        "description": "数值的标题",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "value": {
        "property": "value",
        "description": "数值内容",
        "type": "number \\| moment",
        "default": "-",
        "version": "3.13.0"
      },
      "valueStyle": {
        "property": "valueStyle",
        "description": "设置数值的样式",
        "type": "style",
        "default": "-",
        "version": "3.13.0"
      }
    },
    "Steps": {
      "className": {
        "property": "className",
        "description": "步骤条类名",
        "type": "string",
        "default": "-",
        "version": "3.11.3"
      },
      "type": {
        "property": "type",
        "description": "步骤条类型，有 `default` 和 `navigation` 两种",
        "type": "string",
        "default": "`default`",
        "version": "3.22.0"
      },
      "current": {
        "property": "current",
        "description": "指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "direction": {
        "property": "direction",
        "description": "指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向",
        "type": "string",
        "default": "horizontal",
        "version": ""
      },
      "labelPlacement": {
        "property": "labelPlacement",
        "description": "指定标签放置位置，默认水平放图标右侧，可选 `vertical` 放图标下方",
        "type": "string",
        "default": "`horizontal`",
        "version": "3.7.3"
      },
      "progressDot": {
        "property": "progressDot",
        "description": "点状步骤条，可以设置为一个 function，labelPlacement 将强制为 `vertical`",
        "type": "Boolean or (iconDot, {index, status, title, description}) => ReactNode",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "指定大小，目前支持普通（`default`）和迷你（`small`）",
        "type": "string",
        "default": "default",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "指定当前步骤的状态，可选 `wait` `process` `finish` `error`",
        "type": "string",
        "default": "process",
        "version": ""
      },
      "initial": {
        "property": "initial",
        "description": "起始序号，从 0 开始记数",
        "type": "number",
        "default": "0",
        "version": "3.9.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "点击切换步骤时触发",
        "type": "(current) => void",
        "default": "-",
        "version": "3.19.0"
      }
    },
    "Steps.Step": {
      "description": {
        "property": "description",
        "description": "步骤的详情描述，可选",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "步骤图标的类型，可选",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。可选：`wait` `process` `finish` `error`",
        "type": "string",
        "default": "wait",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "标题",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "subTitle": {
        "property": "subTitle",
        "description": "子标题",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.22.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用点击",
        "type": "boolean",
        "default": "false",
        "version": "3.22.0"
      }
    },
    "Switch": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "组件自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": "3.2.2"
      },
      "checked": {
        "property": "checked",
        "description": "指定当前是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkedChildren": {
        "property": "checkedChildren",
        "description": "选中时的内容",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "初始是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": "3.2.2"
      },
      "loading": {
        "property": "loading",
        "description": "加载中的开关",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "开关大小，可选值：`default` `small`",
        "type": "string",
        "default": "default",
        "version": ""
      },
      "unCheckedChildren": {
        "property": "unCheckedChildren",
        "description": "非选中时的内容",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "变化时回调函数",
        "type": "Function(checked: boolean, event: Event)",
        "default": "",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击时回调函数",
        "type": "Function(checked: boolean, event: Event)",
        "default": "",
        "version": "3.13.0"
      },
      "className": {
        "property": "className",
        "description": "Switch 器类名",
        "type": "string",
        "default": "-",
        "version": "3.10.1"
      }
    },
    "Table": {
      "tableLayout": {
        "property": "tableLayout",
        "description": "表格元素的 [table-layout](https://developer.mozilla.org/zh-CN/docs/Web/CSS/table-layout) 属性，设为 `fixed` 表示内容不会影响列的布局",
        "type": "- \\| 'auto' \\| 'fixed'",
        "default": "无<hr />固定表头/列或使用了 `column.ellipsis` 时，默认值为 `fixed`",
        "version": "3.24.0"
      },
      "bordered": {
        "property": "bordered",
        "description": "是否展示外边框和列边框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "childrenColumnName": {
        "property": "childrenColumnName",
        "description": "指定树形结构的列名",
        "type": "string\\[]",
        "default": "children",
        "version": "3.4.2"
      },
      "columns": {
        "property": "columns",
        "description": "表格列的配置描述，具体项见下表",
        "type": "[ColumnProps](https://git.io/JeKZW)\\[]",
        "default": "-",
        "version": ""
      },
      "components": {
        "property": "components",
        "description": "覆盖默认的 table 元素",
        "type": "[TableComponents](https://git.io/fANxz)",
        "default": "-",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "数据数组",
        "type": "any\\[]",
        "default": "",
        "version": ""
      },
      "defaultExpandAllRows": {
        "property": "defaultExpandAllRows",
        "description": "初始时，是否展开所有行",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultExpandedRowKeys": {
        "property": "defaultExpandedRowKeys",
        "description": "默认展开的行",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "expandedRowKeys": {
        "property": "expandedRowKeys",
        "description": "展开的行，控制属性",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "expandedRowRender": {
        "property": "expandedRowRender",
        "description": "额外的展开行",
        "type": "Function(record, index, indent, expanded):ReactNode",
        "default": "-",
        "version": ""
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "自定义展开图标，参考[示例](http://react-component.github.io/table/examples/expandIcon.html)",
        "type": "Function(props):ReactNode",
        "default": "-",
        "version": "3.11.3"
      },
      "expandRowByClick": {
        "property": "expandRowByClick",
        "description": "通过点击行来展开子行",
        "type": "boolean",
        "default": "`false`",
        "version": "3.0.1"
      },
      "expandIconColumnIndex": {
        "property": "expandIconColumnIndex",
        "description": "展开的图标显示在哪一列，如果没有 `rowSelection`，默认显示在第一列，否则显示在选择框后面",
        "type": "`number`",
        "default": "",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "表格尾部",
        "type": "Function(currentPageData)",
        "default": "",
        "version": ""
      },
      "indentSize": {
        "property": "indentSize",
        "description": "展示树形数据时，每层缩进的宽度，以 px 为单位",
        "type": "number",
        "default": "15",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "页面是否加载中",
        "type": "boolean\\|[object](https://ant.design/components/spin-cn/#API) ([更多](https://github.com/ant-design/ant-design/issues/4544#issuecomment-271533135))",
        "default": "false",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "默认文案设置，目前包括排序、过滤、空数据文案",
        "type": "object",
        "default": "filterConfirm: '确定' <br> filterReset: '重置' <br> emptyText: '暂无数据' <br> [默认值](https://github.com/ant-design/ant-design/issues/575#issuecomment-159169511)",
        "version": ""
      },
      "pagination": {
        "property": "pagination",
        "description": "分页器，参考[配置项](#pagination)或 [pagination](/components/pagination/) 文档，设为 false 时不展示和进行分页",
        "type": "object",
        "default": "",
        "version": ""
      },
      "rowClassName": {
        "property": "rowClassName",
        "description": "表格行的类名",
        "type": "Function(record, index):string",
        "default": "-",
        "version": ""
      },
      "rowKey": {
        "property": "rowKey",
        "description": "表格行 key 的取值，可以是字符串或一个函数",
        "type": "string\\|Function(record):string",
        "default": "'key'",
        "version": ""
      },
      "rowSelection": {
        "property": "rowSelection",
        "description": "表格行是否可选择，[配置项](#rowSelection)",
        "type": "object",
        "default": "null",
        "version": ""
      },
      "scroll": {
        "property": "scroll",
        "description": "表格是否可滚动，[配置项](#scroll)",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "showHeader": {
        "property": "showHeader",
        "description": "是否显示表头",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "表格大小",
        "type": "default \\| middle \\| small",
        "default": "default",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "表格标题",
        "type": "Function(currentPageData)",
        "default": "",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "分页、排序、筛选变化时触发",
        "type": "Function(pagination, filters, sorter, extra: { currentDataSource: \\[] })",
        "default": "",
        "version": ""
      },
      "onExpand": {
        "property": "onExpand",
        "description": "点击展开图标时触发",
        "type": "Function(expanded, record)",
        "default": "",
        "version": ""
      },
      "onExpandedRowsChange": {
        "property": "onExpandedRowsChange",
        "description": "展开的行变化时触发",
        "type": "Function(expandedRows)",
        "default": "",
        "version": ""
      },
      "onHeaderRow": {
        "property": "onHeaderRow",
        "description": "设置头部行属性",
        "type": "Function(column, index)",
        "default": "-",
        "version": ""
      },
      "onRow": {
        "property": "onRow",
        "description": "设置行属性",
        "type": "Function(record, index)",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "设置表格内各类浮层的渲染节点，如筛选菜单",
        "type": "(triggerNode) => HTMLElement",
        "default": "`() => TableHtmlElement`",
        "version": "3.21.0"
      }
    },
    "Table.Column": {
      "align": {
        "property": "align",
        "description": "设置列的对齐方式",
        "type": "'left' \\| 'right' \\| 'center'",
        "default": "'left'",
        "version": "3.3.2"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "超过宽度将自动省略，暂不支持和排序筛选一起使用。<br />设置为 `true` 时，表格布局将变成 `tableLayout=\"fixed\"`。",
        "type": "boolean",
        "default": "false",
        "version": "3.24.0"
      },
      "className": {
        "property": "className",
        "description": "列样式类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "colSpan": {
        "property": "colSpan",
        "description": "表头列合并,设置为 0 时，不渲染",
        "type": "number",
        "default": "",
        "version": ""
      },
      "dataIndex": {
        "property": "dataIndex",
        "description": "列数据在数据项中对应的 key，支持 `a.b.c`、`a[0].b.c[1]` 的嵌套写法",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "defaultFilteredValue": {
        "property": "defaultFilteredValue",
        "description": "默认筛选值",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "defaultSortOrder": {
        "property": "defaultSortOrder",
        "description": "默认排序顺序",
        "type": "'ascend' \\| 'descend'",
        "default": "-",
        "version": "3.9.3"
      },
      "filterDropdown": {
        "property": "filterDropdown",
        "description": "可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互",
        "type": "React.ReactNode \\| (props: [FilterDropdownProps](https://git.io/fjP5h)) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "filterDropdownVisible": {
        "property": "filterDropdownVisible",
        "description": "用于控制自定义筛选菜单是否可见",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "filtered": {
        "property": "filtered",
        "description": "标识数据是否经过过滤，筛选图标会高亮",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "filteredValue": {
        "property": "filteredValue",
        "description": "筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "filterIcon": {
        "property": "filterIcon",
        "description": "自定义 filter 图标。",
        "type": "ReactNode\\|(filtered: boolean) => ReactNode",
        "default": "false",
        "version": ""
      },
      "filterMultiple": {
        "property": "filterMultiple",
        "description": "是否多选",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "filters": {
        "property": "filters",
        "description": "表头的筛选菜单项",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "fixed": {
        "property": "fixed",
        "description": "列是否固定，可选 `true`(等效于 left) `'left'` `'right'`",
        "type": "boolean\\|string",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "React 需要的 key，如果已经设置了唯一的 `dataIndex`，可以忽略这个属性",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "render": {
        "property": "render",
        "description": "生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，@return 里面可以设置表格[行/列合并](#components-table-demo-colspan-rowspan)",
        "type": "Function(text, record, index) {}",
        "default": "-",
        "version": ""
      },
      "sorter": {
        "property": "sorter",
        "description": "排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)，需要服务端排序可设为 true",
        "type": "Function\\|boolean",
        "default": "-",
        "version": ""
      },
      "sortOrder": {
        "property": "sortOrder",
        "description": "排序的受控属性，外界可用此控制列的排序，可设置为 `'ascend'` `'descend'` `false`",
        "type": "boolean\\|string",
        "default": "-",
        "version": ""
      },
      "sortDirections": {
        "property": "sortDirections",
        "description": "支持的排序方式，取值为 `'ascend'` `'descend'`",
        "type": "Array",
        "default": "`['ascend', 'descend']`",
        "version": "3.15.2"
      },
      "title": {
        "property": "title",
        "description": "列头显示文字（函数用法 `3.10.0` 后支持）",
        "type": "ReactNode\\|({ sortOrder, sortColumn, filters }) => ReactNode",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "列宽度（[指定了也不生效？](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241)）",
        "type": "string\\|number",
        "default": "-",
        "version": ""
      },
      "onCell": {
        "property": "onCell",
        "description": "设置单元格属性",
        "type": "Function(record, rowIndex)",
        "default": "-",
        "version": ""
      },
      "onFilter": {
        "property": "onFilter",
        "description": "本地模式下，确定筛选的运行函数",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "onFilterDropdownVisibleChange": {
        "property": "onFilterDropdownVisibleChange",
        "description": "自定义筛选菜单可见变化时调用",
        "type": "function(visible) {}",
        "default": "-",
        "version": ""
      },
      "onHeaderCell": {
        "property": "onHeaderCell",
        "description": "设置头部单元格属性",
        "type": "Function(column)",
        "default": "-",
        "version": ""
      }
    },
    "Table.ColumnGroup": {
      "title": {
        "property": "title",
        "description": "列头显示文字",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Tabs": {
      "activeKey": {
        "property": "activeKey",
        "description": "当前激活 tab 面板的 key",
        "type": "string",
        "default": "无",
        "version": ""
      },
      "animated": {
        "property": "animated",
        "description": "是否使用动画切换 Tabs，在 \\`tabPosition=top",
        "type": "bottom\\` 时有效",
        "default": "boolean \\| {inkBar:boolean, tabPane:boolean}",
        "version": "true, 当 type=\"card\" 时为 false"
      },
      "renderTabBar": {
        "property": "renderTabBar",
        "description": "替换 TabBar，用于二次封装标签头",
        "type": "(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement",
        "default": "无",
        "version": "3.9.0"
      },
      "defaultActiveKey": {
        "property": "defaultActiveKey",
        "description": "初始化选中面板的 key，如果没有设置 activeKey",
        "type": "string",
        "default": "第一个面板",
        "version": ""
      },
      "hideAdd": {
        "property": "hideAdd",
        "description": "是否隐藏加号图标，在 `type=\"editable-card\"` 时有效",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "大小，提供 `large` `default` 和 `small` 三种大小",
        "type": "string",
        "default": "'default'",
        "version": ""
      },
      "tabBarExtraContent": {
        "property": "tabBarExtraContent",
        "description": "tab bar 上额外的元素",
        "type": "React.ReactNode",
        "default": "无",
        "version": ""
      },
      "tabBarGutter": {
        "property": "tabBarGutter",
        "description": "tabs 之间的间隙",
        "type": "number",
        "default": "无",
        "version": "3.2.0"
      },
      "tabBarStyle": {
        "property": "tabBarStyle",
        "description": "tab bar 的样式对象",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "tabPosition": {
        "property": "tabPosition",
        "description": "页签位置，可选值有 `top` `right` `bottom` `left`",
        "type": "string",
        "default": "'top'",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "页签的基本样式，可选 `line`、`card` `editable-card` 类型",
        "type": "string",
        "default": "'line'",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "切换面板的回调",
        "type": "Function(activeKey) {}",
        "default": "无",
        "version": ""
      },
      "onEdit": {
        "property": "onEdit",
        "description": "新增和删除页签的回调，在 `type=\"editable-card\"` 时有效",
        "type": "(targetKey, action): void",
        "default": "无",
        "version": ""
      },
      "onNextClick": {
        "property": "onNextClick",
        "description": "next 按钮被点击的回调",
        "type": "Function",
        "default": "无",
        "version": ""
      },
      "onPrevClick": {
        "property": "onPrevClick",
        "description": "prev 按钮被点击的回调",
        "type": "Function",
        "default": "无",
        "version": ""
      },
      "onTabClick": {
        "property": "onTabClick",
        "description": "tab 被点击的回调",
        "type": "Function",
        "default": "无",
        "version": ""
      }
    },
    "Tabs.TabPane": {
      "forceRender": {
        "property": "forceRender",
        "description": "被隐藏时是否渲染 DOM 结构",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "对应 activeKey",
        "type": "string",
        "default": "无",
        "version": ""
      },
      "tab": {
        "property": "tab",
        "description": "选项卡头显示文字",
        "type": "string\\|ReactNode",
        "default": "无",
        "version": ""
      }
    },
    "Tag.CheckableTag": {
      "checked": {
        "property": "checked",
        "description": "设置标签的选中状态",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "点击标签时触发的回调",
        "type": "(checked) => void",
        "default": "-",
        "version": ""
      }
    },
    "TimePicker": {
      "addon": {
        "property": "addon",
        "description": "选择框底部显示自定义的内容",
        "type": "function",
        "default": "无",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "是否展示清除按钮",
        "type": "boolean",
        "default": "true",
        "version": "3.13.0"
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "选择器类名",
        "type": "string",
        "default": "''",
        "version": ""
      },
      "clearText": {
        "property": "clearText",
        "description": "清除按钮的提示文案",
        "type": "string",
        "default": "clear",
        "version": ""
      },
      "defaultOpenValue": {
        "property": "defaultOpenValue",
        "description": "当 defaultValue/value 不存在时，可以设置面板打开时默认选中的值",
        "type": "[moment](http://momentjs.com/)",
        "default": "moment()",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认时间",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用全部操作",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabledHours": {
        "property": "disabledHours",
        "description": "禁止选择部分小时选项",
        "type": "function()",
        "default": "无",
        "version": ""
      },
      "disabledMinutes": {
        "property": "disabledMinutes",
        "description": "禁止选择部分分钟选项",
        "type": "function(selectedHour)",
        "default": "无",
        "version": ""
      },
      "disabledSeconds": {
        "property": "disabledSeconds",
        "description": "禁止选择部分秒选项",
        "type": "function(selectedHour, selectedMinute)",
        "default": "无",
        "version": ""
      },
      "format": {
        "property": "format",
        "description": "展示的时间格式",
        "type": "string",
        "default": "\"HH:mm:ss\"",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "定义浮层的容器，默认为 body 上新建 div",
        "type": "function(trigger)",
        "default": "无",
        "version": ""
      },
      "hideDisabledOptions": {
        "property": "hideDisabledOptions",
        "description": "隐藏禁止选择的选项",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "hourStep": {
        "property": "hourStep",
        "description": "小时选项间隔",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "inputReadOnly": {
        "property": "inputReadOnly",
        "description": "设置输入框为只读（避免在移动设备上打开虚拟键盘）",
        "type": "boolean",
        "default": "false",
        "version": "3.3.0"
      },
      "minuteStep": {
        "property": "minuteStep",
        "description": "分钟选项间隔",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "面板是否打开",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "没有值的时候显示的内容",
        "type": "string",
        "default": "\"请选择时间\"",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "弹出层类名",
        "type": "string",
        "default": "''",
        "version": ""
      },
      "popupStyle": {
        "property": "popupStyle",
        "description": "弹出层样式对象",
        "type": "object",
        "default": "-",
        "version": "3.12.0"
      },
      "secondStep": {
        "property": "secondStep",
        "description": "秒选项间隔",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "自定义的选择框后缀图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "自定义的清除图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "use12Hours": {
        "property": "use12Hours",
        "description": "使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "当前时间",
        "type": "[moment](http://momentjs.com/)",
        "default": "无",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "时间发生变化的回调",
        "type": "function(time: moment, timeString: string): void",
        "default": "无",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "面板打开/关闭时的回调",
        "type": "(open: boolean): void",
        "default": "无",
        "version": ""
      }
    },
    "Tag": {
      "afterClose": {
        "property": "afterClose",
        "description": "关闭动画完成后的回调，请使用 `onClose`, 我们将在下个版本删除此项",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "标签是否可以关闭",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "color": {
        "property": "color",
        "description": "标签色",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onClose": {
        "property": "onClose",
        "description": "关闭时的回调",
        "type": "(e) => void",
        "default": "-",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "是否显示标签",
        "type": "boolean",
        "default": "`true`",
        "version": "3.7.0"
      }
    },
    "Timeline": {
      "pending": {
        "property": "pending",
        "description": "指定最后一个幽灵节点是否存在或内容",
        "type": "boolean\\|string\\|ReactNode",
        "default": "false",
        "version": ""
      },
      "pendingDot": {
        "property": "pendingDot",
        "description": "当最后一个幽灵节点存在時，指定其时间图点",
        "type": "string\\|ReactNode",
        "default": "`<Icon type=\"loading\" />`",
        "version": "3.3.0"
      },
      "reverse": {
        "property": "reverse",
        "description": "节点排序",
        "type": "boolean",
        "default": "false",
        "version": "3.5.0"
      },
      "mode": {
        "property": "mode",
        "description": "通过设置 `mode` 可以改变时间轴和内容的相对位置",
        "type": "`left` \\| `alternate` \\| `right`",
        "default": "-",
        "version": "3.8.0"
      }
    },
    "Timeline.Item": {
      "color": {
        "property": "color",
        "description": "指定圆圈颜色 `blue, red, green, gray`，或自定义的色值",
        "type": "string",
        "default": "blue",
        "version": ""
      },
      "dot": {
        "property": "dot",
        "description": "自定义时间轴点",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "position": {
        "property": "position",
        "description": "自定义节点位置",
        "type": "`left` \\| `right`",
        "default": "-",
        "version": "3.17.0"
      }
    },
    "Tooltip": {
      "title": {
        "property": "title",
        "description": "提示文字",
        "type": "string\\|ReactNode\\|() => ReactNode",
        "default": "无",
        "version": ""
      },
      "arrowPointAtCenter": {
        "property": "arrowPointAtCenter",
        "description": "箭头是否指向目标元素中心，`antd@1.11+` 支持",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "autoAdjustOverflow": {
        "property": "autoAdjustOverflow",
        "description": "气泡被遮挡时自动调整位置",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "defaultVisible": {
        "property": "defaultVisible",
        "description": "默认是否显隐",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "浮层渲染父节点，默认渲染到 body 上",
        "type": "Function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "mouseEnterDelay": {
        "property": "mouseEnterDelay",
        "description": "鼠标移入后延时多少才显示 Tooltip，单位：秒",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "mouseLeaveDelay": {
        "property": "mouseLeaveDelay",
        "description": "鼠标移出后延时多少才隐藏 Tooltip，单位：秒",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "overlayClassName": {
        "property": "overlayClassName",
        "description": "卡片类名",
        "type": "string",
        "default": "无",
        "version": ""
      },
      "overlayStyle": {
        "property": "overlayStyle",
        "description": "卡片样式",
        "type": "object",
        "default": "无",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom`",
        "type": "string",
        "default": "top",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "触发行为，可选 `hover/focus/click/contextMenu`",
        "type": "string",
        "default": "hover",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "用于手动控制浮层显隐",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onVisibleChange": {
        "property": "onVisibleChange",
        "description": "显示隐藏的回调",
        "type": "(visible) => void",
        "default": "无",
        "version": ""
      },
      "align": {
        "property": "align",
        "description": "该值将合并到 placement 的配置中，设置参考 [rc-tooltip](https://github.com/react-component/tooltip)",
        "type": "Object",
        "default": "无",
        "version": "3.10.0"
      }
    },
    "Transfer": {
      "className": {
        "property": "className",
        "description": "自定义类",
        "type": "string",
        "default": "",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "数据源，其中的数据将会被渲染到左边一栏中，`targetKeys` 中指定的除外。",
        "type": "[TransferItem](https://git.io/vMM64)\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": "3.10.0"
      },
      "filterOption": {
        "property": "filterOption",
        "description": "接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 `true`，反之则返回 `false`。",
        "type": "",
        "default": "(inputValue, option): boolean",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "底部渲染函数",
        "type": "(props) => ReactNode",
        "default": "",
        "version": ""
      },
      "lazy": {
        "property": "lazy",
        "description": "Transfer 使用了 [react-lazy-load](https://github.com/loktar00/react-lazy-load) 优化性能，这里可以设置相关参数。设为 `false` 可以关闭懒加载。",
        "type": "object\\|boolean",
        "default": "`{ height: 32, offset: 32 }`",
        "version": ""
      },
      "listStyle": {
        "property": "listStyle",
        "description": "两个穿梭框的自定义样式",
        "type": "object\\|({direction: 'left'\\|'right'}) => object",
        "default": "",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "各种语言",
        "type": "{ itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode; }",
        "default": "`{ itemUnit: '项', itemsUnit: '项', searchPlaceholder: '请输入搜索内容' }`",
        "version": "3.9.0"
      },
      "operations": {
        "property": "operations",
        "description": "操作文案集合，顺序从上至下",
        "type": "string\\[]",
        "default": "\\['>', '&lt;']",
        "version": ""
      },
      "render": {
        "property": "render",
        "description": "每行数据渲染函数，该函数的入参为 `dataSource` 中的项，返回值为 ReactElement。或者返回一个普通对象，其中 `label` 字段为 ReactElement，`value` 字段为 title",
        "type": "(record) => ReactNode",
        "default": "",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "设置哪些项应该被选中",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "是否显示搜索框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showSelectAll": {
        "property": "showSelectAll",
        "description": "是否展示全选勾选框",
        "type": "boolean",
        "default": "true",
        "version": "3.18.0"
      },
      "style": {
        "property": "style",
        "description": "容器的自定义样式",
        "type": "object",
        "default": "",
        "version": "3.6.0"
      },
      "targetKeys": {
        "property": "targetKeys",
        "description": "显示在右侧框数据的 key 集合",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "titles": {
        "property": "titles",
        "description": "标题集合，顺序从左至右",
        "type": "ReactNode\\[]",
        "default": "\\['', '']",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选项在两栏之间转移时的回调函数",
        "type": "(targetKeys, direction, moveKeys): void",
        "default": "",
        "version": ""
      },
      "onScroll": {
        "property": "onScroll",
        "description": "选项列表滚动时的回调函数",
        "type": "(direction, event): void",
        "default": "",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "搜索框内容时改变时的回调函数",
        "type": "(direction: 'left'\\|'right', value: string): void",
        "default": "-",
        "version": "3.11.0"
      },
      "onSelectChange": {
        "property": "onSelectChange",
        "description": "选中项发生改变时的回调函数",
        "type": "(sourceSelectedKeys, targetSelectedKeys): void",
        "default": "",
        "version": ""
      }
    },
    "Tree": {
      "autoExpandParent": {
        "property": "autoExpandParent",
        "description": "是否自动展开父节点",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "blockNode": {
        "property": "blockNode",
        "description": "是否节点占据一行",
        "type": "boolean",
        "default": "false",
        "version": "3.15.0"
      },
      "checkable": {
        "property": "checkable",
        "description": "节点前添加 Checkbox 复选框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkedKeys": {
        "property": "checkedKeys",
        "description": "（受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置`checkable`和`checkStrictly`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联",
        "type": "string\\[] \\| {checked: string\\[], halfChecked: string\\[]}",
        "default": "\\[]",
        "version": ""
      },
      "checkStrictly": {
        "property": "checkStrictly",
        "description": "checkable 状态下节点选择完全受控（父子节点选中状态不再关联）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultCheckedKeys": {
        "property": "defaultCheckedKeys",
        "description": "默认选中复选框的树节点",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "defaultExpandAll": {
        "property": "defaultExpandAll",
        "description": "默认展开所有树节点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultExpandedKeys": {
        "property": "defaultExpandedKeys",
        "description": "默认展开指定的树节点",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "defaultExpandParent": {
        "property": "defaultExpandParent",
        "description": "默认展开父节点",
        "type": "bool",
        "default": "true",
        "version": "3.4.0"
      },
      "defaultSelectedKeys": {
        "property": "defaultSelectedKeys",
        "description": "默认选中的树节点",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "将树禁用",
        "type": "bool",
        "default": "false",
        "version": "3.4.0"
      },
      "draggable": {
        "property": "draggable",
        "description": "设置节点可拖拽（IE>8）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "expandedKeys": {
        "property": "expandedKeys",
        "description": "（受控）展开指定的树节点",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "filterTreeNode": {
        "property": "filterTreeNode",
        "description": "按需筛选树节点（高亮），返回 true",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "异步加载数据",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "loadedKeys": {
        "property": "loadedKeys",
        "description": "（受控）已经加载的节点，需要配合 `loadData` 使用",
        "type": "string\\[]",
        "default": "\\[]",
        "version": "3.7.0"
      },
      "multiple": {
        "property": "multiple",
        "description": "支持点选多个节点（节点本身）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "是否可选中",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "（受控）设置选中的树节点",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "showIcon": {
        "property": "showIcon",
        "description": "是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "switcherIcon": {
        "property": "switcherIcon",
        "description": "自定义树节点的展开/折叠图标",
        "type": "React.ReactElement",
        "default": "-",
        "version": "3.12.0"
      },
      "showLine": {
        "property": "showLine",
        "description": "是否展示连接线",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onCheck": {
        "property": "onCheck",
        "description": "点击复选框触发",
        "type": "function(checkedKeys, e:{checked: bool, checkedNodes, node, event, halfCheckedKeys})",
        "default": "-",
        "version": ""
      },
      "onDragEnd": {
        "property": "onDragEnd",
        "description": "dragend 触发时调用",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragEnter": {
        "property": "onDragEnter",
        "description": "dragenter 触发时调用",
        "type": "function({event, node, expandedKeys})",
        "default": "-",
        "version": ""
      },
      "onDragLeave": {
        "property": "onDragLeave",
        "description": "dragleave 触发时调用",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragOver": {
        "property": "onDragOver",
        "description": "dragover 触发时调用",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragStart": {
        "property": "onDragStart",
        "description": "开始拖拽时调用",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDrop": {
        "property": "onDrop",
        "description": "drop 触发时调用",
        "type": "function({event, node, dragNode, dragNodesKeys})",
        "default": "-",
        "version": ""
      },
      "onExpand": {
        "property": "onExpand",
        "description": "展开/收起节点时触发",
        "type": "function(expandedKeys, {expanded: bool, node})",
        "default": "-",
        "version": ""
      },
      "onLoad": {
        "property": "onLoad",
        "description": "节点加载完毕时触发",
        "type": "function(loadedKeys, {event, node})",
        "default": "-",
        "version": "3.7.0"
      },
      "onRightClick": {
        "property": "onRightClick",
        "description": "响应右键点击",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "点击树节点触发",
        "type": "function(selectedKeys, e:{selected: bool, selectedNodes, node, event})",
        "default": "-",
        "version": ""
      },
      "treeData": {
        "property": "treeData",
        "description": "treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一）",
        "type": "array\\\\&lt;{key, title, children, \\[disabled, selectable]}>",
        "default": "-",
        "version": "3.19.8"
      }
    },
    "Tree.TreeNode": {
      "checkable": {
        "property": "checkable",
        "description": "当树为 checkable 时，设置独立节点是否展示 Checkbox",
        "type": "boolean",
        "default": "-",
        "version": "3.17.0"
      },
      "disableCheckbox": {
        "property": "disableCheckbox",
        "description": "禁掉 checkbox",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁掉响应",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "自定义图标。可接收组件，props 为当前节点 props",
        "type": "ReactNode/Function(props):ReactNode",
        "default": "-",
        "version": "3.4.0"
      },
      "isLeaf": {
        "property": "isLeaf",
        "description": "设置为叶子节点(设置了`loadData`时有效)",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！",
        "type": "string",
        "default": "内部计算出的节点位置",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "设置节点是否可被选中",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "标题",
        "type": "string\\|ReactNode",
        "default": "'---'",
        "version": ""
      }
    },
    "Tree.DirectoryTree": {
      "expandAction": {
        "property": "expandAction",
        "description": "目录展开逻辑，可选 `false` `'click'` `'doubleClick'`",
        "type": "string",
        "default": "click",
        "version": "3.7.0"
      }
    },
    "TreeSelect": {
      "allowClear": {
        "property": "allowClear",
        "description": "显示清除按钮",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoClearSearchValue": {
        "property": "autoClearSearchValue",
        "description": "当多选模式下值被选择，自动清空搜索框",
        "type": "boolean",
        "default": "true",
        "version": "3.7.0"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "指定默认选中的条目",
        "type": "string/string\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dropdownClassName": {
        "property": "dropdownClassName",
        "description": "下拉菜单的 className 属性",
        "type": "string",
        "default": "-",
        "version": "3.3.0"
      },
      "dropdownMatchSelectWidth": {
        "property": "dropdownMatchSelectWidth",
        "description": "下拉菜单和选择器同宽。默认将设置 `min-width`。",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "dropdownStyle": {
        "property": "dropdownStyle",
        "description": "下拉菜单的样式",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "filterTreeNode": {
        "property": "filterTreeNode",
        "description": "是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值",
        "type": "boolean\\|Function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值)",
        "default": "Function",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "Function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "labelInValue": {
        "property": "labelInValue",
        "description": "是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 `{value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string[] }` 的格式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "异步加载数据",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "最多显示多少个 tag",
        "type": "number",
        "default": "-",
        "version": "3.7.0"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "隐藏 tag 时显示的内容",
        "type": "ReactNode/function(omittedValues)",
        "default": "-",
        "version": "3.7.0"
      },
      "multiple": {
        "property": "multiple",
        "description": "支持多选（当设置 treeCheckable 时自动变为 true）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "选择框默认文字",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "searchPlaceholder": {
        "property": "searchPlaceholder",
        "description": "搜索框默认文字",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "searchValue": {
        "property": "searchValue",
        "description": "搜索框的值，可以通过 `onSearch` 获取用户输入",
        "type": "string",
        "default": "-",
        "version": "3.7.0"
      },
      "treeIcon": {
        "property": "treeIcon",
        "description": "是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式",
        "type": "boolean",
        "default": "false",
        "version": "3.13.1"
      },
      "showCheckedStrategy": {
        "property": "showCheckedStrategy",
        "description": "定义选中项回填的方式。`TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点). `TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时). 默认只显示子节点.",
        "type": "enum{TreeSelect.SHOW_ALL, TreeSelect.SHOW_PARENT, TreeSelect.SHOW_CHILD }",
        "default": "TreeSelect.SHOW_CHILD",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "是否支持搜索框",
        "type": "boolean",
        "default": "单选：`false` \\| 多选：`true`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "选择框大小，可选 `large` `small`",
        "type": "string",
        "default": "'default'",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "自定义的选择框后缀图标",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "treeCheckable": {
        "property": "treeCheckable",
        "description": "显示 checkbox",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeCheckStrictly": {
        "property": "treeCheckStrictly",
        "description": "checkable 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 `labelInValue` 强制为 true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeData": {
        "property": "treeData",
        "description": "treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一）",
        "type": "array\\\\&lt;{value, title, children, \\[disabled, disableCheckbox, selectable, checkable]}>",
        "default": "\\[]",
        "version": ""
      },
      "treeDataSimpleMode": {
        "property": "treeDataSimpleMode",
        "description": "使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...], `pId` 是父节点的 id)",
        "type": "false\\|object\\\\&lt;{ id: string, pId: string, rootPId: string }>",
        "default": "false",
        "version": ""
      },
      "treeDefaultExpandAll": {
        "property": "treeDefaultExpandAll",
        "description": "默认展开所有树节点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeDefaultExpandedKeys": {
        "property": "treeDefaultExpandedKeys",
        "description": "默认展开的树节点",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "treeExpandedKeys": {
        "property": "treeExpandedKeys",
        "description": "设置展开的树节点",
        "type": "string\\[]",
        "default": "-",
        "version": "3.10.0"
      },
      "treeNodeFilterProp": {
        "property": "treeNodeFilterProp",
        "description": "输入项过滤对应的 treeNode 属性",
        "type": "string",
        "default": "'value'",
        "version": ""
      },
      "treeNodeLabelProp": {
        "property": "treeNodeLabelProp",
        "description": "作为显示的 prop 设置",
        "type": "string",
        "default": "'title'",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "指定当前选中的条目",
        "type": "string/string\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选中树节点时调用此函数",
        "type": "function(value, label, extra)",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "文本框值变化时回调",
        "type": "function(value: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "被选中时调用",
        "type": "function(value, node, extra)",
        "default": "-",
        "version": ""
      },
      "onTreeExpand": {
        "property": "onTreeExpand",
        "description": "展示节点时调用",
        "type": "function(expandedKeys)",
        "default": "-",
        "version": "3.10.0"
      }
    },
    "TreeSelect.TreeNode": {
      "selectable": {
        "property": "selectable",
        "description": "是否可选",
        "type": "boolean",
        "default": "true",
        "version": "3.9.3"
      },
      "checkable": {
        "property": "checkable",
        "description": "当树为 checkable 时，设置独立节点是否展示 Checkbox",
        "type": "boolean",
        "default": "-",
        "version": "3.17.0"
      },
      "disableCheckbox": {
        "property": "disableCheckbox",
        "description": "禁掉 checkbox",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "isLeaf": {
        "property": "isLeaf",
        "description": "是否是叶子节点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "此项必须设置（其值在整个树范围内唯一）",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "树节点显示的内容",
        "type": "string\\|ReactNode",
        "default": "'---'",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "默认根据此属性值进行筛选（其值在整个树范围内唯一）",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Typography.Text": {
      "copyable": {
        "property": "copyable",
        "description": "是否可拷贝，为对象时可设置复制文本以回调函数",
        "type": "boolean \\| { text: string, onCopy: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "delete": {
        "property": "delete",
        "description": "添加删除线样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用文本",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "editable": {
        "property": "editable",
        "description": "是否可编辑，为对象时可对编辑进行控制",
        "type": "boolean \\| { editing: boolean, onStart: Function, onChange: Function(string) }",
        "default": "false",
        "version": "3.14.0"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "设置自动溢出省略",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "mark": {
        "property": "mark",
        "description": "添加标记样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "code": {
        "property": "code",
        "description": "添加代码样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "underline": {
        "property": "underline",
        "description": "添加下划线样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "strong": {
        "property": "strong",
        "description": "是否加粗",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "type": {
        "property": "type",
        "description": "文本类型",
        "type": "`secondary`, `warning`, `danger`",
        "default": "-",
        "version": "3.14.0"
      }
    },
    "Typography.Title": {
      "copyable": {
        "property": "copyable",
        "description": "是否可拷贝，为对象时可设置复制文本以回调函数",
        "type": "boolean \\| { text: string, onCopy: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "delete": {
        "property": "delete",
        "description": "添加删除线样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用文本",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "editable": {
        "property": "editable",
        "description": "是否可编辑，为对象时可对编辑进行控制",
        "type": "boolean \\| { editing: boolean, onStart: Function, onChange: Function(string) }",
        "default": "false",
        "version": "3.14.0"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "自动溢出省略，为对象时可设置省略行数与是否可展开等",
        "type": "boolean \\| { rows: number, expandable: boolean, onExpand: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "level": {
        "property": "level",
        "description": "重要程度，相当于 `h1`、`h2`、`h3`、`h4`",
        "type": "number: `1`, `2`, `3`, `4`",
        "default": "1",
        "version": "3.14.0"
      },
      "mark": {
        "property": "mark",
        "description": "添加标记样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "underline": {
        "property": "underline",
        "description": "添加下划线样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "当用户提交编辑内容时触发",
        "type": "Function(string)",
        "default": "-",
        "version": "3.14.0"
      },
      "type": {
        "property": "type",
        "description": "文本类型",
        "type": "`secondary`, `warning`, `danger`",
        "default": "-",
        "version": "3.14.0"
      }
    },
    "Typography.Paragraph": {
      "copyable": {
        "property": "copyable",
        "description": "是否可拷贝，为对象时可设置复制文本以回调函数",
        "type": "boolean \\| { text: string, onCopy: Function }",
        "default": "false",
        "version": "3.14.1"
      },
      "delete": {
        "property": "delete",
        "description": "添加删除线样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用文本",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "editable": {
        "property": "editable",
        "description": "是否可编辑，为对象时可对编辑进行控制",
        "type": "boolean \\| { editing: boolean, onStart: Function, onChange: Function(string) }",
        "default": "false",
        "version": "3.14.0"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "自动溢出省略，为对象时可设置省略行数与是否可展开等",
        "type": "boolean \\| { rows: number, expandable: boolean, onExpand: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "mark": {
        "property": "mark",
        "description": "添加标记样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "underline": {
        "property": "underline",
        "description": "添加下划线样式",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "当用户提交编辑内容时触发",
        "type": "Function(string)",
        "default": "-",
        "version": "3.14.0"
      },
      "strong": {
        "property": "strong",
        "description": "是否加粗",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "type": {
        "property": "type",
        "description": "文本类型",
        "type": "`secondary`, `warning`, `danger`",
        "default": "-",
        "version": "3.14.0"
      }
    },
    "Upload": {
      "accept": {
        "property": "accept",
        "description": "接受上传的文件类型, 详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)",
        "type": "string",
        "default": "无",
        "version": ""
      },
      "action": {
        "property": "action",
        "description": "上传的地址",
        "type": "string\\|(file) => `Promise`",
        "default": "无",
        "version": ""
      },
      "method": {
        "property": "method",
        "description": "上传请求的 http method",
        "type": "string",
        "default": "'post'",
        "version": "3.25.0"
      },
      "directory": {
        "property": "directory",
        "description": "支持上传文件夹（[caniuse](https://caniuse.com/#feat=input-file-directory)）",
        "type": "boolean",
        "default": "false",
        "version": "3.7.0"
      },
      "beforeUpload": {
        "property": "beforeUpload",
        "description": "上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传（ resolve 传入 `File` 或 `Blob` 对象则上传 resolve 传入对象）。**注意：IE9 不支持该方法**。",
        "type": "(file, fileList) => \\`boolean",
        "default": "Promise\\`",
        "version": "无"
      },
      "customRequest": {
        "property": "customRequest",
        "description": "通过覆盖默认的上传行为，可以自定义自己的上传实现",
        "type": "Function",
        "default": "无",
        "version": ""
      },
      "data": {
        "property": "data",
        "description": "上传所需额外参数或返回上传额外参数的方法",
        "type": "object\\|(file) => object",
        "default": "无",
        "version": ""
      },
      "defaultFileList": {
        "property": "defaultFileList",
        "description": "默认已经上传的文件列表",
        "type": "object\\[]",
        "default": "无",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "fileList": {
        "property": "fileList",
        "description": "已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423)",
        "type": "object\\[]",
        "default": "无",
        "version": ""
      },
      "headers": {
        "property": "headers",
        "description": "设置上传的请求头部，IE10 以上有效",
        "type": "object",
        "default": "无",
        "version": ""
      },
      "listType": {
        "property": "listType",
        "description": "上传列表的内建样式，支持三种基本样式 `text`, `picture` 和 `picture-card`",
        "type": "string",
        "default": "'text'",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "发到后台的文件参数名",
        "type": "string",
        "default": "'file'",
        "version": ""
      },
      "previewFile": {
        "property": "previewFile",
        "description": "自定义文件预览逻辑",
        "type": "(file: File \\| Blob) => Promise&lt;dataURL: string>",
        "default": "无",
        "version": "3.17.0"
      },
      "showUploadList": {
        "property": "showUploadList",
        "description": "是否展示文件列表, 可设为一个对象，用于单独设定 `showPreviewIcon`, `showRemoveIcon` 和 `showDownloadIcon`",
        "type": "Boolean or { showPreviewIcon?: boolean, showRemoveIcon?: boolean, showDownloadIcon?: boolean }",
        "default": "true",
        "version": ""
      },
      "supportServerRender": {
        "property": "supportServerRender",
        "description": "服务端渲染时需要打开这个",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "withCredentials": {
        "property": "withCredentials",
        "description": "上传请求时是否携带 cookie",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "openFileDialogOnClick": {
        "property": "openFileDialogOnClick",
        "description": "点击打开文件对话框",
        "type": "boolean",
        "default": "true",
        "version": "3.10.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "上传文件改变时的状态，详见 [onChange](#onChange)",
        "type": "Function",
        "default": "无",
        "version": ""
      },
      "onPreview": {
        "property": "onPreview",
        "description": "点击文件链接或预览图标时的回调",
        "type": "Function(file)",
        "default": "无",
        "version": ""
      },
      "onRemove  ": {
        "property": "onRemove  ",
        "description": "点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除。              ",
        "type": "Function(file): \\`boolean",
        "default": "Promise\\`",
        "version": "无  "
      },
      "onDownload": {
        "property": "onDownload",
        "description": "点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页。",
        "type": "Function(file): void",
        "default": "跳转新标签页",
        "version": ""
      },
      "transformFile  ": {
        "property": "transformFile  ",
        "description": "在上传之前转换文件。支持返回一个 Promise 对象  ",
        "type": "Function(file): \\`string",
        "default": "Blob",
        "version": "File"
      }
    }
  },
  "en": {
    "AutoComplete": {
      "allowClear": {
        "property": "allowClear",
        "description": "Show clear button, effective in multiple mode only.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "backfill": {
        "property": "backfill",
        "description": "backfill selected item the input when using keyboard",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "children (for customize input element)": {
        "property": "children (for customize input element)",
        "description": "customize input element",
        "type": "HTMLInputElement <br /><br /> HTMLTextAreaElement <br /><br /> `React.ReactElement<InputProps>`",
        "default": "`<Input />`",
        "version": ""
      },
      "children (for dataSource)": {
        "property": "children (for dataSource)",
        "description": "Data source to auto complete",
        "type": "`React.ReactElement<OptionProps>` <br /><br /> `Array<React.ReactElement<OptionProps>>`",
        "default": "-",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "Data source for autocomplete",
        "type": "[DataSourceItemType](https://git.io/vMMKF)\\[]",
        "default": "-",
        "version": ""
      },
      "dropdownMenuStyle": {
        "property": "dropdownMenuStyle",
        "description": "additional style applied to dropdown menu",
        "type": "object",
        "default": "",
        "version": ""
      },
      "defaultActiveFirstOption": {
        "property": "defaultActiveFirstOption",
        "description": "Whether active first option by default",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "Initial selected option.",
        "type": "string\\|string\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether disabled select",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded.",
        "type": "boolean or function(inputValue, option)",
        "default": "true",
        "version": ""
      },
      "optionLabelProp": {
        "property": "optionLabelProp",
        "description": "Which prop value of option will render as content of select.",
        "type": "string",
        "default": "`children`",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "placeholder of input",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "selected option",
        "type": "string\\|string\\[]\\|{ key: string, label: string\\|ReactNode }\\|Array&lt;{ key: string, label: string\\|ReactNode }>",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "Called when leaving the component.",
        "type": "function()",
        "default": "-",
        "version": "3.6.5"
      },
      "onChange": {
        "property": "onChange",
        "description": "Called when select an option or input value change, or value of input is changed",
        "type": "function(value)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "Called when entering the component",
        "type": "function()",
        "default": "-",
        "version": "3.6.5"
      },
      "onSearch": {
        "property": "onSearch",
        "description": "Called when searching items.",
        "type": "function(value)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Called when a option is selected. param is option's value and option instance.",
        "type": "function(value, option)",
        "default": "-",
        "version": ""
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "Initial open state of dropdown",
        "type": "boolean",
        "default": "-",
        "version": "3.9.3"
      },
      "open": {
        "property": "open",
        "description": "Controlled open state of dropdown",
        "type": "boolean",
        "default": "-",
        "version": "3.9.3"
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "Call when dropdown open",
        "type": "function(open)",
        "default": "-",
        "version": "3.9.3"
      }
    },
    "Alert": {
      "afterClose": {
        "property": "afterClose",
        "description": "Called when close animation is finished",
        "type": "() => void",
        "default": "-",
        "version": "3.3.1"
      },
      "banner": {
        "property": "banner",
        "description": "Whether to show as banner",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "Whether Alert can be closed",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "closeText": {
        "property": "closeText",
        "description": "Close text to show",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "Additional content of Alert",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Custom icon, effective when `showIcon` is `true`",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "message": {
        "property": "message",
        "description": "Content of Alert",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "showIcon": {
        "property": "showIcon",
        "description": "Whether to show icon",
        "type": "boolean",
        "default": "false, in `banner` mode default is true",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Type of Alert styles, options: `success`, `info`, `warning`, `error`",
        "type": "string",
        "default": "`info`, in `banner` mode default is `warning`",
        "version": ""
      },
      "onClose": {
        "property": "onClose",
        "description": "Callback when Alert is closed",
        "type": "(e: MouseEvent) => void",
        "default": "-",
        "version": ""
      }
    },
    "BackTop": {
      "target": {
        "property": "target",
        "description": "specifies the scrollable area dom node",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": ""
      },
      "visibilityHeight": {
        "property": "visibilityHeight",
        "description": "the `BackTop` button will not show until the scroll height reaches this value",
        "type": "number",
        "default": "400",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "a callback function, which can be executed when you click the button",
        "type": "Function",
        "default": "-",
        "version": ""
      }
    },
    "Anchor": {
      "affix": {
        "property": "affix",
        "description": "Fixed mode of Anchor",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "bounds": {
        "property": "bounds",
        "description": "Bounding distance of anchor area",
        "type": "number",
        "default": "5(px)",
        "version": ""
      },
      "getContainer": {
        "property": "getContainer",
        "description": "Scrolling container",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": "3.4.0"
      },
      "offsetBottom": {
        "property": "offsetBottom",
        "description": "Pixels to offset from bottom when calculating position of scroll",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "offsetTop": {
        "property": "offsetTop",
        "description": "Pixels to offset from top when calculating position of scroll",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "showInkInFixed": {
        "property": "showInkInFixed",
        "description": "Whether show ink-balls in Fixed mode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "set the handler to handle `click` event",
        "type": "Function(e: Event, link: Object)",
        "default": "-",
        "version": "3.9.0"
      },
      "getCurrentAnchor": {
        "property": "getCurrentAnchor",
        "description": "Customize the anchor highlight",
        "type": "() => string",
        "default": "-",
        "version": "3.22.0"
      },
      "targetOffset": {
        "property": "targetOffset",
        "description": "Anchor scroll offset, default as `offsetTop`, [example](#components-anchor-demo-targetOffset)",
        "type": "number",
        "default": "`offsetTop`",
        "version": "3.22.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "Listening for anchor link change",
        "type": "(currentActiveLink: string) => void",
        "default": "",
        "version": "3.24.0"
      }
    },
    "Anchor.Link": {
      "href": {
        "property": "href",
        "description": "target of hyperlink",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "content of hyperlink",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "Specifies where to display the linked URL",
        "type": "string",
        "default": "",
        "version": ""
      }
    },
    "Badge": {
      "color": {
        "property": "color",
        "description": "Customize Badge dot color",
        "type": "string",
        "default": "-",
        "version": "3.16.0"
      },
      "count": {
        "property": "count",
        "description": "Number to show in badge",
        "type": "ReactNode",
        "default": "",
        "version": ""
      },
      "dot": {
        "property": "dot",
        "description": "Whether to display a red dot instead of `count`",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "offset": {
        "property": "offset",
        "description": "set offset of the badge dot, like`[x, y]`",
        "type": "`[number, number]`",
        "default": "-",
        "version": ""
      },
      "overflowCount": {
        "property": "overflowCount",
        "description": "Max count to show",
        "type": "number",
        "default": "99",
        "version": ""
      },
      "showZero": {
        "property": "showZero",
        "description": "Whether to show badge when `count` is zero",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Set Badge as a status dot",
        "type": "`success` \\| `processing` \\| `default` \\| `error` \\| `warning`",
        "default": "`''`",
        "version": ""
      },
      "text": {
        "property": "text",
        "description": "If `status` is set, `text` sets the display text of the status `dot`",
        "type": "string",
        "default": "`''`",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Text to show when hovering over the badge",
        "type": "string",
        "default": "`count`",
        "version": "3.5.0"
      }
    },
    "Avatar": {
      "icon": {
        "property": "icon",
        "description": "the `Icon` type for an icon avatar, see `Icon` Component or use ReactNode",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": ""
      },
      "shape": {
        "property": "shape",
        "description": "the shape of avatar",
        "type": "`circle` \\| `square`",
        "default": "`circle`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "the size of the avatar",
        "type": "number \\| string: `large` `small` `default`",
        "default": "`default`",
        "version": ""
      },
      "src": {
        "property": "src",
        "description": "the address of the image for an image avatar",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "srcSet": {
        "property": "srcSet",
        "description": "a list of sources to use for different screen resolutions",
        "type": "string",
        "default": "-",
        "version": "3.11.0"
      },
      "alt": {
        "property": "alt",
        "description": "This attribute defines the alternative text describing the image",
        "type": "string",
        "default": "-",
        "version": "3.7.0"
      },
      "onError": {
        "property": "onError",
        "description": "handler when img load error, return false to prevent default fallback behavior",
        "type": "() => boolean",
        "default": "-",
        "version": "3.8.0"
      }
    },
    "Affix": {
      "offsetBottom": {
        "property": "offsetBottom",
        "description": "Offset from the bottom of the viewport (in pixels)",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "offsetTop": {
        "property": "offsetTop",
        "description": "Offset from the top of the viewport (in pixels)",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "Specifies the scrollable area DOM node",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback for when Affix state is changed",
        "type": "Function(affixed)",
        "default": "-",
        "version": ""
      }
    },
    "Breadcrumb": {
      "itemRender": {
        "property": "itemRender",
        "description": "Custom item renderer",
        "type": "(route, params, routes, paths) => ReactNode",
        "default": "",
        "version": "-"
      },
      "params": {
        "property": "params",
        "description": "Routing parameters",
        "type": "object",
        "default": "",
        "version": "-"
      },
      "routes": {
        "property": "routes",
        "description": "The routing stack information of router",
        "type": "[routes\\[\\]](#routes)",
        "default": "",
        "version": "-"
      },
      "separator": {
        "property": "separator",
        "description": "Custom separator",
        "type": "string\\|ReactNode",
        "default": "",
        "version": "`/`"
      }
    },
    "Calendar": {
      "dateCellRender": {
        "property": "dateCellRender",
        "description": "Customize the display of the date cell, the returned content will be appended to the cell",
        "type": "function(date: moment): ReactNode",
        "default": "-",
        "version": ""
      },
      "dateFullCellRender": {
        "property": "dateFullCellRender",
        "description": "Customize the display of the date cell, the returned content will override the cell",
        "type": "function(date: moment): ReactNode",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The date selected by default",
        "type": "[moment](http://momentjs.com/)",
        "default": "default date",
        "version": ""
      },
      "disabledDate": {
        "property": "disabledDate",
        "description": "Function that specifies the dates that cannot be selected",
        "type": "(currentDate: moment) => boolean",
        "default": "-",
        "version": ""
      },
      "fullscreen": {
        "property": "fullscreen",
        "description": "Whether to display in full-screen",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "The calendar's locale",
        "type": "object",
        "default": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "The display mode of the calendar",
        "type": "`month` \\| `year`",
        "default": "`month`",
        "version": ""
      },
      "monthCellRender": {
        "property": "monthCellRender",
        "description": "Customize the display of the month cell, the returned content will be appended to the cell",
        "type": "function(date: moment): ReactNode",
        "default": "-",
        "version": ""
      },
      "monthFullCellRender": {
        "property": "monthFullCellRender",
        "description": "Customize the display of the month cell, the returned content will override the cell",
        "type": "function(date: moment): ReactNode",
        "default": "-",
        "version": ""
      },
      "validRange": {
        "property": "validRange",
        "description": "to set valid range",
        "type": "\\[[moment](http://momentjs.com/), [moment](http://momentjs.com/)]",
        "default": "-",
        "version": "3.3.0"
      },
      "value": {
        "property": "value",
        "description": "The current selected date",
        "type": "[moment](http://momentjs.com/)",
        "default": "current date",
        "version": ""
      },
      "onPanelChange": {
        "property": "onPanelChange",
        "description": "Callback for when panel changes",
        "type": "function(date: moment, mode: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Callback for when a date is selected",
        "type": "function(date: moment）",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback for when date changes",
        "type": "function(date: moment）",
        "default": "-",
        "version": "3.8.0"
      },
      "headerRender": {
        "property": "headerRender",
        "description": "render custom header in panel",
        "type": "function(object:{value: moment, type: string, onChange: f(), onTypeChange: f()})",
        "default": "-",
        "version": "3.19.0"
      }
    },
    "Card": {
      "actions": {
        "property": "actions",
        "description": "The action list, shows at the bottom of the Card.",
        "type": "Array&lt;ReactNode>",
        "default": "-",
        "version": ""
      },
      "activeTabKey": {
        "property": "activeTabKey",
        "description": "Current TabPane's key",
        "type": "string",
        "default": "-",
        "version": "3.3.0"
      },
      "headStyle": {
        "property": "headStyle",
        "description": "Inline style to apply to the card head",
        "type": "object",
        "default": "-",
        "version": "3.8.0"
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "Inline style to apply to the card content",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Toggles rendering of the border around the card",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "cover": {
        "property": "cover",
        "description": "Card cover",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "defaultActiveTabKey": {
        "property": "defaultActiveTabKey",
        "description": "Initial active TabPane's key, if `activeTabKey` is not set.",
        "type": "string",
        "default": "-",
        "version": "3.3.0"
      },
      "extra": {
        "property": "extra",
        "description": "Content to render in the top-right corner of the card",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "hoverable": {
        "property": "hoverable",
        "description": "Lift up when hovering card",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Shows a loading indicator while the contents of the card are being fetched",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "tabList": {
        "property": "tabList",
        "description": "List of TabPane's head.",
        "type": "Array&lt;{key: string, tab: ReactNode}>",
        "default": "-",
        "version": ""
      },
      "tabBarExtraContent": {
        "property": "tabBarExtraContent",
        "description": "Extra content in tab bar",
        "type": "React.ReactNode",
        "default": "-",
        "version": "3.23.0"
      },
      "size": {
        "property": "size",
        "description": "Size of card",
        "type": "`default` \\| `small`",
        "default": "`default`",
        "version": "3.12.0"
      },
      "title": {
        "property": "title",
        "description": "Card title",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Card style type, can be set to `inner` or not set",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onTabChange": {
        "property": "onTabChange",
        "description": "Callback when tab is switched",
        "type": "(key) => void",
        "default": "-",
        "version": ""
      }
    },
    "Button": {
      "disabled": {
        "property": "disabled",
        "description": "disabled state of button",
        "type": "boolean",
        "default": "`false`",
        "version": "3.5.1"
      },
      "ghost": {
        "property": "ghost",
        "description": "make background transparent and invert text and border colors, added in 2.7",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "href": {
        "property": "href",
        "description": "redirect url of link button",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "htmlType": {
        "property": "htmlType",
        "description": "set the original html `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)",
        "type": "string",
        "default": "`button`",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "set the icon of button, see: Icon component",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "set the loading status of button",
        "type": "boolean \\| { delay: number }",
        "default": "`false`",
        "version": ""
      },
      "shape": {
        "property": "shape",
        "description": "can be set to `circle`, `round` or omitted",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "can be set to `small` `large` or omitted",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "same as target attribute of a, works when href is specified",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "can be set to `primary` `ghost` `dashed` `danger` `link`(added in 3.17) or omitted (meaning `default`)",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "set the handler to handle `click` event",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      "block": {
        "property": "block",
        "description": "option to fit button width to its parent width",
        "type": "boolean",
        "default": "`false`",
        "version": "3.8.0"
      }
    },
    "Card.Grid": {
      "className": {
        "property": "className",
        "description": "className of container",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hoverable": {
        "property": "hoverable",
        "description": "Lift up when hovering card grid",
        "type": "boolean",
        "default": "true",
        "version": "3.23.0"
      },
      "style": {
        "property": "style",
        "description": "style object of container",
        "type": "object",
        "default": "-",
        "version": ""
      }
    },
    "Card.Meta": {
      "avatar": {
        "property": "avatar",
        "description": "avatar or icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "className of container",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "description content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "style object of container",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "title content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Carousel": {
      "afterChange": {
        "property": "afterChange",
        "description": "Callback function called after the current index changes",
        "type": "function(current)",
        "default": "-",
        "version": ""
      },
      "autoplay": {
        "property": "autoplay",
        "description": "Whether to scroll automatically",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "beforeChange": {
        "property": "beforeChange",
        "description": "Callback function called before the current index changes",
        "type": "function(from, to)",
        "default": "-",
        "version": ""
      },
      "dotPosition": {
        "property": "dotPosition",
        "description": "The position of the dots, which can be one of `top` `bottom` `left` `right`",
        "type": "string",
        "default": "bottom",
        "version": "3.17.0"
      },
      "dots": {
        "property": "dots",
        "description": "Whether to show the dots at the bottom of the gallery",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "easing": {
        "property": "easing",
        "description": "Transition interpolation function name",
        "type": "string",
        "default": "`linear`",
        "version": ""
      },
      "effect": {
        "property": "effect",
        "description": "Transition effect",
        "type": "`scrollx` \\| `fade`",
        "default": "`scrollx`",
        "version": ""
      }
    },
    "Checkbox.Group": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "Default selected value",
        "type": "string\\[]",
        "default": "\\[]",
        "version": "3.6.2"
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable all checkboxes",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "name": {
        "property": "name",
        "description": "The `name` property of all `input[type=\"checkbox\"]` children",
        "type": "string",
        "default": "-",
        "version": "3.16.0"
      },
      "options": {
        "property": "options",
        "description": "Specifies options",
        "type": "string\\[]",
        "default": "\\[]",
        "version": "3.6.2"
      },
      "value": {
        "property": "value",
        "description": "Used for setting the currently selected value.",
        "type": "string\\[]",
        "default": "\\[]",
        "version": "3.6.2"
      },
      "onChange": {
        "property": "onChange",
        "description": "The callback function that is triggered when the state changes.",
        "type": "Function(checkedValue)",
        "default": "-",
        "version": "3.6.2"
      }
    },
    "Checkbox": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "checked": {
        "property": "checked",
        "description": "Specifies whether the checkbox is selected.",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "Specifies the initial state: whether or not the checkbox is selected.",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable checkbox",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "indeterminate": {
        "property": "indeterminate",
        "description": "indeterminate checked state of checkbox",
        "type": "boolean",
        "default": "false",
        "version": "3.6.2"
      },
      "onChange": {
        "property": "onChange",
        "description": "The callback function that is triggered when the state changes.",
        "type": "Function(e:Event)",
        "default": "-",
        "version": "3.6.2"
      }
    },
    "Cascader": {
      "allowClear": {
        "property": "allowClear",
        "description": "whether allow clear",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "changeOnSelect": {
        "property": "changeOnSelect",
        "description": "change value on each selection if set to true, see above demo for details",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "additional css class",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "initial selected value",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "whether disabled select",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "displayRender": {
        "property": "displayRender",
        "description": "render function of displaying selected options",
        "type": "`(label, selectedOptions) => ReactNode`",
        "default": "`label => label.join(' / ')`",
        "version": ""
      },
      "expandTrigger": {
        "property": "expandTrigger",
        "description": "expand current item when click or hover, one of 'click' 'hover'",
        "type": "string",
        "default": "'click'",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "custom field name for label and value and children (before 3.7.0 it calls `filedNames` which is typo）)",
        "type": "object",
        "default": "`{ label: 'label', value: 'value', children: 'children' }`",
        "version": "3.7.0"
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative.[example](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "Function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "To load option lazily, and it cannot work with `showSearch`",
        "type": "`(selectedOptions) => void`",
        "default": "-",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "Specify content to show when no result matches.",
        "type": "string",
        "default": "'Not Found'",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "data options of cascade",
        "type": "[Option](#Option)\\[]",
        "default": "-",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "input placeholder",
        "type": "string",
        "default": "'Please select'",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "additional className of popup overlay",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "popupPlacement": {
        "property": "popupPlacement",
        "description": "use preset popup align config from builtinPlacements：`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "type": "string",
        "default": "`bottomLeft`",
        "version": ""
      },
      "popupVisible": {
        "property": "popupVisible",
        "description": "set visible of cascader popup",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "Whether show search input in single mode.",
        "type": "boolean\\|object",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "input size, one of `large` `default` `small`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "additional style",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "value": {
        "property": "value",
        "description": "selected value",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "callback when finishing cascader select",
        "type": "`(value, selectedOptions) => void`",
        "default": "-",
        "version": ""
      },
      "onPopupVisibleChange": {
        "property": "onPopupVisibleChange",
        "description": "callback when popup shown or hidden",
        "type": "`(value) => void`",
        "default": "-",
        "version": ""
      }
    },
    "Collapse": {
      "activeKey": {
        "property": "activeKey",
        "description": "Key of the active panel",
        "type": "string\\[]\\|string\\| number\\[]\\|number",
        "default": "No default value. In `accordion` mode, it's the key of the first panel.",
        "version": ""
      },
      "defaultActiveKey": {
        "property": "defaultActiveKey",
        "description": "Key of the initial active panel",
        "type": "string\\[]\\|string\\| number\\[]\\|number",
        "default": "-",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Toggles rendering of the border around the collapse block",
        "type": "boolean",
        "default": "`true`",
        "version": "3.6.5"
      },
      "accordion": {
        "property": "accordion",
        "description": "If `true`, `Collapse` renders as `Accordion`",
        "type": "boolean",
        "default": "`false`",
        "version": "3.6.5"
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback function executed when active panel is changed",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "allow to customize collapse icon",
        "type": "(panelProps) => ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "expandIconPosition": {
        "property": "expandIconPosition",
        "description": "Set expand icon position: `left`, `right`",
        "type": "`left`",
        "default": "-",
        "version": "3.17.0"
      },
      "destroyInactivePanel": {
        "property": "destroyInactivePanel",
        "description": "Destroy Inactive Panel",
        "type": "boolean",
        "default": "`false`",
        "version": "3.6.5"
      }
    },
    "Collapse.Panel": {
      "disabled": {
        "property": "disabled",
        "description": "If `true`, panel cannot be opened or closed",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "Forced render of content on panel, instead of lazy rending after clicking on header",
        "type": "boolean",
        "default": "`false`",
        "version": "3.2.0"
      },
      "header": {
        "property": "header",
        "description": "Title of the panel",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Unique key identifying the panel from among its siblings",
        "type": "string\\|number",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "If `false`, panel will not show arrow icon",
        "type": "boolean",
        "default": "`true`",
        "version": "3.1.0"
      },
      "extra": {
        "property": "extra",
        "description": "extra element in the corner",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      }
    },
    "Comment": {
      "actions": {
        "property": "actions",
        "description": "List of action items rendered below the comment content",
        "type": "Array<ReactNode>",
        "default": "-",
        "version": "3.11.0"
      },
      "author": {
        "property": "author",
        "description": "The element to display as the comment author",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "avatar": {
        "property": "avatar",
        "description": "The element to display as the comment avatar - generally an antd `Avatar` or src",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "children": {
        "property": "children",
        "description": "Nested comments should be provided as children of the Comment",
        "type": "ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "content": {
        "property": "content",
        "description": "The main content of the comment",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "datetime": {
        "property": "datetime",
        "description": "A datetime element containing the time to be displayed",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.11.0"
      }
    },
    "DatePicker": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "to set default date, if start time or end time is null or undefined, the date range will be an open interval",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "to set default picker date",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": "3.10.8"
      },
      "disabledTime": {
        "property": "disabledTime",
        "description": "to specify the time that cannot be selected",
        "type": "function(date)",
        "default": "-",
        "version": ""
      },
      "format": {
        "property": "format",
        "description": "to set the date format, refer to [moment.js](http://momentjs.com/). When an array is provided, all values are used for parsing and first value is used for formatting.",
        "type": "string \\| string\\[]",
        "default": "\"YYYY-MM-DD\"",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "render extra footer in panel",
        "type": "(mode) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "showTime": {
        "property": "showTime",
        "description": "to provide an additional time selection",
        "type": "object\\|boolean",
        "default": "[TimePicker Options](/components/time-picker/#API)",
        "version": ""
      },
      "showTime.defaultValue": {
        "property": "showTime.defaultValue",
        "description": "to set default time of selected date, [demo](#components-date-picker-demo-disabled-date)",
        "type": "[moment](http://momentjs.com/)",
        "default": "moment()",
        "version": ""
      },
      "showToday": {
        "property": "showToday",
        "description": "whether to show \"Today\" button",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "to set date",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "a callback function, can be executed when the selected time is changing",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "callback when click ok button",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onPanelChange": {
        "property": "onPanelChange",
        "description": "Callback function for panel changing",
        "type": "function(value, mode)",
        "default": "-",
        "version": "3.19.8"
      }
    },
    "DatePicker.MonthPicker": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "to set default date",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "to set default picker date",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": "3.10.8"
      },
      "format": {
        "property": "format",
        "description": "to set the date format, refer to [moment.js](http://momentjs.com/)",
        "type": "string",
        "default": "\"YYYY-MM\"",
        "version": ""
      },
      "monthCellContentRender": {
        "property": "monthCellContentRender",
        "description": "Custom month cell content render method",
        "type": "function(date, locale): ReactNode",
        "default": "-",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "render extra footer in panel",
        "type": "() => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "to set date",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "a callback function, can be executed when the selected time is changing",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      }
    },
    "DatePicker.WeekPicker": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "to set default date",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "to set default picker date",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": "3.10.8"
      },
      "format": {
        "property": "format",
        "description": "to set the date format, refer to [moment.js](http://momentjs.com/)",
        "type": "string",
        "default": "\"YYYY-wo\"",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "to set date",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "a callback function, can be executed when the selected time is changing",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "render extra footer in panel",
        "type": "(mode) => React.ReactNode",
        "default": "-",
        "version": "3.12.0"
      }
    },
    "DatePicker.RangePicker": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "to set default date",
        "type": "\\[[moment](http://momentjs.com/), [moment](http://momentjs.com/)]",
        "default": "-",
        "version": ""
      },
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "to set default picker date",
        "type": "\\[[moment](http://momentjs.com/), [moment](http://momentjs.com/)]",
        "default": "-",
        "version": "3.10.8"
      },
      "disabledTime": {
        "property": "disabledTime",
        "description": "to specify the time that cannot be selected",
        "type": "function(dates: \\[moment, moment], partial: \\`'start'",
        "default": "'end'\\`)",
        "version": "-"
      },
      "format": {
        "property": "format",
        "description": "to set the date format, refer to [moment.js](http://momentjs.com/). When an array is provided, all values are used for parsing and first value is used for formatting.",
        "type": "string \\| string\\[]",
        "default": "\"YYYY-MM-DD HH:mm:ss\"",
        "version": ""
      },
      "ranges": {
        "property": "ranges",
        "description": "preseted ranges for quick selection",
        "type": "{ \\[range: string]: [moment](http://momentjs.com/)\\[] } \\| { \\[range: string]: () => [moment](http://momentjs.com/)\\[] }",
        "default": "-",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "render extra footer in panel",
        "type": "() => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "separator": {
        "property": "separator",
        "description": "set separator between inputs",
        "type": "string",
        "default": "'~'",
        "version": "3.14.0"
      },
      "showTime": {
        "property": "showTime",
        "description": "to provide an additional time selection",
        "type": "object\\|boolean",
        "default": "[TimePicker Options](/components/time-picker/#API)",
        "version": ""
      },
      "showTime.defaultValue": {
        "property": "showTime.defaultValue",
        "description": "to set default time of selected date, [demo](#components-date-picker-demo-disabled-date)",
        "type": "[moment](http://momentjs.com/)\\[]",
        "default": "\\[moment(), moment()]",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "to set date",
        "type": "\\[[moment](http://momentjs.com/), [moment](http://momentjs.com/)]",
        "default": "-",
        "version": ""
      },
      "onCalendarChange": {
        "property": "onCalendarChange",
        "description": "a callback function, can be executed when the start time or the end time of the range is changing",
        "type": "function(dates: \\[moment, moment])",
        "default": "-",
        "version": "3.0.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "a callback function, can be executed when the selected time is changing",
        "type": "function(dates: \\[moment, moment], dateStrings: \\[string, string])",
        "default": "-",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "callback when click ok button",
        "type": "function(dates: [moment](http://momentjs.com/)\\[])",
        "default": "-",
        "version": ""
      }
    },
    "Descriptions": {
      "title": {
        "property": "title",
        "description": "The title of the description list, placed at the top",
        "type": "ReactNode",
        "default": "-",
        "version": "3.19.0"
      },
      "bordered": {
        "property": "bordered",
        "description": "whether to display the border",
        "type": "boolean",
        "default": "false",
        "version": "3.19.0"
      },
      "column": {
        "property": "column",
        "description": "the number of `DescriptionItems` in a row,could be a number or a object like `{ xs: 8, sm: 16, md: 24}`,(Only set `bordered={true}` to take effect)",
        "type": "number",
        "default": "3",
        "version": "3.19.0"
      },
      "size": {
        "property": "size",
        "description": "set the size of the list. Can be set to `middle`,`small`, or not filled",
        "type": "\\`default",
        "default": "middle",
        "version": "small\\`"
      },
      "layout": {
        "property": "layout",
        "description": "Define description layout",
        "type": "\\`horizontal",
        "default": "vertical\\`",
        "version": "`horizontal`"
      },
      "colon": {
        "property": "colon",
        "description": "change default props `colon` value of `Descriptions.Item`",
        "type": "boolean",
        "default": "true",
        "version": "3.21.0"
      }
    },
    "Descriptions.Item": {
      "label": {
        "property": "label",
        "description": "description of the content",
        "type": "ReactNode",
        "default": "-",
        "version": "3.19.0"
      },
      "span": {
        "property": "span",
        "description": "The number of columns included",
        "type": "number",
        "default": "1",
        "version": "3.19.0"
      }
    },
    "Divider": {
      "className": {
        "property": "className",
        "description": "className of container",
        "type": "string",
        "default": "-",
        "version": "3.5.4"
      },
      "dashed": {
        "property": "dashed",
        "description": "whether line is dashed",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "orientation": {
        "property": "orientation",
        "description": "position of title inside divider",
        "type": "enum: `left` `right` `center`",
        "default": "`center`",
        "version": "3.3.0"
      },
      "style": {
        "property": "style",
        "description": "style object of container",
        "type": "object",
        "default": "-",
        "version": "3.5.4"
      },
      "type": {
        "property": "type",
        "description": "direction type of divider",
        "type": "enum: `horizontal` `vertical`",
        "default": "`horizontal`",
        "version": ""
      }
    },
    "Drawer": {
      "closable": {
        "property": "closable",
        "description": "Whether a close (x) button is visible on top right of the Drawer dialog or not.",
        "type": "boolean",
        "default": "true",
        "version": "3.7.0"
      },
      "destroyOnClose": {
        "property": "destroyOnClose",
        "description": "Whether to unmount child components on closing drawer or not.",
        "type": "boolean",
        "default": "false",
        "version": "3.7.0"
      },
      "getContainer": {
        "property": "getContainer",
        "description": "Return the mounted node for Drawer.",
        "type": "HTMLElement \\| `() => HTMLElement` \\| Selectors \\| false",
        "default": "'body'",
        "version": "3.7.0"
      },
      "mask": {
        "property": "mask",
        "description": "Whether to show mask or not.",
        "type": "Boolean",
        "default": "true",
        "version": "3.7.0"
      },
      "maskClosable": {
        "property": "maskClosable",
        "description": "Clicking on the mask (area outside the Drawer) to close the Drawer or not.",
        "type": "boolean",
        "default": "true",
        "version": "3.7.0"
      },
      "maskStyle": {
        "property": "maskStyle",
        "description": "Style for Drawer's mask element.",
        "type": "object",
        "default": "{}",
        "version": "3.7.0"
      },
      "style": {
        "property": "style",
        "description": "Style of wrapper element which **contains mask** compare to `drawerStyle`",
        "type": "object",
        "default": "-",
        "version": "3.7.0"
      },
      "drawerStyle": {
        "property": "drawerStyle",
        "description": "Style of the popup layer element",
        "type": "object",
        "default": "-",
        "version": "3.24.0"
      },
      "headerStyle": {
        "property": "headerStyle",
        "description": "Style of the drawer header part",
        "type": "object",
        "default": "-",
        "version": "3.24.0"
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "Style of the drawer content part",
        "type": "object",
        "default": "-",
        "version": "3.12.0"
      },
      "title": {
        "property": "title",
        "description": "The title for Drawer.",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.7.0"
      },
      "visible": {
        "property": "visible",
        "description": "Whether the Drawer dialog is visible or not.",
        "type": "boolean",
        "default": "false",
        "version": "3.7.0"
      },
      "width": {
        "property": "width",
        "description": "Width of the Drawer dialog.",
        "type": "string\\|number",
        "default": "256",
        "version": "3.7.0"
      },
      "height": {
        "property": "height",
        "description": "placement is `top` or `bottom`, height of the Drawer dialog.",
        "type": "string\\|number",
        "default": "256",
        "version": "3.9.0"
      },
      "className": {
        "property": "className",
        "description": "The class name of the container of the Drawer dialog.",
        "type": "string",
        "default": "-",
        "version": "3.8.0"
      },
      "zIndex": {
        "property": "zIndex",
        "description": "The `z-index` of the Drawer.",
        "type": "Number",
        "default": "1000",
        "version": "3.7.0"
      },
      "placement": {
        "property": "placement",
        "description": "The placement of the Drawer.",
        "type": "'top' \\| 'right' \\| 'bottom' \\| 'left'",
        "default": "'right'",
        "version": "3.7.0"
      },
      "onClose": {
        "property": "onClose",
        "description": "Specify a callback that will be called when a user clicks mask, close button or Cancel button.",
        "type": "function(e)",
        "default": "-",
        "version": "3.7.0"
      },
      "afterVisibleChange": {
        "property": "afterVisibleChange",
        "description": "Callback after the animation ends when switching drawers.",
        "type": "function(visible)",
        "default": "-",
        "version": "3.17.0"
      },
      "keyboard": {
        "property": "keyboard",
        "description": "Whether support press esc to close",
        "type": "Boolean",
        "default": "true",
        "version": "3.19.8"
      }
    },
    "Dropdown.Button": {
      "disabled": {
        "property": "disabled",
        "description": "Whether the dropdown menu is disabled",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Icon (appears on the right)",
        "type": "ReactNode",
        "default": "-",
        "version": "3.17.0"
      },
      "overlay": {
        "property": "overlay",
        "description": "The dropdown menu",
        "type": "[Menu](/components/menu)",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "Placement of popup menu: `bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight`",
        "type": "String",
        "default": "`bottomLeft`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Size of the button, the same as [Button](/components/button)",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "The trigger mode which executes the dropdown action",
        "type": "Array&lt;`click`\\|`hover`\\|`contextMenu`>",
        "default": "`['hover']`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Type of the button, the same as [Button](/components/button)",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "Whether the dropdown menu is currently visible",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "The same as [Button](/components/button): called when you click the button on the left",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "onVisibleChange": {
        "property": "onVisibleChange",
        "description": "Called when the visible state is changed",
        "type": "Function",
        "default": "-",
        "version": ""
      }
    },
    "Dropdown": {
      "disabled": {
        "property": "disabled",
        "description": "Whether the dropdown menu is disabled",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "To set the container of the dropdown menu. The default is to create a `div` element in `body`, but you can reset it to the scrolling area and make a relative reposition. [Example on CodePen](https://codepen.io/afc163/pen/zEjNOy?editors=0010).",
        "type": "Function(triggerNode)",
        "default": "`() => document.body`",
        "version": ""
      },
      "overlay": {
        "property": "overlay",
        "description": "The dropdown menu",
        "type": "[Menu](/components/menu) \\| () => Menu",
        "default": "-",
        "version": ""
      },
      "overlayClassName": {
        "property": "overlayClassName",
        "description": "Class name of the dropdown root element",
        "type": "string",
        "default": "-",
        "version": "3.11.0"
      },
      "overlayStyle": {
        "property": "overlayStyle",
        "description": "Style of the dropdown root element",
        "type": "object",
        "default": "-",
        "version": "3.11.0"
      },
      "placement": {
        "property": "placement",
        "description": "Placement of popup menu: `bottomLeft`, `bottomCenter`, `bottomRight`, `topLeft`, `topCenter` or `topRight`",
        "type": "String",
        "default": "`bottomLeft`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "The trigger mode which executes the dropdown action. Note that hover can't be used on touchscreens.",
        "type": "Array&lt;`click`\\|`hover`\\|`contextMenu`>",
        "default": "`['hover']`",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "Whether the dropdown menu is currently visible",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "onVisibleChange": {
        "property": "onVisibleChange",
        "description": "Called when the visible state is changed.",
        "type": "Function(visible)",
        "default": "-",
        "version": ""
      }
    },
    "Empty": {
      "description": {
        "property": "description",
        "description": "Customize description",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.12.0"
      },
      "imageStyle": {
        "property": "imageStyle",
        "description": "style of image",
        "type": "CSSProperties",
        "default": "-",
        "version": "3.16.0"
      },
      "image": {
        "property": "image",
        "description": "Customize image. Will tread as image url when string provided.",
        "type": "string \\| ReactNode",
        "default": "`Empty.PRESENTED_IMAGE_DEFAULT`",
        "version": "3.12.0"
      }
    },
    "Form": {
      "form": {
        "property": "form",
        "description": "Decorated by `Form.create()` will be automatically set `this.props.form` property",
        "type": "object",
        "default": "n/a",
        "version": ""
      },
      "hideRequiredMark": {
        "property": "hideRequiredMark",
        "description": "Hide required mark of all form items",
        "type": "Boolean",
        "default": "false",
        "version": ""
      },
      "labelAlign": {
        "property": "labelAlign",
        "description": "text align of label of all items",
        "type": "'left' \\| 'right'",
        "default": "'right'",
        "version": "3.15.0"
      },
      "labelCol": {
        "property": "labelCol",
        "description": "(Added in 3.14.0. Previous version can only set on FormItem.) The layout of label. You can set `span` `offset` to something like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` same as with `<Col>`",
        "type": "[object](https://ant.design/components/grid/#Col)",
        "default": "",
        "version": "3.14.0"
      },
      "layout": {
        "property": "layout",
        "description": "Define form layout",
        "type": "'horizontal'\\|'vertical'\\|'inline'",
        "default": "'horizontal'",
        "version": ""
      },
      "onSubmit": {
        "property": "onSubmit",
        "description": "Defines a function will be called if form data validation is successful.",
        "type": "Function(e:Event)",
        "default": "",
        "version": ""
      },
      "wrapperCol": {
        "property": "wrapperCol",
        "description": "(Added in 3.14.0. Previous version can only set on FormItem.) The layout for input controls, same as `labelCol`",
        "type": "[object](https://ant.design/components/grid/#Col)",
        "default": "",
        "version": "3.14.0"
      },
      "colon": {
        "property": "colon",
        "description": "change default props colon value of Form.Item (only effective when prop layout is horizontal)",
        "type": "boolean",
        "default": "true",
        "version": "3.15.0"
      }
    },
    "Form.Item": {
      "colon": {
        "property": "colon",
        "description": "Used with `label`, whether to display `:` after label text.",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time.",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "hasFeedback": {
        "property": "hasFeedback",
        "description": "Used with `validateStatus`, this option specifies the validation status icon. Recommended to be used only with `Input`.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "help": {
        "property": "help",
        "description": "The prompt message. If not provided, the prompt message will be generated by the validation rule.",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "htmlFor": {
        "property": "htmlFor",
        "description": "Set sub label `htmlFor`.",
        "type": "string",
        "default": "",
        "version": "3.17.0"
      },
      "label": {
        "property": "label",
        "description": "Label text",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "labelCol": {
        "property": "labelCol",
        "description": "The layout of label. You can set `span` `offset` to something like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` same as with `<Col>`. You can set on Form one time after 3.14.0. Will take FormItem's prop when both set with Form.",
        "type": "[object](https://ant.design/components/grid/#Col)",
        "default": "",
        "version": ""
      },
      "labelAlign": {
        "property": "labelAlign",
        "description": "text align of label",
        "type": "'left' \\| 'right'",
        "default": "'right'",
        "version": "3.15.0"
      },
      "required": {
        "property": "required",
        "description": "Whether provided or not, it will be generated by the validation rule.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "validateStatus": {
        "property": "validateStatus",
        "description": "The validation status. If not provided, it will be generated by validation rule. options: 'success' 'warning' 'error' 'validating'",
        "type": "string",
        "default": "",
        "version": ""
      },
      "wrapperCol": {
        "property": "wrapperCol",
        "description": "The layout for input controls, same as `labelCol`. You can set on Form one time after 3.14.0. Will take FormItem's prop when both set with Form.",
        "type": "[object](https://ant.design/components/grid/#Col)",
        "default": "",
        "version": ""
      }
    },
    "Row": {
      "align": {
        "property": "align",
        "description": "the vertical alignment of the flex layout: `top` `middle` `bottom`",
        "type": "string",
        "default": "`top`",
        "version": ""
      },
      "gutter": {
        "property": "gutter",
        "description": "spacing between grids, could be a number or a object like `{ xs: 8, sm: 16, md: 24}`. or you can use array to make horizontal and vertical spacing work at the same time `[horizontal, vertical]` (supported after `3.24.0`)",
        "type": "number/object/array",
        "default": "0",
        "version": ""
      },
      "justify": {
        "property": "justify",
        "description": "horizontal arrangement of the flex layout: `start` `end` `center` `space-around` `space-between`",
        "type": "string",
        "default": "`start`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "layout mode, optional `flex`, [browser support](http://caniuse.com/#search=flex)",
        "type": "string",
        "default": "",
        "version": ""
      }
    },
    "Col": {
      "offset": {
        "property": "offset",
        "description": "the number of cells to offset Col from the left",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "order": {
        "property": "order",
        "description": "raster order, used in `flex` layout mode",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "pull": {
        "property": "pull",
        "description": "the number of cells that raster is moved to the left",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "push": {
        "property": "push",
        "description": "the number of cells that raster is moved to the right",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "span": {
        "property": "span",
        "description": "raster number of cells to occupy, 0 corresponds to `display: none`",
        "type": "number",
        "default": "none",
        "version": ""
      },
      "xs": {
        "property": "xs",
        "description": "`<576px` and also default setting, could be a `span` value or an object containing above props",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "sm": {
        "property": "sm",
        "description": "`≥576px`, could be a `span` value or an object containing above props",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "md": {
        "property": "md",
        "description": "`≥768px`, could be a `span` value or an object containing above props",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "lg": {
        "property": "lg",
        "description": "`≥992px`, could be a `span` value or an object containing above props",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "xl": {
        "property": "xl",
        "description": "`≥1200px`, could be a `span` value or an object containing above props",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      },
      "xxl": {
        "property": "xxl",
        "description": "`≥1600px`, could be a `span` value or an object containing above props",
        "type": "number\\|object",
        "default": "-",
        "version": ""
      }
    },
    "Icon": {
      "type": {
        "property": "type",
        "description": "Type of the icon",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "Style properties of icon, like `fontSize` and `color`",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "Theme variant of the icon",
        "type": "'filled' \\| 'outlined' \\| 'twoTone'",
        "default": "'outlined'",
        "version": "3.9.0"
      },
      "spin": {
        "property": "spin",
        "description": "Rotate icon with animation",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "rotate": {
        "property": "rotate",
        "description": "Rotate by n degrees (added in 3.13.0, not working in IE9)",
        "type": "number",
        "default": "-",
        "version": "3.13.0"
      },
      "component": {
        "property": "component",
        "description": "The component used for the root node. This will override the **`type`** property.",
        "type": "ComponentType&lt;CustomIconComponentProps>",
        "default": "-",
        "version": "3.9.0"
      },
      "twoToneColor": {
        "property": "twoToneColor",
        "description": "Only supports the two-tone icon. Specify the primary color.",
        "type": "string (hex color)",
        "default": "-",
        "version": "3.9.0"
      }
    },
    "Input": {
      "addonAfter": {
        "property": "addonAfter",
        "description": "The label text displayed after (on the right side of) the input field.",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "addonBefore": {
        "property": "addonBefore",
        "description": "The label text displayed before (on the left side of) the input field.",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The initial input content",
        "type": "string",
        "default": "",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether the input is disabled.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "id": {
        "property": "id",
        "description": "The ID for input",
        "type": "string",
        "default": "",
        "version": ""
      },
      "maxLength": {
        "property": "maxLength",
        "description": "max length",
        "type": "number",
        "default": "",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "The prefix icon for the Input.",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "The size of the input box. Note: in the context of a form, the `large` size is used. Available: `large` `default` `small`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "suffix": {
        "property": "suffix",
        "description": "The suffix icon for the Input.",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "The type of input, see: [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types)(use `Input.TextArea` instead of `type=\"textarea\"`)",
        "type": "string",
        "default": "`text`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "The input content value",
        "type": "string",
        "default": "",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "callback when user input",
        "type": "function(e)",
        "default": "",
        "version": "3.9.3"
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed.",
        "type": "function(e)",
        "default": "",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "allow to remove input content with clear icon",
        "type": "boolean",
        "default": "",
        "version": "3.12.0"
      }
    },
    "Input.TextArea": {
      "autoSize": {
        "property": "autoSize",
        "description": "Height autosize feature, can be set to \\`true",
        "type": "false`or an object`{ minRows: 2, maxRows: 6 }`. `autosize`is deprecated after`3.24.0`, please use `autoSize\\`.",
        "default": "boolean\\|object",
        "version": "false"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The initial input content",
        "type": "string",
        "default": "",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "The input content value",
        "type": "string",
        "default": "",
        "version": ""
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed.",
        "type": "function(e)",
        "default": "",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "allow to remove input content with clear icon",
        "type": "boolean",
        "default": "",
        "version": "3.25.0"
      }
    },
    "Input.Search": {
      "enterButton": {
        "property": "enterButton",
        "description": "to show an enter button after input. This prop is conflict with addon.",
        "type": "boolean\\|ReactNode",
        "default": "false",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key.",
        "type": "function(value, event)",
        "default": "",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Search box with loading.",
        "type": "boolean",
        "default": "",
        "version": ""
      }
    },
    "Input.Group": {
      "compact": {
        "property": "compact",
        "description": "Whether use compact style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "The size of `Input.Group` specifies the size of the included `Input` fields. Available: `large` `default` `small`",
        "type": "string",
        "default": "`default`",
        "version": ""
      }
    },
    "Input.Password": {
      "visibilityToggle": {
        "property": "visibilityToggle",
        "description": "Whether show toggle button",
        "type": "boolean",
        "default": "true",
        "version": "3.12.2"
      }
    },
    "InputNumber": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "initial value",
        "type": "number",
        "default": "",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "disable the input",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "formatter": {
        "property": "formatter",
        "description": "Specifies the format of the value presented",
        "type": "function(value: number \\| string): string",
        "default": "-",
        "version": ""
      },
      "max": {
        "property": "max",
        "description": "max value",
        "type": "number",
        "default": "Infinity",
        "version": ""
      },
      "min": {
        "property": "min",
        "description": "min value",
        "type": "number",
        "default": "-Infinity",
        "version": ""
      },
      "parser": {
        "property": "parser",
        "description": "Specifies the value extracted from formatter",
        "type": "function( string): number",
        "default": "-",
        "version": ""
      },
      "precision": {
        "property": "precision",
        "description": "precision of input value",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "decimalSeparator": {
        "property": "decimalSeparator",
        "description": "decimal separator",
        "type": "string",
        "default": "-",
        "version": "3.10.1"
      },
      "size": {
        "property": "size",
        "description": "height of input box",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "step": {
        "property": "step",
        "description": "The number to which the current value is increased or decreased. It can be an integer or decimal.",
        "type": "number\\|string",
        "default": "1",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "current value",
        "type": "number",
        "default": "",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "The callback triggered when the value is changed.",
        "type": "function(value: number \\| string)",
        "default": "",
        "version": ""
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed.",
        "type": "function(e)",
        "default": "",
        "version": ""
      }
    },
    "Layout": {
      "className": {
        "property": "className",
        "description": "container className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hasSider": {
        "property": "hasSider",
        "description": "whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering",
        "type": "boolean",
        "default": "-",
        "version": "3.2.0"
      },
      "style": {
        "property": "style",
        "description": "to customize the styles",
        "type": "object",
        "default": "-",
        "version": ""
      }
    },
    "Layout.Sider": {
      "breakpoint": {
        "property": "breakpoint",
        "description": "[breakpoints](/components/grid#Col) of the responsive layout",
        "type": "Enum { 'xs', 'sm', 'md', 'lg', 'xl', 'xxl' }",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "container className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "collapsed": {
        "property": "collapsed",
        "description": "to set the current status",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "collapsedWidth": {
        "property": "collapsedWidth",
        "description": "width of the collapsed sidebar, by setting to `0` a special trigger will appear",
        "type": "number",
        "default": "80",
        "version": ""
      },
      "collapsible": {
        "property": "collapsible",
        "description": "whether can be collapsed",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultCollapsed": {
        "property": "defaultCollapsed",
        "description": "to set the initial status",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "reverseArrow": {
        "property": "reverseArrow",
        "description": "reverse direction of arrow, for a sider that expands from the right",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "to customize the styles",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "color theme of the sidebar",
        "type": "string: `light` `dark`",
        "default": "`dark`",
        "version": "3.6.0"
      },
      "trigger": {
        "property": "trigger",
        "description": "specify the customized trigger, set to null to hide the trigger",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "width of the sidebar",
        "type": "number\\|string",
        "default": "200",
        "version": ""
      },
      "onCollapse": {
        "property": "onCollapse",
        "description": "the callback function, executed by clicking the trigger or activating the responsive layout",
        "type": "(collapsed, type) => {}",
        "default": "-",
        "version": ""
      },
      "onBreakpoint": {
        "property": "onBreakpoint",
        "description": "the callback function, executed when [breakpoints](/components/grid#API) changed",
        "type": "(broken) => {}",
        "default": "-",
        "version": "3.7.0"
      },
      "zeroWidthTriggerStyle": {
        "property": "zeroWidthTriggerStyle",
        "description": "to customize the styles of the special trigger that appears when `collapsedWidth` is 0",
        "type": "object",
        "default": "-",
        "version": "3.24.0"
      }
    },
    "List": {
      "bordered": {
        "property": "bordered",
        "description": "Toggles rendering of the border around the list",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "List footer renderer",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "grid": {
        "property": "grid",
        "description": "The grid type of list. You can set grid to something like {gutter: 16, column: 4}",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "header": {
        "property": "header",
        "description": "List header renderer",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "itemLayout": {
        "property": "itemLayout",
        "description": "The layout of list, default is `horizontal`, If a vertical list is desired, set the itemLayout property to `vertical`",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "rowKey": {
        "property": "rowKey",
        "description": "Item's unique key, could be a string or function that returns a string",
        "type": "string\\|Function(record):string",
        "default": "`key`",
        "version": "3.12.0"
      },
      "loading": {
        "property": "loading",
        "description": "Shows a loading indicator while the contents of the list are being fetched",
        "type": "boolean\\|[object](https://ant.design/components/spin-cn/#API) ([more](https://github.com/ant-design/ant-design/issues/8659))",
        "default": "false",
        "version": ""
      },
      "loadMore": {
        "property": "loadMore",
        "description": "Shows a load more content",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "i18n text including empty text",
        "type": "object",
        "default": "emptyText: 'No Data' <br>",
        "version": "3.4.2"
      },
      "pagination": {
        "property": "pagination",
        "description": "Pagination [config](https://ant.design/components/pagination/), hide it by setting it to false",
        "type": "boolean \\| object",
        "default": "false",
        "version": ""
      },
      "split": {
        "property": "split",
        "description": "Toggles rendering of the split under the list item",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "dataSource array for list",
        "type": "any\\[]",
        "default": "-",
        "version": "3.20.1"
      },
      "renderItem": {
        "property": "renderItem",
        "description": "customize list item when using `dataSource`",
        "type": "`item => ReactNode`",
        "default": "-",
        "version": "3.20.1"
      }
    },
    "List.Item": {
      "actions": {
        "property": "actions",
        "description": "The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right.",
        "type": "Array<ReactNode>",
        "default": "-",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right.",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "List.Item.Meta": {
      "avatar": {
        "property": "avatar",
        "description": "The avatar of list item",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "The description of list item",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "The title of list item",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Mention": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "default value",
        "type": "ContentState, you can use `Mention.toContentState` to convert text to `ContentState`",
        "default": "null",
        "version": ""
      },
      "defaultSuggestions": {
        "property": "defaultSuggestions",
        "description": "default suggestion content",
        "type": "Array&lt;string\\|Mention.Nav>",
        "default": "\\[]",
        "version": "3.12.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "Tell if the input is disabled.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getSuggestionContainer": {
        "property": "getSuggestionContainer",
        "description": "rendered to the root of the menu. Default rendered to the body dom. If gets any problem of the menu while scrolling. Try to make the root the dom scrolled, and make it position relative.",
        "type": "function",
        "default": "() => document.body",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "loading mode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "multiLines": {
        "property": "multiLines",
        "description": "multilines mode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "suggestion when suggestions empty",
        "type": "string",
        "default": "'No matches found'",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "placeholder of input",
        "type": "string",
        "default": "null",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "The position of the suggestion relative to the target, which can be one of `top` and `bottom`",
        "type": "string",
        "default": "'bottom'.",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "character which will trigger Mention to show mention list",
        "type": "string or Array&lt;string>",
        "default": "'@'",
        "version": ""
      },
      "readOnly": {
        "property": "readOnly",
        "description": "Tell if the input is readonly.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "suggestions": {
        "property": "suggestions",
        "description": "suggestion content",
        "type": "Array&lt;string\\|Mention.Nav>",
        "default": "\\[]",
        "version": ""
      },
      "suggestionStyle": {
        "property": "suggestionStyle",
        "description": "style of suggestion container",
        "type": "object",
        "default": "{}",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "core state of mention",
        "type": "ContentState",
        "default": "null",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "Callback function called when mention component blur",
        "type": "function(e)",
        "default": "null",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback function called when content of input changes",
        "type": "function(contentState: ContentState)",
        "default": "null",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "Callback function called when mention component get focus",
        "type": "function",
        "default": "null",
        "version": ""
      },
      "onSearchChange": {
        "property": "onSearchChange",
        "description": "Callback function called when search content changes",
        "type": "function(value:string, trigger: string)",
        "default": "\\[]",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Callback function called when select from suggestions",
        "type": "function(suggestion: string, data?: any)",
        "default": "null",
        "version": ""
      }
    },
    "Menu": {
      "defaultOpenKeys": {
        "property": "defaultOpenKeys",
        "description": "Array with the keys of default opened sub menus",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "defaultSelectedKeys": {
        "property": "defaultSelectedKeys",
        "description": "Array with the keys of default selected menu items",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "forceSubMenuRender": {
        "property": "forceSubMenuRender",
        "description": "Render submenu into DOM before it becomes visible",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "inlineCollapsed": {
        "property": "inlineCollapsed",
        "description": "Specifies the collapsed status when menu is inline mode",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "inlineIndent": {
        "property": "inlineIndent",
        "description": "Indent (in pixels) of inline menu items on each level",
        "type": "number",
        "default": "24",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "Type of menu; `vertical`, `horizontal`, or `inline`",
        "type": "string: `vertical` \\| `horizontal` \\| `inline`",
        "default": "`vertical`",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "Allows selection of multiple items",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "openKeys": {
        "property": "openKeys",
        "description": "Array with the keys of currently opened sub-menus",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "Allows selecting menu items",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "Array with the keys of currently selected menu items",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "Style of the root node",
        "type": "object",
        "default": "",
        "version": ""
      },
      "subMenuCloseDelay": {
        "property": "subMenuCloseDelay",
        "description": "Delay time to hide submenu when mouse leaves (in seconds)",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "subMenuOpenDelay": {
        "property": "subMenuOpenDelay",
        "description": "Delay time to show submenu when mouse enters, (in seconds)",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "Color theme of the menu",
        "type": "string: `light` \\| `dark`",
        "default": "`light`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "Called when a menu item is clicked",
        "type": "function({ item, key, keyPath, domEvent })",
        "default": "-",
        "version": ""
      },
      "onDeselect": {
        "property": "onDeselect",
        "description": "Called when a menu item is deselected (multiple mode only)",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "Called when sub-menus are opened or closed",
        "type": "function(openKeys: string\\[])",
        "default": "noop",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Called when a menu item is selected",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default": "none",
        "version": ""
      },
      "overflowedIndicator": {
        "property": "overflowedIndicator",
        "description": "Customized icon when menu is collapsed",
        "type": "ReactNode",
        "default": "-",
        "version": "3.16.0"
      }
    },
    "Menu.Item": {
      "disabled": {
        "property": "disabled",
        "description": "Whether menu item is disabled",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Unique ID of the menu item",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Set display title for collapsed item",
        "type": "string",
        "default": "",
        "version": "3.11.0"
      }
    },
    "Menu.SubMenu": {
      "popupClassName": {
        "property": "popupClassName",
        "description": "Sub-menu class name",
        "type": "string",
        "default": "",
        "version": "3.22.0"
      },
      "children": {
        "property": "children",
        "description": "Sub-menus or sub-menu items",
        "type": "Array&lt;MenuItem\\|SubMenu>",
        "default": "",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether sub-menu is disabled",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Unique ID of the sub-menu",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Title of the sub-menu",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "onTitleClick": {
        "property": "onTitleClick",
        "description": "Callback executed when the sub-menu title is clicked",
        "type": "function({ key, domEvent })",
        "default": "",
        "version": ""
      }
    },
    "Modal": {
      "afterClose": {
        "property": "afterClose",
        "description": "Specify a function that will be called when modal is closed completely.",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "Body style for modal body element. Such as height, padding etc.",
        "type": "object",
        "default": "{}",
        "version": ""
      },
      "cancelText": {
        "property": "cancelText",
        "description": "Text of the Cancel button",
        "type": "string\\|ReactNode",
        "default": "`Cancel`",
        "version": ""
      },
      "centered": {
        "property": "centered",
        "description": "Centered Modal",
        "type": "Boolean",
        "default": "`false`",
        "version": "3.8.0"
      },
      "closable": {
        "property": "closable",
        "description": "Whether a close (x) button is visible on top right of the modal dialog or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "custom close icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.22.0"
      },
      "confirmLoading": {
        "property": "confirmLoading",
        "description": "Whether to apply loading visual effect for OK button or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "destroyOnClose": {
        "property": "destroyOnClose",
        "description": "Whether to unmount child components on onClose",
        "type": "boolean",
        "default": "false",
        "version": "3.1.0"
      },
      "footer": {
        "property": "footer",
        "description": "Footer content, set as `footer={null}` when you don't need default buttons",
        "type": "string\\|ReactNode",
        "default": "OK and Cancel buttons",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "Force render Modal",
        "type": "boolean",
        "default": "false",
        "version": "3.12.0"
      },
      "getContainer": {
        "property": "getContainer",
        "description": "Return the mount node for Modal",
        "type": "HTMLElement \\| `() => HTMLElement` \\| Selectors \\| false",
        "default": "document.body",
        "version": "3.20.2"
      },
      "mask": {
        "property": "mask",
        "description": "Whether show mask or not.",
        "type": "Boolean",
        "default": "true",
        "version": ""
      },
      "maskClosable": {
        "property": "maskClosable",
        "description": "Whether to close the modal dialog when the mask (area outside the modal) is clicked",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskStyle": {
        "property": "maskStyle",
        "description": "Style for modal's mask element.",
        "type": "object",
        "default": "{}",
        "version": ""
      },
      "okText": {
        "property": "okText",
        "description": "Text of the OK button",
        "type": "string\\|ReactNode",
        "default": "`OK`",
        "version": ""
      },
      "okType": {
        "property": "okType",
        "description": "Button `type` of the OK button",
        "type": "string",
        "default": "`primary`",
        "version": ""
      },
      "okButtonProps": {
        "property": "okButtonProps",
        "description": "The ok button props",
        "type": "[ButtonProps](/components/button)",
        "default": "-",
        "version": "3.7.0"
      },
      "cancelButtonProps": {
        "property": "cancelButtonProps",
        "description": "The cancel button props",
        "type": "[ButtonProps](/components/button)",
        "default": "-",
        "version": "3.7.0"
      },
      "style": {
        "property": "style",
        "description": "Style of floating layer, typically used at least for adjusting the position.",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "The modal dialog's title",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "Whether the modal dialog is visible or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "Width of the modal dialog",
        "type": "string\\|number",
        "default": "520",
        "version": ""
      },
      "wrapClassName": {
        "property": "wrapClassName",
        "description": "The class name of the container of the modal dialog",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "zIndex": {
        "property": "zIndex",
        "description": "The `z-index` of the Modal",
        "type": "Number",
        "default": "1000",
        "version": ""
      },
      "onCancel": {
        "property": "onCancel",
        "description": "Specify a function that will be called when a user clicks mask, close button on top right or Cancel button",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "Specify a function that will be called when a user clicks the OK button",
        "type": "function(e)",
        "default": "-",
        "version": ""
      }
    },
    "Menu.ItemGroup": {
      "children": {
        "property": "children",
        "description": "sub-menu items",
        "type": "MenuItem\\[]",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "title of the group",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      }
    },
    "PageHeader": {
      "title": {
        "property": "title",
        "description": "Custom title text",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "subTitle": {
        "property": "subTitle",
        "description": "Custom subtitle text",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "ghost": {
        "property": "ghost",
        "description": "PageHeader type, will change background color",
        "type": "boolean",
        "default": "true",
        "version": "3.24.0"
      },
      "avatar": {
        "property": "avatar",
        "description": "Avatar next to the title bar",
        "type": "[avatar props](/components/avatar/)",
        "default": "-",
        "version": "3.22.0"
      },
      "backIcon": {
        "property": "backIcon",
        "description": "Custom back icon, if false the back icon will not be displayed",
        "type": "ReactNode",
        "default": "`<Icon type=\"arrow-left\" />`",
        "version": "3.14.0"
      },
      "tags": {
        "property": "tags",
        "description": "Tag list next to title",
        "type": "[Tag](https://ant.design/components/tag-cn/)\\[] \\| [Tag](https://ant.design/components/tag-cn/)",
        "default": "-",
        "version": "3.14.0"
      },
      "extra": {
        "property": "extra",
        "description": "Operating area, at the end of the line of the title line",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "breadcrumb": {
        "property": "breadcrumb",
        "description": "Breadcrumb configuration",
        "type": "[breadcrumb](https://ant.design/components/breadcrumb-cn/)",
        "default": "-",
        "version": "3.14.0"
      },
      "footer": {
        "property": "footer",
        "description": "PageHeader's footer, generally used to render TabBar",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "onBack": {
        "property": "onBack",
        "description": "Back icon click event",
        "type": "`()=>void`",
        "default": "`()=>history.back()`",
        "version": "3.14.0"
      }
    },
    "Pagination": {
      "current": {
        "property": "current",
        "description": "Current page number",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "defaultCurrent": {
        "property": "defaultCurrent",
        "description": "Default initial page number",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "defaultPageSize": {
        "property": "defaultPageSize",
        "description": "Default number of data items per page",
        "type": "number",
        "default": "10",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable pagination",
        "type": "boolean",
        "default": "-",
        "version": "3.18.0"
      },
      "hideOnSinglePage": {
        "property": "hideOnSinglePage",
        "description": "Whether to hide pager on single page",
        "type": "boolean",
        "default": "false",
        "version": "3.1.0"
      },
      "itemRender": {
        "property": "itemRender",
        "description": "To customize item's innerHTML",
        "type": "(page, type: 'page' \\| 'prev' \\| 'next', originalElement) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "pageSize": {
        "property": "pageSize",
        "description": "Number of data items per page",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "pageSizeOptions": {
        "property": "pageSizeOptions",
        "description": "Specify the sizeChanger options",
        "type": "string\\[]",
        "default": "\\['10', '20', '30', '40']",
        "version": ""
      },
      "showLessItems": {
        "property": "showLessItems",
        "description": "Show less page items",
        "type": "boolean",
        "default": "false",
        "version": "3.16.3"
      },
      "showQuickJumper": {
        "property": "showQuickJumper",
        "description": "Determine whether you can jump to pages directly",
        "type": "boolean \\| `{ goButton: ReactNode }`",
        "default": "false",
        "version": ""
      },
      "showSizeChanger": {
        "property": "showSizeChanger",
        "description": "Determine whether `pageSize` can be changed",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showTitle": {
        "property": "showTitle",
        "description": "Show page item's title",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "showTotal": {
        "property": "showTotal",
        "description": "To display the total number and range",
        "type": "Function(total, range)",
        "default": "-",
        "version": ""
      },
      "simple": {
        "property": "simple",
        "description": "Whether to use simple mode",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Specify the size of `Pagination`, can be set to `small`",
        "type": "string",
        "default": "\"\"",
        "version": ""
      },
      "total": {
        "property": "total",
        "description": "Total number of data items",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Called when the page number is changed, and it takes the resulting page number and pageSize as its arguments",
        "type": "Function(page, pageSize)",
        "default": "noop",
        "version": ""
      },
      "onShowSizeChange": {
        "property": "onShowSizeChange",
        "description": "Called when `pageSize` is changed",
        "type": "Function(current, size)",
        "default": "noop",
        "version": ""
      }
    },
    "Popconfirm": {
      "cancelText": {
        "property": "cancelText",
        "description": "text of the Cancel button",
        "type": "string",
        "default": "`Cancel`",
        "version": ""
      },
      "okText": {
        "property": "okText",
        "description": "text of the Confirm button",
        "type": "string",
        "default": "`OK`",
        "version": ""
      },
      "okType": {
        "property": "okType",
        "description": "Button `type` of the Confirm button",
        "type": "string",
        "default": "`primary`",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "title of the confirmation box",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "onCancel": {
        "property": "onCancel",
        "description": "callback of cancel",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onConfirm": {
        "property": "onConfirm",
        "description": "callback of confirmation",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "customize icon of confirmation",
        "type": "ReactNode",
        "default": "&lt;Icon type=\"exclamation-circle\" />",
        "version": "3.8.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "is show popconfirm when click its childrenNode",
        "type": "boolean",
        "default": "false",
        "version": "3.19.8"
      }
    },
    "Popover": {
      "content": {
        "property": "content",
        "description": "Content of the card",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Title of the card",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Progress": {
      "type": {
        "property": "type",
        "description": "to set the type, options: `line` `circle` `dashboard`",
        "type": "string",
        "default": "`line`",
        "version": ""
      },
      "format": {
        "property": "format",
        "description": "template function of the content",
        "type": "function(percent, successPercent)",
        "default": "`percent => percent + '%'`",
        "version": ""
      },
      "percent": {
        "property": "percent",
        "description": "to set the completion percentage",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "showInfo": {
        "property": "showInfo",
        "description": "whether to display the progress value and the status icon",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "to set the status of the Progress, options: `success` `exception` `normal` `active`(line only)",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "strokeLinecap": {
        "property": "strokeLinecap",
        "description": "to set the style of the progress linecap",
        "type": "Enum{ 'round', 'square' }",
        "default": "`round`",
        "version": "3.8.0"
      },
      "strokeColor": {
        "property": "strokeColor",
        "description": "color of progress bar",
        "type": "string",
        "default": "-",
        "version": "3.7.0"
      },
      "successPercent": {
        "property": "successPercent",
        "description": "segmented success percent",
        "type": "number",
        "default": "0",
        "version": "3.2.0"
      }
    },
    "Radio": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "Specifies whether the radio is selected.",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "Specifies the initial state: whether or not the radio is selected.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable radio",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "According to value for comparison, to determine whether the selected",
        "type": "any",
        "default": "-",
        "version": ""
      }
    },
    "Radio.Group": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "Default selected value",
        "type": "any",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable all radio buttons",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "The `name` property of all `input[type=\"radio\"]` children",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "set children optional",
        "type": "string\\[] \\| Array&lt;{ label: string value: string disabled?: boolean }>",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "size for radio button style",
        "type": "`large` \\| `default` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Used for setting the currently selected value.",
        "type": "any",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "The callback function that is triggered when the state changes.",
        "type": "Function(e:Event)",
        "default": "-",
        "version": ""
      },
      "buttonStyle": {
        "property": "buttonStyle",
        "description": "style type of radio button",
        "type": "`outline` \\| `solid`",
        "default": "`outline`",
        "version": "3.7.0"
      }
    },
    "Result": {
      "title": {
        "property": "title",
        "description": "title string",
        "type": "ReactNode",
        "default": "-",
        "version": "3.20.0"
      },
      "subTitle": {
        "property": "subTitle",
        "description": "subTitle string",
        "type": "ReactNode",
        "default": "-",
        "version": "3.20.0"
      },
      "status": {
        "property": "status",
        "description": "result status,decide icons and colors",
        "type": "\\`'success'",
        "default": "'error'",
        "version": "'info'"
      },
      "icon": {
        "property": "icon",
        "description": "custom back icon",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.20.0"
      },
      "extra": {
        "property": "extra",
        "description": "operating area",
        "type": "ReactNode",
        "default": "-",
        "version": "3.20.0"
      }
    },
    "Select.Option": {
      "disabled": {
        "property": "disabled",
        "description": "Disable this option",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Same usage as `value`. If React request you to set this property, you can set it to value of option, and then omit value property.",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "`title` of Select after select this Option",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "default to filter with this property",
        "type": "string\\|number",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "additional class to option",
        "type": "string",
        "default": "-",
        "version": "3.10.1"
      }
    },
    "Rate": {
      "allowClear": {
        "property": "allowClear",
        "description": "whether to allow clear when click again",
        "type": "boolean",
        "default": "true",
        "version": "3.1.0"
      },
      "allowHalf": {
        "property": "allowHalf",
        "description": "whether to allow semi selection",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "character": {
        "property": "character",
        "description": "custom character of rate",
        "type": "ReactNode",
        "default": "`<Icon type=\"star\" />`",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "custom class name of rate",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "count": {
        "property": "count",
        "description": "star count",
        "type": "number",
        "default": "5",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "default value",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "read only, unable to interact",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "custom style object of rate",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "tooltips": {
        "property": "tooltips",
        "description": "Customize tooltip by each character",
        "type": "string\\[]",
        "default": "-",
        "version": "3.12.0"
      },
      "value": {
        "property": "value",
        "description": "current value",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "callback when component lose focus",
        "type": "Function()",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "callback when select value",
        "type": "Function(value: number)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "callback when component get focus",
        "type": "Function()",
        "default": "-",
        "version": ""
      },
      "onHoverChange": {
        "property": "onHoverChange",
        "description": "callback when hover item",
        "type": "Function(value: number)",
        "default": "-",
        "version": ""
      },
      "onKeyDown": {
        "property": "onKeyDown",
        "description": "callback when keydown on component",
        "type": "Function(event)",
        "default": "-",
        "version": ""
      }
    },
    "Select": {
      "allowClear": {
        "property": "allowClear",
        "description": "Show clear button.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoClearSearchValue": {
        "property": "autoClearSearchValue",
        "description": "Whether the current search will be cleared on selecting an item. Only applies when `mode` is set to `multiple` or `tags`.",
        "type": "boolean",
        "default": "true",
        "version": "3.10.0"
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "Get focus by default",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultActiveFirstOption": {
        "property": "defaultActiveFirstOption",
        "description": "Whether active first option by default",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "Initial selected option.",
        "type": "string\\|string\\[]<br />number\\|number\\[]<br />LabeledValue\\|LabeledValue\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether disabled select",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dropdownClassName": {
        "property": "dropdownClassName",
        "description": "className of dropdown menu",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "dropdownMatchSelectWidth": {
        "property": "dropdownMatchSelectWidth",
        "description": "Whether dropdown's width is same with select.",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "Customize dropdown content",
        "type": "(menuNode: ReactNode, props) => ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "dropdownStyle": {
        "property": "dropdownStyle",
        "description": "style of dropdown menu",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "dropdownMenuStyle": {
        "property": "dropdownMenuStyle",
        "description": "additional style applied to dropdown menu",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded.",
        "type": "boolean or function(inputValue, option)",
        "default": "true",
        "version": ""
      },
      "firstActiveValue": {
        "property": "firstActiveValue",
        "description": "Value of action option by default",
        "type": "string\\|string\\[]",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [Example](https://codesandbox.io/s/4j168r7jw0)",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "labelInValue": {
        "property": "labelInValue",
        "description": "whether to embed label in value, turn the format of value from `string` to `{key: string, label: ReactNode}`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "Max tag count to show",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "maxTagTextLength": {
        "property": "maxTagTextLength",
        "description": "Max tag text length to show",
        "type": "number",
        "default": "-",
        "version": "3.18.0"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "Placeholder for not showing tags",
        "type": "ReactNode/function(omittedValues)",
        "default": "-",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "Set mode of Select",
        "type": "'default' \\| 'multiple' \\| 'tags'",
        "default": "'default'",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "Specify content to show when no result matches..",
        "type": "string",
        "default": "'Not Found'",
        "version": ""
      },
      "optionFilterProp": {
        "property": "optionFilterProp",
        "description": "Which prop value of option will be used for filter if filterOption is true",
        "type": "string",
        "default": "value",
        "version": ""
      },
      "optionLabelProp": {
        "property": "optionLabelProp",
        "description": "Which prop value of option will render as content of select. [Example](https://codesandbox.io/s/antd-reproduction-template-tk678)",
        "type": "string",
        "default": "`value` for `combobox`, `children` for other modes",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "Placeholder of select",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "Whether to show the drop-down arrow",
        "type": "boolean",
        "default": "true",
        "version": "3.2.1"
      },
      "showSearch": {
        "property": "showSearch",
        "description": "Whether show search input in single mode.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Size of Select input. `default` `large` `small`",
        "type": "string",
        "default": "default",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "removeIcon": {
        "property": "removeIcon",
        "description": "The custom remove icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "The custom clear icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "menuItemSelectedIcon": {
        "property": "menuItemSelectedIcon",
        "description": "The custom menuItemSelected icon with multiple options",
        "type": "ReactNode",
        "default": "-",
        "version": "3.11.0"
      },
      "tokenSeparators": {
        "property": "tokenSeparators",
        "description": "Separator used to tokenize on tag/multiple mode",
        "type": "string\\[]",
        "default": "",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Current selected option.",
        "type": "string\\|string\\[]\\\\<br />number\\|number\\[]\\\\<br />LabeledValue\\|LabeledValue\\[]",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "Called when blur",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Called when select an option or input value change, or value of input is changed in combobox mode",
        "type": "function(value, option:Option/Array&lt;Option>)",
        "default": "-",
        "version": ""
      },
      "onDeselect": {
        "property": "onDeselect",
        "description": "Called when a option is deselected, param is the selected option's value. Only called for multiple or tags, effective in multiple or tags mode only.",
        "type": "function(string\\|number\\|LabeledValue)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "Called when focus",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onInputKeyDown": {
        "property": "onInputKeyDown",
        "description": "Called when key pressed",
        "type": "function",
        "default": "-",
        "version": "3.1.0"
      },
      "onMouseEnter": {
        "property": "onMouseEnter",
        "description": "Called when mouse enter",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onMouseLeave": {
        "property": "onMouseLeave",
        "description": "Called when mouse leave",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onPopupScroll": {
        "property": "onPopupScroll",
        "description": "Called when dropdown scrolls",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "Callback function that is fired when input changed.",
        "type": "function(value: string)",
        "default": "",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Called when a option is selected, the params are option's value (or key) and option instance.",
        "type": "function(string\\|number\\|LabeledValue, option:Option)",
        "default": "-",
        "version": ""
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "Initial open state of dropdown",
        "type": "boolean",
        "default": "-",
        "version": "3.9.3"
      },
      "open": {
        "property": "open",
        "description": "Controlled open state of dropdown",
        "type": "boolean",
        "default": "-",
        "version": "3.9.0"
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "Call when dropdown open (Supported after version 3.9.0)",
        "type": "function(open)",
        "default": "-",
        "version": "3.9.0"
      },
      "loading": {
        "property": "loading",
        "description": "indicate loading state",
        "type": "Boolean",
        "default": "false",
        "version": "3.11.0"
      }
    },
    "Select.OptGroup": {
      "key": {
        "property": "key",
        "description": "",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "label": {
        "property": "label",
        "description": "Group label",
        "type": "string\\|React.Element",
        "default": "-",
        "version": ""
      }
    },
    "Spin": {
      "delay": {
        "property": "delay",
        "description": "specifies a delay in milliseconds for loading state (prevent flush)",
        "type": "number (milliseconds)",
        "default": "-",
        "version": ""
      },
      "indicator": {
        "property": "indicator",
        "description": "React node of the spinning indicator",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "size of Spin, options: `small`, `default` and `large`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "spinning": {
        "property": "spinning",
        "description": "whether Spin is spinning",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "tip": {
        "property": "tip",
        "description": "customize description content when Spin has children",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "wrapperClassName": {
        "property": "wrapperClassName",
        "description": "className of wrapper when Spin has children",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Skeleton": {
      "active": {
        "property": "active",
        "description": "Show animation effect",
        "type": "boolean",
        "default": "false",
        "version": "3.9.0"
      },
      "avatar": {
        "property": "avatar",
        "description": "Show avatar placeholder",
        "type": "boolean \\| [SkeletonAvatarProps](#SkeletonAvatarProps)",
        "default": "false",
        "version": "3.9.0"
      },
      "loading": {
        "property": "loading",
        "description": "Display the skeleton when `true`",
        "type": "boolean",
        "default": "-",
        "version": "3.9.0"
      },
      "paragraph": {
        "property": "paragraph",
        "description": "Show paragraph placeholder",
        "type": "boolean \\| [SkeletonParagraphProps](#SkeletonParagraphProps)",
        "default": "true",
        "version": "3.9.0"
      },
      "title": {
        "property": "title",
        "description": "Show title placeholder",
        "type": "boolean \\| [SkeletonTitleProps](#SkeletonTitleProps)",
        "default": "true",
        "version": "3.9.0"
      }
    },
    "Slider": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The default value of slider. When `range` is `false`, use `number`, otherwise, use `[number, number]`",
        "type": "number\\|number\\[]",
        "default": "0 or \\[0, 0]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "If true, the slider will not be interactable.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dots": {
        "property": "dots",
        "description": "Whether the thumb can drag over tick only.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "included": {
        "property": "included",
        "description": "Make effect when `marks` not null, `true` means containment and `false` means coordinative",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "marks": {
        "property": "marks",
        "description": "Tick mark of Slider, type of key must be `number`, and must in closed interval \\[min, max], each mark can declare its own style.",
        "type": "object",
        "default": "{ number: string\\|ReactNode } or { number: { style: object, label: string\\|ReactNode } }",
        "version": ""
      },
      "max": {
        "property": "max",
        "description": "The maximum value the slider can slide to",
        "type": "number",
        "default": "100",
        "version": ""
      },
      "min": {
        "property": "min",
        "description": "The minimum value the slider can slide to.",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "range": {
        "property": "range",
        "description": "dual thumb mode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "reverse": {
        "property": "reverse",
        "description": "reverse the component",
        "type": "boolean",
        "default": "false",
        "version": "3.24.0"
      },
      "step": {
        "property": "step",
        "description": "The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When `marks` no null, `step` can be `null`.",
        "type": "number\\|null",
        "default": "1",
        "version": ""
      },
      "tipFormatter": {
        "property": "tipFormatter",
        "description": "Slider will pass its value to `tipFormatter`, and display its value in Tooltip, and hide Tooltip when return value is null.",
        "type": "Function\\|null",
        "default": "IDENTITY",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "The value of slider. When `range` is `false`, use `number`, otherwise, use `[number, number]`",
        "type": "number\\|number\\[]",
        "default": "",
        "version": ""
      },
      "vertical": {
        "property": "vertical",
        "description": "If true, the slider will be vertical.",
        "type": "Boolean",
        "default": "false",
        "version": ""
      },
      "onAfterChange": {
        "property": "onAfterChange",
        "description": "Fire when `onmouseup` is fired.",
        "type": "Function(value)",
        "default": "NOOP",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback function that is fired when the user changes the slider's value.",
        "type": "Function(value)",
        "default": "NOOP",
        "version": ""
      },
      "tooltipPlacement": {
        "property": "tooltipPlacement",
        "description": "Set Tooltip display position. Ref [`Tooltip`](/components/tooltip/).",
        "type": "string",
        "default": "",
        "version": "3.19.0"
      },
      "tooltipVisible": {
        "property": "tooltipVisible",
        "description": "If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering.",
        "type": "Boolean",
        "default": "",
        "version": "3.11.0"
      },
      "getTooltipPopupContainer": {
        "property": "getTooltipPopupContainer",
        "description": "The DOM container of the Tooltip, the default behavior is to create a div element in body.",
        "type": "Function",
        "default": "() => document.body",
        "version": "3.19.0"
      }
    },
    "Statistic": {
      "decimalSeparator": {
        "property": "decimalSeparator",
        "description": "decimal separator",
        "type": "string",
        "default": ".",
        "version": "3.13.0"
      },
      "formatter": {
        "property": "formatter",
        "description": "customize value display logic",
        "type": "(value) => ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "groupSeparator": {
        "property": "groupSeparator",
        "description": "group separator",
        "type": "string",
        "default": ",",
        "version": "3.13.0"
      },
      "precision": {
        "property": "precision",
        "description": "precision of input value",
        "type": "number",
        "default": "-",
        "version": "3.13.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "prefix node of value",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "suffix": {
        "property": "suffix",
        "description": "suffix node of value",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "title": {
        "property": "title",
        "description": "Display title",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "value": {
        "property": "value",
        "description": "Display value",
        "type": "string \\| number",
        "default": "-",
        "version": "3.13.0"
      },
      "valueStyle": {
        "property": "valueStyle",
        "description": "Set value css style",
        "type": "style",
        "default": "-",
        "version": "3.13.0"
      }
    },
    "Steps": {
      "className": {
        "property": "className",
        "description": "Additional class to Steps",
        "type": "string",
        "default": "-",
        "version": "3.11.3"
      },
      "type": {
        "property": "type",
        "description": "Type of steps, can be set to one of the following values: `default`, `navigation`",
        "type": "string",
        "default": "`default`",
        "version": "3.22.0"
      },
      "current": {
        "property": "current",
        "description": "To set the current step, counting from 0. You can overwrite this state by using `status` of `Step`",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "direction": {
        "property": "direction",
        "description": "To specify the direction of the step bar, `horizontal` or `vertical`",
        "type": "string",
        "default": "`horizontal`",
        "version": ""
      },
      "labelPlacement": {
        "property": "labelPlacement",
        "description": "Place title and description with `horizontal` or `vertical` direction",
        "type": "string",
        "default": "`horizontal`",
        "version": "3.7.3"
      },
      "progressDot": {
        "property": "progressDot",
        "description": "Steps with progress dot style, customize the progress dot by setting it to a function. labelPlacement will be `vertical`",
        "type": "Boolean or (iconDot, {index, status, title, description}) => ReactNode",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "To specify the size of the step bar, `default` and `small` are currently supported",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error`",
        "type": "string",
        "default": "`process`",
        "version": ""
      },
      "initial": {
        "property": "initial",
        "description": "Set the initial step, counting from 0",
        "type": "number",
        "default": "0",
        "version": "3.9.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "Trigger when Step is changed",
        "type": "(current) => void",
        "default": "-",
        "version": "3.19.0"
      }
    },
    "Switch": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "determine whether the `Switch` is checked",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkedChildren": {
        "property": "checkedChildren",
        "description": "content to be shown when the state is checked",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "to set the initial state",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable switch",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "loading state of switch",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "the size of the `Switch`, options: `default` `small`",
        "type": "string",
        "default": "default",
        "version": ""
      },
      "unCheckedChildren": {
        "property": "unCheckedChildren",
        "description": "content to be shown when the state is unchecked",
        "type": "string\\|ReactNode",
        "default": "",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "trigger when the checked state is changing",
        "type": "Function(checked: boolean, event: Event)",
        "default": "",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "trigger when clicked",
        "type": "Function(checked: boolean, event: Event)",
        "default": "",
        "version": "3.13.0"
      },
      "className": {
        "property": "className",
        "description": "additional class to Switch",
        "type": "string",
        "default": "-",
        "version": "3.10.1"
      }
    },
    "Statistic.Countdown": {
      "format": {
        "property": "format",
        "description": "Format as [moment](http://momentjs.com/)",
        "type": "string",
        "default": "'HH:mm:ss'",
        "version": "3.13.0"
      },
      "onFinish": {
        "property": "onFinish",
        "description": "Trigger when time's up",
        "type": "() => void",
        "default": "-",
        "version": "3.14.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "prefix node of value",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "suffix": {
        "property": "suffix",
        "description": "suffix node of value",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "title": {
        "property": "title",
        "description": "Display title",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "3.13.0"
      },
      "value": {
        "property": "value",
        "description": "Set target countdown time",
        "type": "number \\| moment",
        "default": "-",
        "version": "3.13.0"
      },
      "valueStyle": {
        "property": "valueStyle",
        "description": "Set value css style",
        "type": "style",
        "default": "-",
        "version": "3.13.0"
      }
    },
    "Steps.Step": {
      "description": {
        "property": "description",
        "description": "Description of the step, optional property",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Icon of the step, optional property",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "To specify the status. It will be automatically set by `current` of `Steps` if not configured. Optional values are: `wait` `process` `finish` `error`",
        "type": "string",
        "default": "`wait`",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Title of the step",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "subTitle": {
        "property": "subTitle",
        "description": "Subtitle of the step",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": "3.22.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable click",
        "type": "boolean",
        "default": "false",
        "version": "3.22.0"
      }
    },
    "Table": {
      "tableLayout": {
        "property": "tableLayout",
        "description": "[table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) attribute of table element",
        "type": "- \\| 'auto' \\| 'fixed'",
        "default": "-<hr />`fixed` when header/columns are fixed, or using `column.ellipsis`",
        "version": "3.24.0"
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether to show all table borders",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "childrenColumnName": {
        "property": "childrenColumnName",
        "description": "The column contains children to display",
        "type": "string\\[]",
        "default": "children",
        "version": "3.4.2"
      },
      "columns": {
        "property": "columns",
        "description": "Columns of table",
        "type": "[ColumnProps](https://git.io/JeKZW)\\[]",
        "default": "-",
        "version": ""
      },
      "components": {
        "property": "components",
        "description": "Override default table elements",
        "type": "[TableComponents](https://git.io/fANxz)",
        "default": "-",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "Data record array to be displayed",
        "type": "any\\[]",
        "default": "-",
        "version": ""
      },
      "defaultExpandAllRows": {
        "property": "defaultExpandAllRows",
        "description": "Expand all rows initially",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "defaultExpandedRowKeys": {
        "property": "defaultExpandedRowKeys",
        "description": "Initial expanded row keys",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "expandedRowKeys": {
        "property": "expandedRowKeys",
        "description": "Current expanded row keys",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "expandedRowRender": {
        "property": "expandedRowRender",
        "description": "Expanded container render for each row",
        "type": "Function(record, index, indent, expanded):ReactNode",
        "default": "-",
        "version": ""
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "Customize row expand Icon. Ref [example](http://react-component.github.io/table/examples/expandIcon.html)",
        "type": "Function(props):ReactNode",
        "default": "-",
        "version": "3.11.3"
      },
      "expandRowByClick": {
        "property": "expandRowByClick",
        "description": "Whether to expand row by clicking anywhere in the whole row",
        "type": "boolean",
        "default": "`false`",
        "version": "3.0.1"
      },
      "expandIconColumnIndex": {
        "property": "expandIconColumnIndex",
        "description": "The index of `expandIcon` which column will be inserted when `expandIconAsCell` is false",
        "type": "0",
        "default": "",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "Table footer renderer",
        "type": "Function(currentPageData)",
        "default": "",
        "version": ""
      },
      "indentSize": {
        "property": "indentSize",
        "description": "Indent size in pixels of tree data",
        "type": "number",
        "default": "15",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Loading status of table",
        "type": "boolean\\|[object](https://ant.design/components/spin-cn/#API) ([more](https://github.com/ant-design/ant-design/issues/4544#issuecomment-271533135))",
        "default": "`false`",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "i18n text including filter, sort, empty text, etc",
        "type": "object",
        "default": "filterConfirm: 'Ok' <br> filterReset: 'Reset' <br> emptyText: 'No Data' <br> [Default](https://github.com/ant-design/ant-design/issues/575#issuecomment-159169511)",
        "version": ""
      },
      "pagination": {
        "property": "pagination",
        "description": "Config of pagination. You can ref table pagination [config](#pagination) or full [`pagination`](/components/pagination/) document, hide it by setting it to `false`",
        "type": "object",
        "default": "",
        "version": ""
      },
      "rowClassName": {
        "property": "rowClassName",
        "description": "Row's className",
        "type": "Function(record, index):string",
        "default": "-",
        "version": ""
      },
      "rowKey": {
        "property": "rowKey",
        "description": "Row's unique key, could be a string or function that returns a string",
        "type": "string\\|Function(record):string",
        "default": "`key`",
        "version": ""
      },
      "rowSelection": {
        "property": "rowSelection",
        "description": "Row selection [config](#rowSelection)",
        "type": "object",
        "default": "null",
        "version": ""
      },
      "scroll": {
        "property": "scroll",
        "description": "Whether the table can be scrollable, [config](#scroll)",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "showHeader": {
        "property": "showHeader",
        "description": "Whether to show table header",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Size of table",
        "type": "`default` \\| `middle` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Table title renderer",
        "type": "Function(currentPageData)",
        "default": "",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback executed when pagination, filters or sorter is changed",
        "type": "Function(pagination, filters, sorter, extra: { currentDataSource: \\[] })",
        "default": "",
        "version": ""
      },
      "onExpand": {
        "property": "onExpand",
        "description": "Callback executed when the row expand icon is clicked",
        "type": "Function(expanded, record)",
        "default": "",
        "version": ""
      },
      "onExpandedRowsChange": {
        "property": "onExpandedRowsChange",
        "description": "Callback executed when the expanded rows change",
        "type": "Function(expandedRows)",
        "default": "",
        "version": ""
      },
      "onHeaderRow": {
        "property": "onHeaderRow",
        "description": "Set props on per header row",
        "type": "Function(column, index)",
        "default": "-",
        "version": ""
      },
      "onRow": {
        "property": "onRow",
        "description": "Set props on per row",
        "type": "Function(record, index)",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "the render container of dropdowns in table",
        "type": "(triggerNode) => HTMLElement",
        "default": "`() => TableHtmlElement`",
        "version": "3.21.0"
      }
    },
    "Table.Column": {
      "align": {
        "property": "align",
        "description": "specify which way that column is aligned",
        "type": "'left' \\| 'right' \\| 'center'",
        "default": "'left'",
        "version": "3.3.2"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "ellipsize cell content, not working with sorter and filters for now.<br />tableLayout would be `fixed` when `ellipsis` is true.",
        "type": "boolean",
        "default": "false",
        "version": "3.24.0"
      },
      "className": {
        "property": "className",
        "description": "className of this column",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "colSpan": {
        "property": "colSpan",
        "description": "Span of this column's title",
        "type": "number",
        "default": "",
        "version": ""
      },
      "dataIndex": {
        "property": "dataIndex",
        "description": "Display field of the data record, could be set like `a.b.c`, `a[0].b.c[1]`",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "defaultFilteredValue": {
        "property": "defaultFilteredValue",
        "description": "Default filtered values",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "defaultSortOrder": {
        "property": "defaultSortOrder",
        "description": "Default order of sorted values",
        "type": "'ascend' \\| 'descend'",
        "default": "-",
        "version": ""
      },
      "filterDropdown": {
        "property": "filterDropdown",
        "description": "Customized filter overlay",
        "type": "React.ReactNode \\| (props: [FilterDropdownProps](https://git.io/fjP5h)) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "filterDropdownVisible": {
        "property": "filterDropdownVisible",
        "description": "Whether `filterDropdown` is visible",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "filtered": {
        "property": "filtered",
        "description": "Whether the `dataSource` is filtered",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "filteredValue": {
        "property": "filteredValue",
        "description": "Controlled filtered value, filter icon will highlight",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "filterIcon": {
        "property": "filterIcon",
        "description": "Customized filter icon",
        "type": "ReactNode\\|(filtered: boolean) => ReactNode",
        "default": "`false`",
        "version": ""
      },
      "filterMultiple": {
        "property": "filterMultiple",
        "description": "Whether multiple filters can be selected",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "filters": {
        "property": "filters",
        "description": "Filter menu config",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "fixed": {
        "property": "fixed",
        "description": "Set column to be fixed: `true`(same as left) `'left'` `'right'`",
        "type": "boolean\\|string",
        "default": "`false`",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Unique key of this column, you can ignore this prop if you've set a unique `dataIndex`",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "render": {
        "property": "render",
        "description": "Renderer of the table cell. The return value should be a ReactNode, or an object for [colSpan/rowSpan config](#components-table-demo-colspan-rowspan)",
        "type": "Function(text, record, index) {}",
        "default": "-",
        "version": ""
      },
      "sorter": {
        "property": "sorter",
        "description": "Sort function for local sort, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction. If you need sort buttons only, set to `true`",
        "type": "Function\\|boolean",
        "default": "-",
        "version": ""
      },
      "sortOrder": {
        "property": "sortOrder",
        "description": "Order of sorted values: `'ascend'` `'descend'` `false`",
        "type": "boolean\\|string",
        "default": "-",
        "version": ""
      },
      "sortDirections": {
        "property": "sortDirections",
        "description": "supported sort way, could be `'ascend'`, `'descend'`",
        "type": "Array",
        "default": "`['ascend', 'descend']`",
        "version": "3.15.2"
      },
      "title": {
        "property": "title",
        "description": "Title of this column",
        "type": "ReactNode\\|({ sortOrder, sortColumn, filters }) => ReactNode",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "Width of this column ([width not working?](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241))",
        "type": "string\\|number",
        "default": "-",
        "version": ""
      },
      "onCell": {
        "property": "onCell",
        "description": "Set props on per cell",
        "type": "Function(record, rowIndex)",
        "default": "-",
        "version": ""
      },
      "onFilter": {
        "property": "onFilter",
        "description": "Callback executed when the confirm filter button is clicked",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "onFilterDropdownVisibleChange": {
        "property": "onFilterDropdownVisibleChange",
        "description": "Callback executed when `filterDropdownVisible` is changed",
        "type": "function(visible) {}",
        "default": "-",
        "version": ""
      },
      "onHeaderCell": {
        "property": "onHeaderCell",
        "description": "Set props on per header cell",
        "type": "Function(column)",
        "default": "-",
        "version": ""
      }
    },
    "Table.ColumnGroup": {
      "title": {
        "property": "title",
        "description": "Title of the column group",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Tabs": {
      "activeKey": {
        "property": "activeKey",
        "description": "Current TabPane's key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "animated": {
        "property": "animated",
        "description": "Whether to change tabs with animation. Only works while `tabPosition=\"top\"\\|\"bottom\"`",
        "type": "boolean \\| {inkBar:boolean, tabPane:boolean}",
        "default": "`true`, `false` when `type=\"card\"`",
        "version": ""
      },
      "renderTabBar": {
        "property": "renderTabBar",
        "description": "replace the TabBar",
        "type": "(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement",
        "default": "-",
        "version": "3.9.0"
      },
      "defaultActiveKey": {
        "property": "defaultActiveKey",
        "description": "Initial active TabPane's key, if `activeKey` is not set.",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hideAdd": {
        "property": "hideAdd",
        "description": "Hide plus icon or not. Only works while `type=\"editable-card\"`",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "preset tab bar size",
        "type": "`large` \\| `default` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "tabBarExtraContent": {
        "property": "tabBarExtraContent",
        "description": "Extra content in tab bar",
        "type": "React.ReactNode",
        "default": "-",
        "version": ""
      },
      "tabBarGutter": {
        "property": "tabBarGutter",
        "description": "The gap between tabs",
        "type": "number",
        "default": "-",
        "version": "3.2.0"
      },
      "tabBarStyle": {
        "property": "tabBarStyle",
        "description": "Tab bar style object",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "tabPosition": {
        "property": "tabPosition",
        "description": "Position of tabs",
        "type": "`top` \\| `right` \\| `bottom` \\| `left`",
        "default": "`top`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Basic style of tabs",
        "type": "`line` \\| `card` \\| `editable-card`",
        "default": "`line`",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback executed when active tab is changed",
        "type": "Function(activeKey) {}",
        "default": "-",
        "version": ""
      },
      "onEdit": {
        "property": "onEdit",
        "description": "Callback executed when tab is added or removed. Only works while `type=\"editable-card\"`",
        "type": "(targetKey, action): void",
        "default": "-",
        "version": ""
      },
      "onNextClick": {
        "property": "onNextClick",
        "description": "Callback executed when next button is clicked",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "onPrevClick": {
        "property": "onPrevClick",
        "description": "Callback executed when prev button is clicked",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "onTabClick": {
        "property": "onTabClick",
        "description": "Callback executed when tab is clicked",
        "type": "Function(key: string, event: MouseEvent)",
        "default": "-",
        "version": ""
      }
    },
    "Tabs.TabPane": {
      "forceRender": {
        "property": "forceRender",
        "description": "Forced render of content in tabs, not lazy render after clicking on tabs",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "TabPane's key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "tab": {
        "property": "tab",
        "description": "Show text in TabPane's head",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Tag": {
      "afterClose": {
        "property": "afterClose",
        "description": "Callback executed when close animation is completed, please use `onClose`, we will remove this in the next version",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "Whether the Tag can be closed",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "color": {
        "property": "color",
        "description": "Color of the Tag",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onClose": {
        "property": "onClose",
        "description": "Callback executed when tag is closed",
        "type": "(e) => void",
        "default": "-",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "Whether the Tag is closed or not",
        "type": "boolean",
        "default": "`true`",
        "version": "3.7.0"
      }
    },
    "TimePicker": {
      "addon": {
        "property": "addon",
        "description": "called from timepicker panel to render some addon to its bottom",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "allow clearing text",
        "type": "boolean",
        "default": "true",
        "version": "3.13.0"
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "className of picker",
        "type": "string",
        "default": "''",
        "version": ""
      },
      "clearText": {
        "property": "clearText",
        "description": "clear tooltip of icon",
        "type": "string",
        "default": "clear",
        "version": ""
      },
      "defaultOpenValue": {
        "property": "defaultOpenValue",
        "description": "default open panel value, used to set utcOffset,locale if value/defaultValue absent",
        "type": "[moment](http://momentjs.com/)",
        "default": "moment()",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "to set default time",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "determine whether the TimePicker is disabled",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabledHours": {
        "property": "disabledHours",
        "description": "to specify the hours that cannot be selected",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "disabledMinutes": {
        "property": "disabledMinutes",
        "description": "to specify the minutes that cannot be selected",
        "type": "function(selectedHour)",
        "default": "-",
        "version": ""
      },
      "disabledSeconds": {
        "property": "disabledSeconds",
        "description": "to specify the seconds that cannot be selected",
        "type": "function(selectedHour, selectedMinute)",
        "default": "-",
        "version": ""
      },
      "format": {
        "property": "format",
        "description": "to set the time format",
        "type": "string",
        "default": "\"HH:mm:ss\"",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "to set the container of the floating layer, while the default is to create a div element in body",
        "type": "function(trigger)",
        "default": "-",
        "version": ""
      },
      "hideDisabledOptions": {
        "property": "hideDisabledOptions",
        "description": "hide the options that can not be selected",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "hourStep": {
        "property": "hourStep",
        "description": "interval between hours in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "inputReadOnly": {
        "property": "inputReadOnly",
        "description": "Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices)",
        "type": "boolean",
        "default": "false",
        "version": "3.3.0"
      },
      "minuteStep": {
        "property": "minuteStep",
        "description": "interval between minutes in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "whether to popup panel",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "display when there's no value",
        "type": "string",
        "default": "\"Select a time\"",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "className of panel",
        "type": "string",
        "default": "''",
        "version": ""
      },
      "popupStyle": {
        "property": "popupStyle",
        "description": "style of panel",
        "type": "object",
        "default": "-",
        "version": "3.12.0"
      },
      "secondStep": {
        "property": "secondStep",
        "description": "interval between seconds in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "The custom clear icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.14.0"
      },
      "use12Hours": {
        "property": "use12Hours",
        "description": "display as 12 hours format, with default format `h:mm:ss a`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "to set time",
        "type": "[moment](http://momentjs.com/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "a callback function, can be executed when the selected time is changing",
        "type": "function(time: moment, timeString: string): void",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "a callback function which will be called while panel opening/closing",
        "type": "(open: boolean): void",
        "default": "-",
        "version": ""
      }
    },
    "Tag.CheckableTag": {
      "checked": {
        "property": "checked",
        "description": "Checked status of Tag",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback executed when Tag is checked/unchecked",
        "type": "(checked) => void",
        "default": "-",
        "version": ""
      }
    },
    "Timeline.Item": {
      "color": {
        "property": "color",
        "description": "Set the circle's color to `blue`, `red`, `green`, `gray` or other custom colors",
        "type": "string",
        "default": "`blue`",
        "version": ""
      },
      "dot": {
        "property": "dot",
        "description": "Customize timeline dot",
        "type": "string\\|ReactNode",
        "default": "-",
        "version": ""
      },
      "position": {
        "property": "position",
        "description": "Customize node position",
        "type": "`left` \\| `right`",
        "default": "-",
        "version": "3.17.0"
      }
    },
    "Tooltip": {
      "title": {
        "property": "title",
        "description": "The text shown in the tooltip",
        "type": "string\\|ReactNode\\|() => ReactNode",
        "default": "-",
        "version": ""
      },
      "arrowPointAtCenter": {
        "property": "arrowPointAtCenter",
        "description": "Whether the arrow is pointed at the center of target, supported after `antd@1.11+`",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "autoAdjustOverflow": {
        "property": "autoAdjustOverflow",
        "description": "Whether to adjust popup placement automatically when popup is off screen",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "defaultVisible": {
        "property": "defaultVisible",
        "description": "Whether the floating tooltip card is visible by default",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "The DOM container of the tip, the default behavior is to create a `div` element in `body`",
        "type": "Function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "mouseEnterDelay": {
        "property": "mouseEnterDelay",
        "description": "Delay in seconds, before tooltip is shown on mouse enter",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "mouseLeaveDelay": {
        "property": "mouseLeaveDelay",
        "description": "Delay in seconds, before tooltip is hidden on mouse leave",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "overlayClassName": {
        "property": "overlayClassName",
        "description": "Class name of the tooltip card",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "overlayStyle": {
        "property": "overlayStyle",
        "description": "Style of the tooltip card",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom`",
        "type": "string",
        "default": "`top`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "Tooltip trigger mode",
        "type": "`hover` \\| `focus` \\| `click` \\| `contextMenu`",
        "default": "`hover`",
        "version": ""
      },
      "visible": {
        "property": "visible",
        "description": "Whether the floating tooltip card is visible or not",
        "type": "boolean",
        "default": "`false`",
        "version": ""
      },
      "onVisibleChange": {
        "property": "onVisibleChange",
        "description": "Callback executed when visibility of the tooltip card is changed",
        "type": "(visible) => void",
        "default": "-",
        "version": ""
      },
      "align": {
        "property": "align",
        "description": "this value will be merged into placement's config, please refer to the settings [rc-tooltip](https://github.com/react-component/tooltip)",
        "type": "Object",
        "default": "-",
        "version": "3.10.0"
      }
    },
    "Timeline": {
      "pending": {
        "property": "pending",
        "description": "Set the last ghost node's existence or its content",
        "type": "boolean\\|string\\|ReactNode",
        "default": "`false`",
        "version": ""
      },
      "pendingDot": {
        "property": "pendingDot",
        "description": "Set the dot of the last ghost node when pending is true",
        "type": "string\\|ReactNode",
        "default": "`<Icon type=\"loading\" />`",
        "version": "3.3.0"
      },
      "reverse": {
        "property": "reverse",
        "description": "reverse nodes or not",
        "type": "boolean",
        "default": "false",
        "version": "3.5.0"
      },
      "mode": {
        "property": "mode",
        "description": "By sending `alternate` the timeline will distribute the nodes to the left and right.",
        "type": "`left` \\| `alternate` \\| `right`",
        "default": "-",
        "version": "3.8.0"
      }
    },
    "Transfer": {
      "className": {
        "property": "className",
        "description": "A custom CSS class.",
        "type": "string",
        "default": "\\['', '']",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in `targetKeys` prop.",
        "type": "[TransferItem](https://git.io/vMM64)\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether disabled transfer",
        "type": "boolean",
        "default": "false",
        "version": "3.10.0"
      },
      "filterOption": {
        "property": "filterOption",
        "description": "A function to determine whether an item should show in search result list",
        "type": "(inputValue, option): boolean",
        "default": "",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "A function used for rendering the footer.",
        "type": "(props) => ReactNode",
        "default": "",
        "version": ""
      },
      "lazy": {
        "property": "lazy",
        "description": "property of [react-lazy-load](https://github.com/loktar00/react-lazy-load) for lazy rendering items. Turn off it by set to `false`.",
        "type": "object\\|boolean",
        "default": "`{ height: 32, offset: 32 }`",
        "version": ""
      },
      "listStyle": {
        "property": "listStyle",
        "description": "A custom CSS style used for rendering the transfer columns.",
        "type": "object\\|({direction: 'left'\\|'right'}) => object",
        "default": "",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "i18n text including filter, empty text, item unit, etc",
        "type": "{ itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode; }",
        "default": "`{ itemUnit: 'item', itemsUnit: 'items', notFoundContent: 'The list is empty', searchPlaceholder: 'Search here' }`",
        "version": "3.9.0"
      },
      "operations": {
        "property": "operations",
        "description": "A set of operations that are sorted from top to bottom.",
        "type": "string\\[]",
        "default": "\\['>', '&lt;']",
        "version": ""
      },
      "operationStyle": {
        "property": "operationStyle",
        "description": "A custom CSS style used for rendering the operations column.",
        "type": "object",
        "default": "",
        "version": "3.6.0"
      },
      "render": {
        "property": "render",
        "description": "The function to generate the item shown on a column. Based on an record (element of the dataSource array), this function should return a React element which is generated from that record. Also, it can return a plain object with `value` and `label`, `label` is a React element and `value` is for title",
        "type": "(record) => ReactNode",
        "default": "",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "A set of keys of selected items.",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "If included, a search box is shown on each column.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showSelectAll": {
        "property": "showSelectAll",
        "description": "Show select all checkbox on the header",
        "type": "boolean",
        "default": "true",
        "version": "3.18.0"
      },
      "style": {
        "property": "style",
        "description": "A custom CSS style used for rendering wrapper element.",
        "type": "object",
        "default": "",
        "version": "3.6.0"
      },
      "targetKeys": {
        "property": "targetKeys",
        "description": "A set of keys of elements that are listed on the right column.",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "titles": {
        "property": "titles",
        "description": "A set of titles that are sorted from left to right.",
        "type": "ReactNode\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "A callback function that is executed when the transfer between columns is complete.",
        "type": "(targetKeys, direction, moveKeys): void",
        "default": "",
        "version": ""
      },
      "onScroll": {
        "property": "onScroll",
        "description": "A callback function which is executed when scroll options list",
        "type": "(direction, event): void",
        "default": "",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "A callback function which is executed when search field are changed",
        "type": "(direction: 'left'\\|'right', value: string): void",
        "default": "-",
        "version": "3.11.0"
      },
      "onSelectChange": {
        "property": "onSelectChange",
        "description": "A callback function which is executed when selected items are changed.",
        "type": "(sourceSelectedKeys, targetSelectedKeys): void",
        "default": "",
        "version": ""
      }
    },
    "Tree": {
      "autoExpandParent": {
        "property": "autoExpandParent",
        "description": "Whether to automatically expand a parent treeNode",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "blockNode": {
        "property": "blockNode",
        "description": "Whether treeNode fill remaining horizontal space",
        "type": "boolean",
        "default": "false",
        "version": "3.15.0"
      },
      "checkable": {
        "property": "checkable",
        "description": "Adds a `Checkbox` before the treeNodes",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkedKeys": {
        "property": "checkedKeys",
        "description": "(Controlled) Specifies the keys of the checked treeNodes (PS: When this specifies the key of a treeNode which is also a parent treeNode, all the children treeNodes of will be checked; and vice versa, when it specifies the key of a treeNode which is a child treeNode, its parent treeNode will also be checked. When `checkable` and `checkStrictly` is true, its object has `checked` and `halfChecked` property. Regardless of whether the child or parent treeNode is checked, they won't impact each other.",
        "type": "string\\[] \\| {checked: string\\[], halfChecked: string\\[]}",
        "default": "\\[]",
        "version": ""
      },
      "checkStrictly": {
        "property": "checkStrictly",
        "description": "Check treeNode precisely; parent treeNode and children treeNodes are not associated",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultCheckedKeys": {
        "property": "defaultCheckedKeys",
        "description": "Specifies the keys of the default checked treeNodes",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "defaultExpandAll": {
        "property": "defaultExpandAll",
        "description": "Whether to expand all treeNodes by default",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultExpandedKeys": {
        "property": "defaultExpandedKeys",
        "description": "Specify the keys of the default expanded treeNodes",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "defaultExpandParent": {
        "property": "defaultExpandParent",
        "description": "auto expand parent treeNodes when init",
        "type": "bool",
        "default": "true",
        "version": "3.4.0"
      },
      "defaultSelectedKeys": {
        "property": "defaultSelectedKeys",
        "description": "Specifies the keys of the default selected treeNodes",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "whether disabled the tree",
        "type": "bool",
        "default": "false",
        "version": "3.4.0"
      },
      "draggable": {
        "property": "draggable",
        "description": "Specifies whether this Tree is draggable (IE > 8)",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "expandedKeys": {
        "property": "expandedKeys",
        "description": "(Controlled) Specifies the keys of the expanded treeNodes",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "filterTreeNode": {
        "property": "filterTreeNode",
        "description": "Defines a function to filter (highlight) treeNodes. When the function returns `true`, the corresponding treeNode will be highlighted",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "Load data asynchronously",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "loadedKeys": {
        "property": "loadedKeys",
        "description": "(Controlled) Set loaded tree nodes. Need work with `loadData`",
        "type": "string\\[]",
        "default": "\\[]",
        "version": "3.7.0"
      },
      "multiple": {
        "property": "multiple",
        "description": "Allows selecting multiple treeNodes",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "whether can be selected",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "(Controlled) Specifies the keys of the selected treeNodes",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "showIcon": {
        "property": "showIcon",
        "description": "Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to `true`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "switcherIcon": {
        "property": "switcherIcon",
        "description": "customize collapse/expand icon of tree node",
        "type": "React.ReactElement",
        "default": "-",
        "version": "3.12.0"
      },
      "showLine": {
        "property": "showLine",
        "description": "Shows a connecting line",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onCheck": {
        "property": "onCheck",
        "description": "Callback function for when the onCheck event occurs",
        "type": "function(checkedKeys, e:{checked: bool, checkedNodes, node, event, halfCheckedKeys})",
        "default": "-",
        "version": ""
      },
      "onDragEnd": {
        "property": "onDragEnd",
        "description": "Callback function for when the onDragEnd event occurs",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragEnter": {
        "property": "onDragEnter",
        "description": "Callback function for when the onDragEnter event occurs",
        "type": "function({event, node, expandedKeys})",
        "default": "-",
        "version": ""
      },
      "onDragLeave": {
        "property": "onDragLeave",
        "description": "Callback function for when the onDragLeave event occurs",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragOver": {
        "property": "onDragOver",
        "description": "Callback function for when the onDragOver event occurs",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragStart": {
        "property": "onDragStart",
        "description": "Callback function for when the onDragStart event occurs",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDrop": {
        "property": "onDrop",
        "description": "Callback function for when the onDrop event occurs",
        "type": "function({event, node, dragNode, dragNodesKeys})",
        "default": "-",
        "version": ""
      },
      "onExpand": {
        "property": "onExpand",
        "description": "Callback function for when a treeNode is expanded or collapsed",
        "type": "function(expandedKeys, {expanded: bool, node})",
        "default": "-",
        "version": ""
      },
      "onLoad": {
        "property": "onLoad",
        "description": "Callback function for when a treeNode is loaded",
        "type": "function(loadedKeys, {event, node})",
        "default": "-",
        "version": "3.7.0"
      },
      "onRightClick": {
        "property": "onRightClick",
        "description": "Callback function for when the user right clicks a treeNode",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Callback function for when the user clicks a treeNode",
        "type": "function(selectedKeys, e:{selected: bool, selectedNodes, node, event})",
        "default": "-",
        "version": ""
      },
      "treeData": {
        "property": "treeData",
        "description": "treeNodes data Array, if set it then you need not to construct children TreeNode. (key should be unique across the whole array)",
        "type": "array\\\\&lt;{ key, title, children, \\[disabled, selectable] }>",
        "default": "-",
        "version": "3.19.8"
      }
    },
    "Tree.TreeNode": {
      "checkable": {
        "property": "checkable",
        "description": "When Tree is checkable, set TreeNode display Checkbox or not",
        "type": "boolean",
        "default": "-",
        "version": "3.17.0"
      },
      "disableCheckbox": {
        "property": "disableCheckbox",
        "description": "Disables the checkbox of the treeNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disables the treeNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "customize icon. When you pass component, whose render will receive full TreeNode props as component props",
        "type": "ReactNode/Function(props):ReactNode",
        "default": "-",
        "version": ""
      },
      "isLeaf": {
        "property": "isLeaf",
        "description": "Determines if this is a leaf node(effective when `loadData` is specified)",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree!",
        "type": "string",
        "default": "internal calculated position of treeNode",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "Set whether the treeNode can be selected",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Title",
        "type": "string\\|ReactNode",
        "default": "'---'",
        "version": ""
      }
    },
    "Tree.DirectoryTree": {
      "expandAction": {
        "property": "expandAction",
        "description": "Directory open logic, optional `false` `'click'` `'doubleClick'`",
        "type": "string",
        "default": "click",
        "version": "3.7.0"
      }
    },
    "TreeSelect.TreeNode": {
      "selectable": {
        "property": "selectable",
        "description": "can be selected",
        "type": "boolean",
        "default": "true",
        "version": "3.9.3"
      },
      "checkable": {
        "property": "checkable",
        "description": "When Tree is checkable, set TreeNode display Checkbox or not",
        "type": "boolean",
        "default": "-",
        "version": "3.17.0"
      },
      "disableCheckbox": {
        "property": "disableCheckbox",
        "description": "Disables the checkbox of the treeNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "isLeaf": {
        "property": "isLeaf",
        "description": "Leaf node or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Required property (unless using `treeDataSimpleMode`), should be unique in the tree",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Content showed on the treeNodes",
        "type": "string\\|ReactNode",
        "default": "'---'",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Will be treated as `treeNodeFilterProp` by default, should be unique in the tree",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Typography.Text": {
      "code": {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": "3.15.1"
      },
      "copyable": {
        "property": "copyable",
        "description": "Config copy. Can set copy text and callback when is an object",
        "type": "boolean \\| { text: string, onCopy: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "delete": {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "editable": {
        "property": "editable",
        "description": "Editable. Can control edit state when is object",
        "type": "boolean \\| { editing: boolean, onStart: Function, onChange: Function(string) }",
        "default": "false",
        "version": "3.14.0"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "mark": {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "underline": {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "Trigger when user edits the content",
        "type": "Function(string)",
        "default": "-",
        "version": "3.14.0"
      },
      "strong": {
        "property": "strong",
        "description": "Bold style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "type": {
        "property": "type",
        "description": "Content type",
        "type": "`secondary`, `warning`, `danger`",
        "default": "-",
        "version": "3.14.0"
      }
    },
    "TreeSelect": {
      "allowClear": {
        "property": "allowClear",
        "description": "Whether allow clear",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoClearSearchValue": {
        "property": "autoClearSearchValue",
        "description": "auto clear search input value when multiple select is selected/deselected",
        "type": "boolean",
        "default": "true",
        "version": "3.7.0"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "To set the initial selected treeNode(s).",
        "type": "string\\|string\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dropdownClassName": {
        "property": "dropdownClassName",
        "description": "className of dropdown menu",
        "type": "string",
        "default": "-",
        "version": "3.3.0"
      },
      "dropdownMatchSelectWidth": {
        "property": "dropdownMatchSelectWidth",
        "description": "Determine whether the dropdown menu and the select input are the same width. Default set `min-width` same as input.",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "dropdownStyle": {
        "property": "dropdownStyle",
        "description": "To set the style of the dropdown menu",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "filterTreeNode": {
        "property": "filterTreeNode",
        "description": "Whether to filter treeNodes by input value. The value of `treeNodeFilterProp` is used for filtering by default.",
        "type": "boolean\\|Function(inputValue: string, treeNode: TreeNode) (should return boolean)",
        "default": "Function",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "To set the container of the dropdown menu. The default is to create a `div` element in `body`, you can reset it to the scrolling area and make a relative reposition. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "Function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "labelInValue": {
        "property": "labelInValue",
        "description": "whether to embed label in value, turn the format of value from `string` to `{value: string, label: ReactNode, halfChecked: string[]}`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "Load data asynchronously.",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "Max tag count to show",
        "type": "number",
        "default": "-",
        "version": "3.7.0"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "Placeholder for not showing tags",
        "type": "ReactNode/function(omittedValues)",
        "default": "-",
        "version": "3.7.0"
      },
      "multiple": {
        "property": "multiple",
        "description": "Support multiple or not, will be `true` when enable `treeCheckable`.",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "Placeholder of the select input",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "searchPlaceholder": {
        "property": "searchPlaceholder",
        "description": "Placeholder of the search input",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "searchValue": {
        "property": "searchValue",
        "description": "work with `onSearch` to make search value controlled.",
        "type": "string",
        "default": "-",
        "version": "3.7.0"
      },
      "treeIcon": {
        "property": "treeIcon",
        "description": "Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to `true`",
        "type": "boolean",
        "default": "false",
        "version": "3.13.1"
      },
      "showCheckedStrategy": {
        "property": "showCheckedStrategy",
        "description": "The way show selected item in box. **Default:** just show child nodes. **`TreeSelect.SHOW_ALL`:** show all checked treeNodes (include parent treeNode). **`TreeSelect.SHOW_PARENT`:** show checked treeNodes (just show parent treeNode).",
        "type": "enum { TreeSelect.SHOW_ALL, TreeSelect.SHOW_PARENT, TreeSelect.SHOW_CHILD }",
        "default": "TreeSelect.SHOW_CHILD",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "Support search or not",
        "type": "boolean",
        "default": "single: `false` \\| multiple: `true`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "To set the size of the select input, options: `large` `small`",
        "type": "string",
        "default": "'default'",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": "3.10.0"
      },
      "treeCheckable": {
        "property": "treeCheckable",
        "description": "Whether to show checkbox on the treeNodes",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeCheckStrictly": {
        "property": "treeCheckStrictly",
        "description": "Whether to check nodes precisely (in the `checkable` mode), means parent and child nodes are not associated, and it will make `labelInValue` be true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeData": {
        "property": "treeData",
        "description": "Data of the treeNodes, manual construction work is no longer needed if this property has been set(ensure the Uniqueness of each value)",
        "type": "array\\\\&lt;{ value, title, children, \\[disabled, disableCheckbox, selectable, checkable] }>",
        "default": "\\[]",
        "version": ""
      },
      "treeDataSimpleMode": {
        "property": "treeDataSimpleMode",
        "description": "Enable simple mode of treeData. Changes the `treeData` schema to: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...] where pId is parent node's id). It is possible to replace the default `id` and `pId` keys by providing object to `treeDataSimpleMode`",
        "type": "false\\|object\\\\&lt;{ id: string, pId: string, rootPId: string }>",
        "default": "false",
        "version": ""
      },
      "treeDefaultExpandAll": {
        "property": "treeDefaultExpandAll",
        "description": "Whether to expand all treeNodes by default",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeDefaultExpandedKeys": {
        "property": "treeDefaultExpandedKeys",
        "description": "Default expanded treeNodes",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "treeExpandedKeys": {
        "property": "treeExpandedKeys",
        "description": "Set expanded keys",
        "type": "string\\[]",
        "default": "-",
        "version": "3.10.0"
      },
      "treeNodeFilterProp": {
        "property": "treeNodeFilterProp",
        "description": "Will be used for filtering if `filterTreeNode` returns true",
        "type": "string",
        "default": "'value'",
        "version": ""
      },
      "treeNodeLabelProp": {
        "property": "treeNodeLabelProp",
        "description": "Will render as content of select",
        "type": "string",
        "default": "'title'",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "To set the current selected treeNode(s).",
        "type": "string\\|string\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "A callback function, can be executed when selected treeNodes or input value change",
        "type": "function(value, label, extra)",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "A callback function, can be executed when the search input changes.",
        "type": "function(value: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "A callback function, can be executed when you select a treeNode.",
        "type": "function(value, node, extra)",
        "default": "-",
        "version": ""
      },
      "onTreeExpand": {
        "property": "onTreeExpand",
        "description": "A callback function, can be executed when treeNode expanded",
        "type": "function(expandedKeys)",
        "default": "-",
        "version": "3.10.0"
      }
    },
    "Typography.Title": {
      "code": {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": "3.15.1"
      },
      "copyable": {
        "property": "copyable",
        "description": "Config copy. Can set copy text and callback when is an object",
        "type": "boolean \\| { text: string, onCopy: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "delete": {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "editable": {
        "property": "editable",
        "description": "Editable. Can control edit state when is object",
        "type": "boolean \\| { editing: boolean, onStart: Function, onChange: Function(string) }",
        "default": "false",
        "version": "3.14.0"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows. Can configure rows and expandable by using object",
        "type": "boolean \\| { rows: number, expandable: boolean, onExpand: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "level": {
        "property": "level",
        "description": "Set content importance. Match with `h1`, `h2`, `h3`, `h4`",
        "type": "number: `1`, `2`, `3`, `4`",
        "default": "1",
        "version": "3.14.0"
      },
      "mark": {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "underline": {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "Trigger when user edits the content",
        "type": "Function(string)",
        "default": "-",
        "version": "3.14.0"
      },
      "type": {
        "property": "type",
        "description": "Content type",
        "type": "`secondary`, `warning`, `danger`",
        "default": "-",
        "version": "3.14.0"
      }
    },
    "Typography.Paragraph": {
      "code": {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": "3.15.1"
      },
      "copyable": {
        "property": "copyable",
        "description": "Config copy. Can set copy text and callback when is an object",
        "type": "boolean \\| { text: string, onCopy: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "delete": {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "editable": {
        "property": "editable",
        "description": "Editable. Can control edit state when is object",
        "type": "boolean \\| { editing: boolean, onStart: Function, onChange: Function(string) }",
        "default": "false",
        "version": "3.14.0"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows. Can configure rows and expandable by using object",
        "type": "boolean \\| { rows: number, expandable: boolean, onExpand: Function }",
        "default": "false",
        "version": "3.14.0"
      },
      "mark": {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "underline": {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "Trigger when user edits the content",
        "type": "Function(string)",
        "default": "-",
        "version": "3.14.0"
      },
      "strong": {
        "property": "strong",
        "description": "Bold style",
        "type": "boolean",
        "default": "false",
        "version": "3.14.0"
      },
      "type": {
        "property": "type",
        "description": "Content type",
        "type": "`secondary`, `warning`, `danger`",
        "default": "-",
        "version": "3.14.0"
      }
    },
    "Upload": {
      "accept": {
        "property": "accept",
        "description": "File types that can be accepted. See [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "action": {
        "property": "action",
        "description": "Uploading URL",
        "type": "string\\|(file) => `Promise`",
        "default": "-",
        "version": ""
      },
      "method": {
        "property": "method",
        "description": "http method of upload request",
        "type": "string",
        "default": "'post'",
        "version": "3.25.0"
      },
      "directory": {
        "property": "directory",
        "description": "support upload whole directory ([caniuse](https://caniuse.com/#feat=input-file-directory))",
        "type": "boolean",
        "default": "false",
        "version": "3.7.0"
      },
      "beforeUpload": {
        "property": "beforeUpload",
        "description": "Hook function which will be executed before uploading. Uploading will be stopped with `false` or a rejected Promise returned. **Warning：this function is not supported in IE9**。",
        "type": "(file, fileList) => \\`boolean",
        "default": "Promise\\`",
        "version": "-"
      },
      "customRequest": {
        "property": "customRequest",
        "description": "override for the default xhr behavior allowing for additional customization and ability to implement your own XMLHttpRequest",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "data": {
        "property": "data",
        "description": "Uploading extra params or function which can return uploading extra params.",
        "type": "object\\|function(file)",
        "default": "-",
        "version": ""
      },
      "defaultFileList": {
        "property": "defaultFileList",
        "description": "Default list of files that have been uploaded.",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "disable upload button",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "fileList": {
        "property": "fileList",
        "description": "List of files that have been uploaded (controlled). Here is a common issue [#2423](https://github.com/ant-design/ant-design/issues/2423) when using it",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "headers": {
        "property": "headers",
        "description": "Set request headers, valid above IE10.",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "listType": {
        "property": "listType",
        "description": "Built-in stylesheets, support for three types: `text`, `picture` or `picture-card`",
        "type": "string",
        "default": "'text'",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "Whether to support selected multiple file. `IE10+` supported. You can select multiple files with CTRL holding down while multiple is set to be true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "The name of uploading file",
        "type": "string",
        "default": "'file'",
        "version": ""
      },
      "previewFile": {
        "property": "previewFile",
        "description": "Customize preview file logic",
        "type": "(file: File \\| Blob) => Promise&lt;dataURL: string>",
        "default": "-",
        "version": "3.17.0"
      },
      "showUploadList": {
        "property": "showUploadList",
        "description": "Whether to show default upload list, could be an object to specify `showPreviewIcon`, `showRemoveIcon` and `showDownloadIcon` individually",
        "type": "Boolean or { showPreviewIcon?: boolean, showDownloadIcon?: boolean, showRemoveIcon?: boolean }",
        "default": "true",
        "version": ""
      },
      "supportServerRender": {
        "property": "supportServerRender",
        "description": "Need to be turned on while the server side is rendering",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "withCredentials": {
        "property": "withCredentials",
        "description": "ajax upload with cookie sent",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "openFileDialogOnClick": {
        "property": "openFileDialogOnClick",
        "description": "click open file dialog",
        "type": "boolean",
        "default": "true",
        "version": "3.10.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "A callback function, can be executed when uploading state is changing, see [onChange](#onChange)",
        "type": "Function",
        "default": "-",
        "version": ""
      },
      "onPreview": {
        "property": "onPreview",
        "description": "A callback function, will be executed when file link or preview icon is clicked",
        "type": "Function(file)",
        "default": "-",
        "version": ""
      },
      "onRemove": {
        "property": "onRemove",
        "description": "A callback function, will be executed when removing file button is clicked, remove event will be prevented when return value is `false` or a Promise which resolve(false) or reject",
        "type": "Function(file): \\`boolean",
        "default": "Promise\\`",
        "version": "-"
      },
      "onDownload": {
        "property": "onDownload",
        "description": "Click the method to download the file, pass the method to perform the method logic, do not pass the default jump to the new TAB.",
        "type": "Function(file): void",
        "default": "Jump to new TAB",
        "version": ""
      },
      "transformFile  ": {
        "property": "transformFile  ",
        "description": "Customize transform file before request",
        "type": "Function(file): \\`string",
        "default": "Blob",
        "version": "File"
      }
    }
  }
}